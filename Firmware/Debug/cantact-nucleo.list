
cantact-nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094b4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08009678  08009678  00019678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009758  08009758  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08009758  08009758  00019758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009760  08009760  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009760  08009760  00019760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009764  08009764  00019764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a54  200001f4  0800995c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c48  0800995c  00021c48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018dbe  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003724  00000000  00000000  00038fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f98  00000000  00000000  0003c708  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df0  00000000  00000000  0003d6a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000252d7  00000000  00000000  0003e490  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000102e4  00000000  00000000  00063767  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cee4c  00000000  00000000  00073a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00142897  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004004  00000000  00000000  00142914  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	200001f4 	.word	0x200001f4
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08009660 	.word	0x08009660

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	200001f8 	.word	0x200001f8
 8000200:	08009660 	.word	0x08009660

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <CAN_SetFilter>:
static uint32_t Prescaler;

/* Setting up a Filter is very convoluted.
 * See RM0390 Page 1042 for more information on Filtering.
 */
HAL_CAN_StateTypeDef CAN_SetFilter(CAN_HandleTypeDef *hcan, uint32_t ID, uint32_t Mask) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
    // See page 1042 of RM0390 for details on filters
    Filter.FilterIdHigh = (ID >> 16) & 0x0000FFFF;
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	0c1b      	lsrs	r3, r3, #16
 8000514:	4a18      	ldr	r2, [pc, #96]	; (8000578 <CAN_SetFilter+0x74>)
 8000516:	6013      	str	r3, [r2, #0]
    Filter.FilterIdLow = (ID & 0x0000FFFF);
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	b29b      	uxth	r3, r3
 800051c:	4a16      	ldr	r2, [pc, #88]	; (8000578 <CAN_SetFilter+0x74>)
 800051e:	6053      	str	r3, [r2, #4]

    Filter.FilterMaskIdHigh = (Mask >> 16) & 0x0000FFFF;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	0c1b      	lsrs	r3, r3, #16
 8000524:	4a14      	ldr	r2, [pc, #80]	; (8000578 <CAN_SetFilter+0x74>)
 8000526:	6093      	str	r3, [r2, #8]
    Filter.FilterMaskIdLow = (ID & 0x0000FFFF);
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	b29b      	uxth	r3, r3
 800052c:	4a12      	ldr	r2, [pc, #72]	; (8000578 <CAN_SetFilter+0x74>)
 800052e:	60d3      	str	r3, [r2, #12]

    Filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000530:	4b11      	ldr	r3, [pc, #68]	; (8000578 <CAN_SetFilter+0x74>)
 8000532:	2200      	movs	r2, #0
 8000534:	611a      	str	r2, [r3, #16]
    Filter.FilterBank = 0;
 8000536:	4b10      	ldr	r3, [pc, #64]	; (8000578 <CAN_SetFilter+0x74>)
 8000538:	2200      	movs	r2, #0
 800053a:	615a      	str	r2, [r3, #20]
    Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800053c:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <CAN_SetFilter+0x74>)
 800053e:	2200      	movs	r2, #0
 8000540:	619a      	str	r2, [r3, #24]
    Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000542:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <CAN_SetFilter+0x74>)
 8000544:	2201      	movs	r2, #1
 8000546:	61da      	str	r2, [r3, #28]
    Filter.FilterActivation = ENABLE;
 8000548:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <CAN_SetFilter+0x74>)
 800054a:	2201      	movs	r2, #1
 800054c:	621a      	str	r2, [r3, #32]
    Filter.SlaveStartFilterBank = 14;
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <CAN_SetFilter+0x74>)
 8000550:	220e      	movs	r2, #14
 8000552:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(hcan, &Filter) != HAL_OK){
 8000554:	4908      	ldr	r1, [pc, #32]	; (8000578 <CAN_SetFilter+0x74>)
 8000556:	68f8      	ldr	r0, [r7, #12]
 8000558:	f001 fe18 	bl	800218c <HAL_CAN_ConfigFilter>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <CAN_SetFilter+0x62>
		return HAL_CAN_STATE_ERROR;
 8000562:	2305      	movs	r3, #5
 8000564:	e003      	b.n	800056e <CAN_SetFilter+0x6a>
	}

	return HAL_CAN_GetState(hcan);
 8000566:	68f8      	ldr	r0, [r7, #12]
 8000568:	f002 f994 	bl	8002894 <HAL_CAN_GetState>
 800056c:	4603      	mov	r3, r0
}
 800056e:	4618      	mov	r0, r3
 8000570:	3710      	adds	r7, #16
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000210 	.word	0x20000210

0800057c <CAN_SetBitRate>:
 * See RM0390 Page 1048 for more information on the CAN_BTR register
 *
 */


HAL_CAN_StateTypeDef CAN_SetBitRate(CAN_HandleTypeDef *hcan, CAN_BitRate_TypeDef BitRate) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	460b      	mov	r3, r1
 8000586:	70fb      	strb	r3, [r7, #3]
    if (HAL_CAN_GetState(hcan) != HAL_CAN_STATE_READY) {
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f002 f983 	bl	8002894 <HAL_CAN_GetState>
 800058e:	4603      	mov	r3, r0
 8000590:	2b01      	cmp	r3, #1
 8000592:	d001      	beq.n	8000598 <CAN_SetBitRate+0x1c>
        return HAL_CAN_STATE_ERROR;
 8000594:	2305      	movs	r3, #5
 8000596:	e050      	b.n	800063a <CAN_SetBitRate+0xbe>
    }

    // BitRateMagic defined in "can.h"
    switch (BitRate) {
 8000598:	78fb      	ldrb	r3, [r7, #3]
 800059a:	2b08      	cmp	r3, #8
 800059c:	d839      	bhi.n	8000612 <CAN_SetBitRate+0x96>
 800059e:	a201      	add	r2, pc, #4	; (adr r2, 80005a4 <CAN_SetBitRate+0x28>)
 80005a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a4:	080005c9 	.word	0x080005c9
 80005a8:	080005d3 	.word	0x080005d3
 80005ac:	080005db 	.word	0x080005db
 80005b0:	080005e3 	.word	0x080005e3
 80005b4:	080005eb 	.word	0x080005eb
 80005b8:	080005f3 	.word	0x080005f3
 80005bc:	080005fb 	.word	0x080005fb
 80005c0:	08000603 	.word	0x08000603
 80005c4:	0800060b 	.word	0x0800060b
    case CAN_BITRATE_10K:
    	Prescaler = BitRateMagic / 1;
 80005c8:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <CAN_SetBitRate+0xc8>)
 80005ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80005ce:	601a      	str	r2, [r3, #0]
        break;
 80005d0:	e021      	b.n	8000616 <CAN_SetBitRate+0x9a>
    case CAN_BITRATE_20K:
    	Prescaler = BitRateMagic / 2;
 80005d2:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <CAN_SetBitRate+0xc8>)
 80005d4:	2296      	movs	r2, #150	; 0x96
 80005d6:	601a      	str	r2, [r3, #0]
        break;
 80005d8:	e01d      	b.n	8000616 <CAN_SetBitRate+0x9a>
    case CAN_BITRATE_50K:
    	Prescaler = BitRateMagic / 5;
 80005da:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <CAN_SetBitRate+0xc8>)
 80005dc:	223c      	movs	r2, #60	; 0x3c
 80005de:	601a      	str	r2, [r3, #0]
        break;
 80005e0:	e019      	b.n	8000616 <CAN_SetBitRate+0x9a>
    case CAN_BITRATE_100K:
        Prescaler = BitRateMagic / 10;
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <CAN_SetBitRate+0xc8>)
 80005e4:	221e      	movs	r2, #30
 80005e6:	601a      	str	r2, [r3, #0]
        break;
 80005e8:	e015      	b.n	8000616 <CAN_SetBitRate+0x9a>
    case CAN_BITRATE_125K:
        Prescaler = BitRateMagic * 2 / 25 ;
 80005ea:	4b16      	ldr	r3, [pc, #88]	; (8000644 <CAN_SetBitRate+0xc8>)
 80005ec:	2218      	movs	r2, #24
 80005ee:	601a      	str	r2, [r3, #0]
        break;
 80005f0:	e011      	b.n	8000616 <CAN_SetBitRate+0x9a>
    case CAN_BITRATE_250K:
        Prescaler = BitRateMagic / 25;
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <CAN_SetBitRate+0xc8>)
 80005f4:	220c      	movs	r2, #12
 80005f6:	601a      	str	r2, [r3, #0]
        break;
 80005f8:	e00d      	b.n	8000616 <CAN_SetBitRate+0x9a>
    case CAN_BITRATE_500K:
        Prescaler = BitRateMagic / 50;
 80005fa:	4b12      	ldr	r3, [pc, #72]	; (8000644 <CAN_SetBitRate+0xc8>)
 80005fc:	2206      	movs	r2, #6
 80005fe:	601a      	str	r2, [r3, #0]
        break;
 8000600:	e009      	b.n	8000616 <CAN_SetBitRate+0x9a>
    case CAN_BITRATE_750K:
        Prescaler = BitRateMagic / 75;
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <CAN_SetBitRate+0xc8>)
 8000604:	2204      	movs	r2, #4
 8000606:	601a      	str	r2, [r3, #0]
        break;
 8000608:	e005      	b.n	8000616 <CAN_SetBitRate+0x9a>
    case CAN_BITRATE_1000K:
        Prescaler = BitRateMagic / 100;
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <CAN_SetBitRate+0xc8>)
 800060c:	2203      	movs	r2, #3
 800060e:	601a      	str	r2, [r3, #0]
        break;
 8000610:	e001      	b.n	8000616 <CAN_SetBitRate+0x9a>
    default:
    	return HAL_CAN_STATE_ERROR;
 8000612:	2305      	movs	r3, #5
 8000614:	e011      	b.n	800063a <CAN_SetBitRate+0xbe>
    	break;
    }

    MODIFY_REG(hcan->Instance->BTR, CAN_BTR_BRP_Msk, Prescaler - 1);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	69db      	ldr	r3, [r3, #28]
 800061c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000620:	f023 0303 	bic.w	r3, r3, #3
 8000624:	4a07      	ldr	r2, [pc, #28]	; (8000644 <CAN_SetBitRate+0xc8>)
 8000626:	6812      	ldr	r2, [r2, #0]
 8000628:	1e51      	subs	r1, r2, #1
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	6812      	ldr	r2, [r2, #0]
 800062e:	430b      	orrs	r3, r1
 8000630:	61d3      	str	r3, [r2, #28]

	return HAL_CAN_GetState(hcan);
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f002 f92e 	bl	8002894 <HAL_CAN_GetState>
 8000638:	4603      	mov	r3, r0
}
 800063a:	4618      	mov	r0, r3
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000238 	.word	0x20000238

08000648 <CAN_SetMode>:

	return HAL_CAN_GetState(hcan);

}

HAL_CAN_StateTypeDef CAN_SetMode(CAN_HandleTypeDef *hcan, CAN_Mode_TypeDef Mode) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	70fb      	strb	r3, [r7, #3]
    if (HAL_CAN_GetState(hcan) != HAL_CAN_STATE_READY) {
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f002 f91d 	bl	8002894 <HAL_CAN_GetState>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d001      	beq.n	8000664 <CAN_SetMode+0x1c>
        return HAL_CAN_STATE_ERROR;
 8000660:	2305      	movs	r3, #5
 8000662:	e03b      	b.n	80006dc <CAN_SetMode+0x94>
    }

	switch (Mode)
 8000664:	78fb      	ldrb	r3, [r7, #3]
 8000666:	2b03      	cmp	r3, #3
 8000668:	d832      	bhi.n	80006d0 <CAN_SetMode+0x88>
 800066a:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <CAN_SetMode+0x28>)
 800066c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000670:	08000681 	.word	0x08000681
 8000674:	08000693 	.word	0x08000693
 8000678:	080006a9 	.word	0x080006a9
 800067c:	080006bf 	.word	0x080006bf
	{
	case CAN_NORMAL:
	    MODIFY_REG(hcan->Instance->BTR, (CAN_BTR_LBKM_Msk | CAN_BTR_SILM_Msk), CAN_MODE_NORMAL);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	69da      	ldr	r2, [r3, #28]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800068e:	61da      	str	r2, [r3, #28]
		break;
 8000690:	e020      	b.n	80006d4 <CAN_SetMode+0x8c>
	case CAN_LOOPBACK:
	    MODIFY_REG(hcan->Instance->BTR, (CAN_BTR_LBKM_Msk | CAN_BTR_SILM_Msk), CAN_MODE_LOOPBACK);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	69db      	ldr	r3, [r3, #28]
 8000698:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80006a4:	61da      	str	r2, [r3, #28]
		break;
 80006a6:	e015      	b.n	80006d4 <CAN_SetMode+0x8c>
	case CAN_LISTEN:
	    MODIFY_REG(hcan->Instance->BTR, (CAN_BTR_LBKM_Msk | CAN_BTR_SILM_Msk), CAN_MODE_SILENT);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80006ba:	61da      	str	r2, [r3, #28]
		break;
 80006bc:	e00a      	b.n	80006d4 <CAN_SetMode+0x8c>
	case CAN_TEST:
	    MODIFY_REG(hcan->Instance->BTR, (CAN_BTR_LBKM_Msk | CAN_BTR_SILM_Msk), CAN_MODE_SILENT_LOOPBACK);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	69da      	ldr	r2, [r3, #28]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80006cc:	61da      	str	r2, [r3, #28]
		break;
 80006ce:	e001      	b.n	80006d4 <CAN_SetMode+0x8c>
	default:
		return HAL_CAN_STATE_ERROR;
 80006d0:	2305      	movs	r3, #5
 80006d2:	e003      	b.n	80006dc <CAN_SetMode+0x94>
		break;
	}

	return HAL_CAN_GetState(hcan);
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f002 f8dd 	bl	8002894 <HAL_CAN_GetState>
 80006da:	4603      	mov	r3, r0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <LED_RedForceOn>:

static uint32_t LED_LastOn_Blue = 0;
static uint32_t LED_LastOff_Blue = 0;

void LED_RedForceOn(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <LED_RedForceOn+0x20>)
 80006f0:	f002 fb9c 	bl	8002e2c <HAL_GPIO_WritePin>
	LED_LastOn_Red = HAL_GetTick();
 80006f4:	f001 fc1e 	bl	8001f34 <HAL_GetTick>
 80006f8:	4602      	mov	r2, r0
 80006fa:	4b03      	ldr	r3, [pc, #12]	; (8000708 <LED_RedForceOn+0x24>)
 80006fc:	601a      	str	r2, [r3, #0]
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40020400 	.word	0x40020400
 8000708:	2000023c 	.word	0x2000023c

0800070c <LED_RedOn>:

void LED_RedOn(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	// Make sure the LED has been off for at least LED_OFF_DURATION before turning on again
	// This prevents a solid status LED on a busy CAN bus
	if(LED_LastOn_Red == 0 && HAL_GetTick() - LED_LastOff_Red > LED_OFF_DURATION)
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <LED_RedOn+0x38>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d112      	bne.n	800073e <LED_RedOn+0x32>
 8000718:	f001 fc0c 	bl	8001f34 <HAL_GetTick>
 800071c:	4602      	mov	r2, r0
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <LED_RedOn+0x3c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	2b32      	cmp	r3, #50	; 0x32
 8000726:	d90a      	bls.n	800073e <LED_RedOn+0x32>
	{
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072e:	4807      	ldr	r0, [pc, #28]	; (800074c <LED_RedOn+0x40>)
 8000730:	f002 fb7c 	bl	8002e2c <HAL_GPIO_WritePin>
		LED_LastOn_Red = HAL_GetTick();
 8000734:	f001 fbfe 	bl	8001f34 <HAL_GetTick>
 8000738:	4602      	mov	r2, r0
 800073a:	4b02      	ldr	r3, [pc, #8]	; (8000744 <LED_RedOn+0x38>)
 800073c:	601a      	str	r2, [r3, #0]
	}
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000023c 	.word	0x2000023c
 8000748:	20000240 	.word	0x20000240
 800074c:	40020400 	.word	0x40020400

08000750 <LED_GreenOn>:


void LED_GreenOn(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	// Make sure the LED has been off for at least LED_DURATION before turning on again
	if(LED_LastOn_Green == 0 && HAL_GetTick() - LED_LastOff_Green > LED_OFF_DURATION)
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <LED_GreenOn+0x34>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d111      	bne.n	8000780 <LED_GreenOn+0x30>
 800075c:	f001 fbea 	bl	8001f34 <HAL_GetTick>
 8000760:	4602      	mov	r2, r0
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <LED_GreenOn+0x38>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	2b32      	cmp	r3, #50	; 0x32
 800076a:	d909      	bls.n	8000780 <LED_GreenOn+0x30>
	{
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 800076c:	2201      	movs	r2, #1
 800076e:	2101      	movs	r1, #1
 8000770:	4806      	ldr	r0, [pc, #24]	; (800078c <LED_GreenOn+0x3c>)
 8000772:	f002 fb5b 	bl	8002e2c <HAL_GPIO_WritePin>
		LED_LastOn_Green = HAL_GetTick();
 8000776:	f001 fbdd 	bl	8001f34 <HAL_GetTick>
 800077a:	4602      	mov	r2, r0
 800077c:	4b01      	ldr	r3, [pc, #4]	; (8000784 <LED_GreenOn+0x34>)
 800077e:	601a      	str	r2, [r3, #0]
	}
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000244 	.word	0x20000244
 8000788:	20000248 	.word	0x20000248
 800078c:	40020400 	.word	0x40020400

08000790 <LED_BlueOn>:

void LED_BlueOn(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	// Make sure the LED has been off for at least LED_DURATION before turning on again
	if(LED_LastOn_Blue == 0 && HAL_GetTick() - LED_LastOff_Blue > LED_OFF_DURATION)
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <LED_BlueOn+0x34>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d111      	bne.n	80007c0 <LED_BlueOn+0x30>
 800079c:	f001 fbca 	bl	8001f34 <HAL_GetTick>
 80007a0:	4602      	mov	r2, r0
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <LED_BlueOn+0x38>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	1ad3      	subs	r3, r2, r3
 80007a8:	2b32      	cmp	r3, #50	; 0x32
 80007aa:	d909      	bls.n	80007c0 <LED_BlueOn+0x30>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2180      	movs	r1, #128	; 0x80
 80007b0:	4806      	ldr	r0, [pc, #24]	; (80007cc <LED_BlueOn+0x3c>)
 80007b2:	f002 fb3b 	bl	8002e2c <HAL_GPIO_WritePin>
		LED_LastOn_Blue = HAL_GetTick();
 80007b6:	f001 fbbd 	bl	8001f34 <HAL_GetTick>
 80007ba:	4602      	mov	r2, r0
 80007bc:	4b01      	ldr	r3, [pc, #4]	; (80007c4 <LED_BlueOn+0x34>)
 80007be:	601a      	str	r2, [r3, #0]
	}
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	2000024c 	.word	0x2000024c
 80007c8:	20000250 	.word	0x20000250
 80007cc:	40020400 	.word	0x40020400

080007d0 <LED_Process>:

// Process time-based LED events
void LED_Process(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	// If red LED has been on for long enough, turn it off
	if(LED_LastOn_Red > 0 && HAL_GetTick() - LED_LastOn_Red > LED_RED_DURATION)
 80007d4:	4b26      	ldr	r3, [pc, #152]	; (8000870 <LED_Process+0xa0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d015      	beq.n	8000808 <LED_Process+0x38>
 80007dc:	f001 fbaa 	bl	8001f34 <HAL_GetTick>
 80007e0:	4602      	mov	r2, r0
 80007e2:	4b23      	ldr	r3, [pc, #140]	; (8000870 <LED_Process+0xa0>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	1ad3      	subs	r3, r2, r3
 80007e8:	2bc8      	cmp	r3, #200	; 0xc8
 80007ea:	d90d      	bls.n	8000808 <LED_Process+0x38>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007f2:	4820      	ldr	r0, [pc, #128]	; (8000874 <LED_Process+0xa4>)
 80007f4:	f002 fb1a 	bl	8002e2c <HAL_GPIO_WritePin>
		LED_LastOn_Red = 0;
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <LED_Process+0xa0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
		LED_LastOff_Red = HAL_GetTick();
 80007fe:	f001 fb99 	bl	8001f34 <HAL_GetTick>
 8000802:	4602      	mov	r2, r0
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <LED_Process+0xa8>)
 8000806:	601a      	str	r2, [r3, #0]
	}

	// If green LED has been on for long enough, turn it off
	if(LED_LastOn_Green > 0 && HAL_GetTick() - LED_LastOn_Green > LED_GREEN_DURATION)
 8000808:	4b1c      	ldr	r3, [pc, #112]	; (800087c <LED_Process+0xac>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d014      	beq.n	800083a <LED_Process+0x6a>
 8000810:	f001 fb90 	bl	8001f34 <HAL_GetTick>
 8000814:	4602      	mov	r2, r0
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <LED_Process+0xac>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	2bc8      	cmp	r3, #200	; 0xc8
 800081e:	d90c      	bls.n	800083a <LED_Process+0x6a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2101      	movs	r1, #1
 8000824:	4813      	ldr	r0, [pc, #76]	; (8000874 <LED_Process+0xa4>)
 8000826:	f002 fb01 	bl	8002e2c <HAL_GPIO_WritePin>
		LED_LastOn_Green = 0;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <LED_Process+0xac>)
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
		LED_LastOff_Green = HAL_GetTick();
 8000830:	f001 fb80 	bl	8001f34 <HAL_GetTick>
 8000834:	4602      	mov	r2, r0
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <LED_Process+0xb0>)
 8000838:	601a      	str	r2, [r3, #0]
	}

	// If blue LED has been on for long enough, turn it off
	if(LED_LastOn_Blue > 0 && HAL_GetTick() - LED_LastOn_Blue > LED_BLUE_DURATION)
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <LED_Process+0xb4>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d014      	beq.n	800086c <LED_Process+0x9c>
 8000842:	f001 fb77 	bl	8001f34 <HAL_GetTick>
 8000846:	4602      	mov	r2, r0
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <LED_Process+0xb4>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	2bc8      	cmp	r3, #200	; 0xc8
 8000850:	d90c      	bls.n	800086c <LED_Process+0x9c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	4807      	ldr	r0, [pc, #28]	; (8000874 <LED_Process+0xa4>)
 8000858:	f002 fae8 	bl	8002e2c <HAL_GPIO_WritePin>
		LED_LastOn_Blue = 0;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <LED_Process+0xb4>)
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
		LED_LastOff_Blue = HAL_GetTick();
 8000862:	f001 fb67 	bl	8001f34 <HAL_GetTick>
 8000866:	4602      	mov	r2, r0
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <LED_Process+0xb8>)
 800086a:	601a      	str	r2, [r3, #0]
	}
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2000023c 	.word	0x2000023c
 8000874:	40020400 	.word	0x40020400
 8000878:	20000240 	.word	0x20000240
 800087c:	20000244 	.word	0x20000244
 8000880:	20000248 	.word	0x20000248
 8000884:	2000024c 	.word	0x2000024c
 8000888:	20000250 	.word	0x20000250

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b092      	sub	sp, #72	; 0x48
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000892:	f001 fae9 	bl	8001e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000896:	f000 fab7 	bl	8000e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089a:	f000 fba1 	bl	8000fe0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800089e:	f000 fb75 	bl	8000f8c <MX_USART3_UART_Init>
  MX_CAN1_Init();
 80008a2:	f000 fb3b 	bl	8000f1c <MX_CAN1_Init>
  MX_USB_DEVICE_Init();
 80008a6:	f008 f807 	bl	80088b8 <MX_USB_DEVICE_Init>
  CAN_TxHeaderTypeDef TxHeader;
  CAN_RxHeaderTypeDef RxHeader;
  uint8_t aData[8];
  uint32_t Len;

  HAL_Delay(3000);
 80008aa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008ae:	f001 fb4d 	bl	8001f4c <HAL_Delay>
#ifdef TEST
  // BEGIN SLCAN TEST
  // Using SLCAN_CommandStringRx for tests so that no weird conflicts happen with SLCAN_CommandStringTx in USB receive callback
  // Test LEDs
  LED_GreenOn();
 80008b2:	f7ff ff4d 	bl	8000750 <LED_GreenOn>
  LED_BlueOn();
 80008b6:	f7ff ff6b 	bl	8000790 <LED_BlueOn>
  LED_RedOn();
 80008ba:	f7ff ff27 	bl	800070c <LED_RedOn>
  HAL_Delay(250);
 80008be:	20fa      	movs	r0, #250	; 0xfa
 80008c0:	f001 fb44 	bl	8001f4c <HAL_Delay>
  LED_Process();
 80008c4:	f7ff ff84 	bl	80007d0 <LED_Process>
  uint8_t TestResult = SLCAN_OK;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t Tx_Mailbox;
  // Test Setting Up Filter (0's) --> M
  // Try ExtId Filter
  ClearSLCAN();
 80008ce:	f001 f94b 	bl	8001b68 <ClearSLCAN>
  strcopy(SLCAN_CommandStringRx, (uint8_t *)"M0000000\r");
 80008d2:	49d5      	ldr	r1, [pc, #852]	; (8000c28 <main+0x39c>)
 80008d4:	48d5      	ldr	r0, [pc, #852]	; (8000c2c <main+0x3a0>)
 80008d6:	f000 fc31 	bl	800113c <strcopy>
  if (SLCAN_Parse_Str(SLCAN_CommandStringRx, 2 + SLCAN_EXT_ID_LEN, &TxHeader, aData) != SLCAN_OK) {
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80008e2:	210a      	movs	r1, #10
 80008e4:	48d1      	ldr	r0, [pc, #836]	; (8000c2c <main+0x3a0>)
 80008e6:	f000 fd5f 	bl	80013a8 <SLCAN_Parse_Str>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d002      	beq.n	80008f6 <main+0x6a>
	  TestResult = SLCAN_ERROR;
 80008f0:	2301      	movs	r3, #1
 80008f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  HAL_Delay(500);
 80008f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008fa:	f001 fb27 	bl	8001f4c <HAL_Delay>
  // Try StdId Filter
  ClearSLCAN();
 80008fe:	f001 f933 	bl	8001b68 <ClearSLCAN>
  strcopy(SLCAN_CommandStringRx, (uint8_t *)"M000\r");
 8000902:	49cb      	ldr	r1, [pc, #812]	; (8000c30 <main+0x3a4>)
 8000904:	48c9      	ldr	r0, [pc, #804]	; (8000c2c <main+0x3a0>)
 8000906:	f000 fc19 	bl	800113c <strcopy>
  if (SLCAN_Parse_Str(SLCAN_CommandStringRx, 2 + SLCAN_STD_ID_LEN, &TxHeader, aData) != SLCAN_OK) {
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000912:	2105      	movs	r1, #5
 8000914:	48c5      	ldr	r0, [pc, #788]	; (8000c2c <main+0x3a0>)
 8000916:	f000 fd47 	bl	80013a8 <SLCAN_Parse_Str>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d002      	beq.n	8000926 <main+0x9a>
	  TestResult = SLCAN_ERROR;
 8000920:	2301      	movs	r3, #1
 8000922:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  HAL_Delay(500);
 8000926:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800092a:	f001 fb0f 	bl	8001f4c <HAL_Delay>
  // Test Setting up a Mask (0's) --> m
  ClearSLCAN();
 800092e:	f001 f91b 	bl	8001b68 <ClearSLCAN>
  strcopy(SLCAN_CommandStringRx, (uint8_t *)"m000\r");
 8000932:	49c0      	ldr	r1, [pc, #768]	; (8000c34 <main+0x3a8>)
 8000934:	48bd      	ldr	r0, [pc, #756]	; (8000c2c <main+0x3a0>)
 8000936:	f000 fc01 	bl	800113c <strcopy>
  if (SLCAN_Parse_Str(SLCAN_CommandStringRx, 2 + SLCAN_STD_ID_LEN, &TxHeader, aData) != SLCAN_OK) {
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000942:	2105      	movs	r1, #5
 8000944:	48b9      	ldr	r0, [pc, #740]	; (8000c2c <main+0x3a0>)
 8000946:	f000 fd2f 	bl	80013a8 <SLCAN_Parse_Str>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d002      	beq.n	8000956 <main+0xca>
	  TestResult = SLCAN_ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  HAL_Delay(500);
 8000956:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800095a:	f001 faf7 	bl	8001f4c <HAL_Delay>
  // Test Filter+Mask Request
  ClearSLCAN();
 800095e:	f001 f903 	bl	8001b68 <ClearSLCAN>
  strcopy(SLCAN_CommandStringRx, (uint8_t *)"MM\r");
 8000962:	49b5      	ldr	r1, [pc, #724]	; (8000c38 <main+0x3ac>)
 8000964:	48b1      	ldr	r0, [pc, #708]	; (8000c2c <main+0x3a0>)
 8000966:	f000 fbe9 	bl	800113c <strcopy>
  if (SLCAN_Parse_Str(SLCAN_CommandStringRx, 3, &TxHeader, aData) != SLCAN_OK) {
 800096a:	f107 0308 	add.w	r3, r7, #8
 800096e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000972:	2103      	movs	r1, #3
 8000974:	48ad      	ldr	r0, [pc, #692]	; (8000c2c <main+0x3a0>)
 8000976:	f000 fd17 	bl	80013a8 <SLCAN_Parse_Str>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d002      	beq.n	8000986 <main+0xfa>
	  TestResult = SLCAN_ERROR;
 8000980:	2301      	movs	r3, #1
 8000982:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  HAL_Delay(500);
 8000986:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800098a:	f001 fadf 	bl	8001f4c <HAL_Delay>
  // Test Speed Change --> 500kbit/s
  ClearSLCAN();
 800098e:	f001 f8eb 	bl	8001b68 <ClearSLCAN>
  strcopy(SLCAN_CommandStringRx, (uint8_t *)"s6\r");
 8000992:	49aa      	ldr	r1, [pc, #680]	; (8000c3c <main+0x3b0>)
 8000994:	48a5      	ldr	r0, [pc, #660]	; (8000c2c <main+0x3a0>)
 8000996:	f000 fbd1 	bl	800113c <strcopy>
  if (SLCAN_Parse_Str(SLCAN_CommandStringRx, 3, &TxHeader, aData) != SLCAN_OK) {
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80009a2:	2103      	movs	r1, #3
 80009a4:	48a1      	ldr	r0, [pc, #644]	; (8000c2c <main+0x3a0>)
 80009a6:	f000 fcff 	bl	80013a8 <SLCAN_Parse_Str>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d002      	beq.n	80009b6 <main+0x12a>
	  TestResult = SLCAN_ERROR;
 80009b0:	2301      	movs	r3, #1
 80009b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  HAL_Delay(500);
 80009b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ba:	f001 fac7 	bl	8001f4c <HAL_Delay>
  // Test Mode Switch (Loopback + Silent(Listen) Mode)
  ClearSLCAN();
 80009be:	f001 f8d3 	bl	8001b68 <ClearSLCAN>
  strcopy(SLCAN_CommandStringRx, (uint8_t *)"L3\r");
 80009c2:	499f      	ldr	r1, [pc, #636]	; (8000c40 <main+0x3b4>)
 80009c4:	4899      	ldr	r0, [pc, #612]	; (8000c2c <main+0x3a0>)
 80009c6:	f000 fbb9 	bl	800113c <strcopy>
  if (SLCAN_Parse_Str(SLCAN_CommandStringRx, 3, &TxHeader, aData) != SLCAN_OK) {
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80009d2:	2103      	movs	r1, #3
 80009d4:	4895      	ldr	r0, [pc, #596]	; (8000c2c <main+0x3a0>)
 80009d6:	f000 fce7 	bl	80013a8 <SLCAN_Parse_Str>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d002      	beq.n	80009e6 <main+0x15a>
	  TestResult = SLCAN_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  HAL_Delay(500);
 80009e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ea:	f001 faaf 	bl	8001f4c <HAL_Delay>
  // Test Opening Connection
  ClearSLCAN();
 80009ee:	f001 f8bb 	bl	8001b68 <ClearSLCAN>
  strcopy(SLCAN_CommandStringRx, (uint8_t *)"O\r");
 80009f2:	4994      	ldr	r1, [pc, #592]	; (8000c44 <main+0x3b8>)
 80009f4:	488d      	ldr	r0, [pc, #564]	; (8000c2c <main+0x3a0>)
 80009f6:	f000 fba1 	bl	800113c <strcopy>
  if (SLCAN_Parse_Str(SLCAN_CommandStringRx, 2, &TxHeader, aData) != SLCAN_OK) {
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000a02:	2102      	movs	r1, #2
 8000a04:	4889      	ldr	r0, [pc, #548]	; (8000c2c <main+0x3a0>)
 8000a06:	f000 fccf 	bl	80013a8 <SLCAN_Parse_Str>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d002      	beq.n	8000a16 <main+0x18a>
	  TestResult = SLCAN_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  HAL_Delay(500);
 8000a16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a1a:	f001 fa97 	bl	8001f4c <HAL_Delay>
  // Test Transmit
  ClearSLCAN();
 8000a1e:	f001 f8a3 	bl	8001b68 <ClearSLCAN>
  strcopy(SLCAN_CommandStringRx, (uint8_t *)"T1122334481122334455667788EA5F\r");
 8000a22:	4989      	ldr	r1, [pc, #548]	; (8000c48 <main+0x3bc>)
 8000a24:	4881      	ldr	r0, [pc, #516]	; (8000c2c <main+0x3a0>)
 8000a26:	f000 fb89 	bl	800113c <strcopy>
  if (SLCAN_Parse_Str(SLCAN_CommandStringRx, SLCAN_MTU, &TxHeader, aData) != SLCAN_OK) {
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000a32:	211e      	movs	r1, #30
 8000a34:	487d      	ldr	r0, [pc, #500]	; (8000c2c <main+0x3a0>)
 8000a36:	f000 fcb7 	bl	80013a8 <SLCAN_Parse_Str>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d003      	beq.n	8000a48 <main+0x1bc>
	  TestResult = SLCAN_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000a46:	e00d      	b.n	8000a64 <main+0x1d8>
  }
  else if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, aData, &Tx_Mailbox) != HAL_OK) {
 8000a48:	463b      	mov	r3, r7
 8000a4a:	f107 0208 	add.w	r2, r7, #8
 8000a4e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000a52:	487e      	ldr	r0, [pc, #504]	; (8000c4c <main+0x3c0>)
 8000a54:	f001 fd09 	bl	800246a <HAL_CAN_AddTxMessage>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d002      	beq.n	8000a64 <main+0x1d8>
  					  TestResult = SLCAN_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }

  HAL_Delay(500);
 8000a64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a68:	f001 fa70 	bl	8001f4c <HAL_Delay>
  ClearSLCAN();
 8000a6c:	f001 f87c 	bl	8001b68 <ClearSLCAN>
  strcopy(SLCAN_CommandStringRx, (uint8_t *)"t12381122334455667788EA5F\r");
 8000a70:	4977      	ldr	r1, [pc, #476]	; (8000c50 <main+0x3c4>)
 8000a72:	486e      	ldr	r0, [pc, #440]	; (8000c2c <main+0x3a0>)
 8000a74:	f000 fb62 	bl	800113c <strcopy>
  if (SLCAN_Parse_Str(SLCAN_CommandStringRx, SLCAN_MTU, &TxHeader, aData) != SLCAN_OK) {
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000a80:	211e      	movs	r1, #30
 8000a82:	486a      	ldr	r0, [pc, #424]	; (8000c2c <main+0x3a0>)
 8000a84:	f000 fc90 	bl	80013a8 <SLCAN_Parse_Str>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <main+0x20a>
	  TestResult = SLCAN_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000a94:	e00d      	b.n	8000ab2 <main+0x226>
  }
  else if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, aData, &Tx_Mailbox) != HAL_OK) {
 8000a96:	463b      	mov	r3, r7
 8000a98:	f107 0208 	add.w	r2, r7, #8
 8000a9c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000aa0:	486a      	ldr	r0, [pc, #424]	; (8000c4c <main+0x3c0>)
 8000aa2:	f001 fce2 	bl	800246a <HAL_CAN_AddTxMessage>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d002      	beq.n	8000ab2 <main+0x226>
  					  TestResult = SLCAN_ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  HAL_Delay(500);
 8000ab2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab6:	f001 fa49 	bl	8001f4c <HAL_Delay>
  // Test Receive (No Timestamps) <Should be messages available from Test Mode + Transmit Tests>
  while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 8000aba:	e025      	b.n	8000b08 <main+0x27c>
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, aData) == HAL_OK) {
 8000abc:	f107 0308 	add.w	r3, r7, #8
 8000ac0:	f107 0210 	add.w	r2, r7, #16
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4861      	ldr	r0, [pc, #388]	; (8000c4c <main+0x3c0>)
 8000ac8:	f001 fdaa 	bl	8002620 <HAL_CAN_GetRxMessage>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d11a      	bne.n	8000b08 <main+0x27c>
		if (SLCAN_Parse_Frame(&RxHeader, aData, SLCAN_CommandStringRx, &Len) == SLCAN_OK) {
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	f107 0108 	add.w	r1, r7, #8
 8000ad8:	f107 0010 	add.w	r0, r7, #16
 8000adc:	4a53      	ldr	r2, [pc, #332]	; (8000c2c <main+0x3a0>)
 8000ade:	f000 fb5b 	bl	8001198 <SLCAN_Parse_Frame>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d10c      	bne.n	8000b02 <main+0x276>
			if (CDC_Transmit_FS(SLCAN_CommandStringRx, Len) == HAL_OK) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	4619      	mov	r1, r3
 8000aee:	484f      	ldr	r0, [pc, #316]	; (8000c2c <main+0x3a0>)
 8000af0:	f008 f80a 	bl	8008b08 <CDC_Transmit_FS>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d006      	beq.n	8000b08 <main+0x27c>
				;
			}
			else {
				TestResult = SLCAN_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000b00:	e002      	b.n	8000b08 <main+0x27c>
			}
		}
		else {
			TestResult = SLCAN_ERROR; 	// This means the HAL_CAN_GetRxMessage call failed - which would be weird
 8000b02:	2301      	movs	r3, #1
 8000b04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4850      	ldr	r0, [pc, #320]	; (8000c4c <main+0x3c0>)
 8000b0c:	f001 fe9a 	bl	8002844 <HAL_CAN_GetRxFifoFillLevel>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d1d2      	bne.n	8000abc <main+0x230>
		}
	}
  }
  // Test Timestamps
  HAL_Delay(500);
 8000b16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b1a:	f001 fa17 	bl	8001f4c <HAL_Delay>
  ClearSLCAN();
 8000b1e:	f001 f823 	bl	8001b68 <ClearSLCAN>
  strcopy(SLCAN_CommandStringRx, (uint8_t *)"Z\r");
 8000b22:	494c      	ldr	r1, [pc, #304]	; (8000c54 <main+0x3c8>)
 8000b24:	4841      	ldr	r0, [pc, #260]	; (8000c2c <main+0x3a0>)
 8000b26:	f000 fb09 	bl	800113c <strcopy>
  if (SLCAN_Parse_Str(SLCAN_CommandStringRx, 2, &TxHeader, aData) != SLCAN_OK) {
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000b32:	2102      	movs	r1, #2
 8000b34:	483d      	ldr	r0, [pc, #244]	; (8000c2c <main+0x3a0>)
 8000b36:	f000 fc37 	bl	80013a8 <SLCAN_Parse_Str>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d002      	beq.n	8000b46 <main+0x2ba>
	  TestResult = SLCAN_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  HAL_Delay(500);
 8000b46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b4a:	f001 f9ff 	bl	8001f4c <HAL_Delay>
  ClearSLCAN();
 8000b4e:	f001 f80b 	bl	8001b68 <ClearSLCAN>
  strcopy(SLCAN_CommandStringRx, (uint8_t *)"Z0\r");
 8000b52:	4941      	ldr	r1, [pc, #260]	; (8000c58 <main+0x3cc>)
 8000b54:	4835      	ldr	r0, [pc, #212]	; (8000c2c <main+0x3a0>)
 8000b56:	f000 faf1 	bl	800113c <strcopy>
  if (SLCAN_Parse_Str(SLCAN_CommandStringRx, 3, &TxHeader, aData) != SLCAN_OK) {
 8000b5a:	f107 0308 	add.w	r3, r7, #8
 8000b5e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000b62:	2103      	movs	r1, #3
 8000b64:	4831      	ldr	r0, [pc, #196]	; (8000c2c <main+0x3a0>)
 8000b66:	f000 fc1f 	bl	80013a8 <SLCAN_Parse_Str>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d002      	beq.n	8000b76 <main+0x2ea>
	  TestResult = SLCAN_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  HAL_Delay(500);
 8000b76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b7a:	f001 f9e7 	bl	8001f4c <HAL_Delay>
  ClearSLCAN();
 8000b7e:	f000 fff3 	bl	8001b68 <ClearSLCAN>
  strcopy(SLCAN_CommandStringRx, (uint8_t *)"Z1\r");
 8000b82:	4936      	ldr	r1, [pc, #216]	; (8000c5c <main+0x3d0>)
 8000b84:	4829      	ldr	r0, [pc, #164]	; (8000c2c <main+0x3a0>)
 8000b86:	f000 fad9 	bl	800113c <strcopy>
  if (SLCAN_Parse_Str(SLCAN_CommandStringRx, 3, &TxHeader, aData) != SLCAN_OK) {
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000b92:	2103      	movs	r1, #3
 8000b94:	4825      	ldr	r0, [pc, #148]	; (8000c2c <main+0x3a0>)
 8000b96:	f000 fc07 	bl	80013a8 <SLCAN_Parse_Str>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d002      	beq.n	8000ba6 <main+0x31a>
	  TestResult = SLCAN_ERROR;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  HAL_Delay(500);
 8000ba6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000baa:	f001 f9cf 	bl	8001f4c <HAL_Delay>
  // Test Transmit (Again, to test Timestamps)
  ClearSLCAN();
 8000bae:	f000 ffdb 	bl	8001b68 <ClearSLCAN>
  strcopy(SLCAN_CommandStringRx, (uint8_t *)"T1122334481122334455667788EA5F\r");
 8000bb2:	4925      	ldr	r1, [pc, #148]	; (8000c48 <main+0x3bc>)
 8000bb4:	481d      	ldr	r0, [pc, #116]	; (8000c2c <main+0x3a0>)
 8000bb6:	f000 fac1 	bl	800113c <strcopy>
  if (SLCAN_Parse_Str(SLCAN_CommandStringRx, SLCAN_MTU, &TxHeader, aData) != SLCAN_OK) {
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000bc2:	211e      	movs	r1, #30
 8000bc4:	4819      	ldr	r0, [pc, #100]	; (8000c2c <main+0x3a0>)
 8000bc6:	f000 fbef 	bl	80013a8 <SLCAN_Parse_Str>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d003      	beq.n	8000bd8 <main+0x34c>
	  TestResult = SLCAN_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000bd6:	e00d      	b.n	8000bf4 <main+0x368>
  }
  else if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, aData, &Tx_Mailbox) != HAL_OK) {
 8000bd8:	463b      	mov	r3, r7
 8000bda:	f107 0208 	add.w	r2, r7, #8
 8000bde:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000be2:	481a      	ldr	r0, [pc, #104]	; (8000c4c <main+0x3c0>)
 8000be4:	f001 fc41 	bl	800246a <HAL_CAN_AddTxMessage>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <main+0x368>
  					  TestResult = SLCAN_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }

  HAL_Delay(500);
 8000bf4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bf8:	f001 f9a8 	bl	8001f4c <HAL_Delay>
  ClearSLCAN();
 8000bfc:	f000 ffb4 	bl	8001b68 <ClearSLCAN>
  strcopy(SLCAN_CommandStringRx, (uint8_t *)"t12381122334455667788EA5F\r");
 8000c00:	4913      	ldr	r1, [pc, #76]	; (8000c50 <main+0x3c4>)
 8000c02:	480a      	ldr	r0, [pc, #40]	; (8000c2c <main+0x3a0>)
 8000c04:	f000 fa9a 	bl	800113c <strcopy>
  if (SLCAN_Parse_Str(SLCAN_CommandStringRx, SLCAN_MTU, &TxHeader, aData) != SLCAN_OK) {
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000c10:	211e      	movs	r1, #30
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <main+0x3a0>)
 8000c14:	f000 fbc8 	bl	80013a8 <SLCAN_Parse_Str>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d020      	beq.n	8000c60 <main+0x3d4>
	  TestResult = SLCAN_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000c24:	e02a      	b.n	8000c7c <main+0x3f0>
 8000c26:	bf00      	nop
 8000c28:	08009678 	.word	0x08009678
 8000c2c:	20000300 	.word	0x20000300
 8000c30:	08009684 	.word	0x08009684
 8000c34:	0800968c 	.word	0x0800968c
 8000c38:	08009694 	.word	0x08009694
 8000c3c:	08009698 	.word	0x08009698
 8000c40:	0800969c 	.word	0x0800969c
 8000c44:	080096a0 	.word	0x080096a0
 8000c48:	080096a4 	.word	0x080096a4
 8000c4c:	200002d8 	.word	0x200002d8
 8000c50:	080096c4 	.word	0x080096c4
 8000c54:	080096e0 	.word	0x080096e0
 8000c58:	080096e4 	.word	0x080096e4
 8000c5c:	080096e8 	.word	0x080096e8
  }
  else if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, aData, &Tx_Mailbox) != HAL_OK) {
 8000c60:	463b      	mov	r3, r7
 8000c62:	f107 0208 	add.w	r2, r7, #8
 8000c66:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000c6a:	4862      	ldr	r0, [pc, #392]	; (8000df4 <main+0x568>)
 8000c6c:	f001 fbfd 	bl	800246a <HAL_CAN_AddTxMessage>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d002      	beq.n	8000c7c <main+0x3f0>
  					  TestResult = SLCAN_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  HAL_Delay(500);
 8000c7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c80:	f001 f964 	bl	8001f4c <HAL_Delay>
  // Test Receive (Timestamps)
  while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 8000c84:	e025      	b.n	8000cd2 <main+0x446>
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, aData) == HAL_OK) {
 8000c86:	f107 0308 	add.w	r3, r7, #8
 8000c8a:	f107 0210 	add.w	r2, r7, #16
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4858      	ldr	r0, [pc, #352]	; (8000df4 <main+0x568>)
 8000c92:	f001 fcc5 	bl	8002620 <HAL_CAN_GetRxMessage>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d11a      	bne.n	8000cd2 <main+0x446>
		if (SLCAN_Parse_Frame(&RxHeader, aData, SLCAN_CommandStringRx, &Len) == SLCAN_OK) {
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	f107 0108 	add.w	r1, r7, #8
 8000ca2:	f107 0010 	add.w	r0, r7, #16
 8000ca6:	4a54      	ldr	r2, [pc, #336]	; (8000df8 <main+0x56c>)
 8000ca8:	f000 fa76 	bl	8001198 <SLCAN_Parse_Frame>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10c      	bne.n	8000ccc <main+0x440>
			if (CDC_Transmit_FS(SLCAN_CommandStringRx, Len) == HAL_OK) {
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	484f      	ldr	r0, [pc, #316]	; (8000df8 <main+0x56c>)
 8000cba:	f007 ff25 	bl	8008b08 <CDC_Transmit_FS>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d006      	beq.n	8000cd2 <main+0x446>
				;
			}
			else {
				TestResult = SLCAN_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000cca:	e002      	b.n	8000cd2 <main+0x446>
			}
		}
		else {
			TestResult = SLCAN_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4847      	ldr	r0, [pc, #284]	; (8000df4 <main+0x568>)
 8000cd6:	f001 fdb5 	bl	8002844 <HAL_CAN_GetRxFifoFillLevel>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1d2      	bne.n	8000c86 <main+0x3fa>
		}
	}
  }
  HAL_Delay(500);
 8000ce0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce4:	f001 f932 	bl	8001f4c <HAL_Delay>
  // Test Closing Connection
  ClearSLCAN();
 8000ce8:	f000 ff3e 	bl	8001b68 <ClearSLCAN>
  strcopy(SLCAN_CommandStringRx, (uint8_t *)"C\r");
 8000cec:	4943      	ldr	r1, [pc, #268]	; (8000dfc <main+0x570>)
 8000cee:	4842      	ldr	r0, [pc, #264]	; (8000df8 <main+0x56c>)
 8000cf0:	f000 fa24 	bl	800113c <strcopy>
  if (SLCAN_Parse_Str(SLCAN_CommandStringRx, 2, &TxHeader, aData) != SLCAN_OK) {
 8000cf4:	f107 0308 	add.w	r3, r7, #8
 8000cf8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000cfc:	2102      	movs	r1, #2
 8000cfe:	483e      	ldr	r0, [pc, #248]	; (8000df8 <main+0x56c>)
 8000d00:	f000 fb52 	bl	80013a8 <SLCAN_Parse_Str>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d002      	beq.n	8000d10 <main+0x484>
	  TestResult = SLCAN_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  HAL_Delay(500);
 8000d10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d14:	f001 f91a 	bl	8001f4c <HAL_Delay>
  // Test Mode Switch (Normal Mode)
  ClearSLCAN();
 8000d18:	f000 ff26 	bl	8001b68 <ClearSLCAN>
  strcopy(SLCAN_CommandStringRx, (uint8_t *)"L0\r");
 8000d1c:	4938      	ldr	r1, [pc, #224]	; (8000e00 <main+0x574>)
 8000d1e:	4836      	ldr	r0, [pc, #216]	; (8000df8 <main+0x56c>)
 8000d20:	f000 fa0c 	bl	800113c <strcopy>
  if (SLCAN_Parse_Str(SLCAN_CommandStringRx, 3, &TxHeader, aData) != SLCAN_OK) {
 8000d24:	f107 0308 	add.w	r3, r7, #8
 8000d28:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000d2c:	2103      	movs	r1, #3
 8000d2e:	4832      	ldr	r0, [pc, #200]	; (8000df8 <main+0x56c>)
 8000d30:	f000 fb3a 	bl	80013a8 <SLCAN_Parse_Str>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d002      	beq.n	8000d40 <main+0x4b4>
	  TestResult = SLCAN_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  HAL_Delay(500);
 8000d40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d44:	f001 f902 	bl	8001f4c <HAL_Delay>
  // Test Read Status Flags
  ClearSLCAN();
 8000d48:	f000 ff0e 	bl	8001b68 <ClearSLCAN>
  strcopy(SLCAN_CommandStringRx, (uint8_t *)"F\r");
 8000d4c:	492d      	ldr	r1, [pc, #180]	; (8000e04 <main+0x578>)
 8000d4e:	482a      	ldr	r0, [pc, #168]	; (8000df8 <main+0x56c>)
 8000d50:	f000 f9f4 	bl	800113c <strcopy>
  if (SLCAN_Parse_Str(SLCAN_CommandStringRx, 2, &TxHeader, aData) != SLCAN_OK) {
 8000d54:	f107 0308 	add.w	r3, r7, #8
 8000d58:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	4826      	ldr	r0, [pc, #152]	; (8000df8 <main+0x56c>)
 8000d60:	f000 fb22 	bl	80013a8 <SLCAN_Parse_Str>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d002      	beq.n	8000d70 <main+0x4e4>
	  TestResult = SLCAN_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  // END SLCAN TEST
  HAL_Delay(200);
 8000d70:	20c8      	movs	r0, #200	; 0xc8
 8000d72:	f001 f8eb 	bl	8001f4c <HAL_Delay>
  LED_Process();
 8000d76:	f7ff fd2b 	bl	80007d0 <LED_Process>
  if (TestResult != SLCAN_OK) {
 8000d7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d006      	beq.n	8000d90 <main+0x504>
	  LED_RedForceOn();
 8000d82:	f7ff fcaf 	bl	80006e4 <LED_RedForceOn>
	  HAL_Delay(5000);
 8000d86:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d8a:	f001 f8df 	bl	8001f4c <HAL_Delay>
 8000d8e:	e001      	b.n	8000d94 <main+0x508>
  }
  else {
	  LED_GreenOn();
 8000d90:	f7ff fcde 	bl	8000750 <LED_GreenOn>
  }
  HAL_Delay(500);
 8000d94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d98:	f001 f8d8 	bl	8001f4c <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	// Turn off LEDs that have been on long enough
	LED_Process();
 8000d9c:	f7ff fd18 	bl	80007d0 <LED_Process>

	// Parse and send (to USB) any received CAN frames
	if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 8000da0:	2100      	movs	r1, #0
 8000da2:	4814      	ldr	r0, [pc, #80]	; (8000df4 <main+0x568>)
 8000da4:	f001 fd4e 	bl	8002844 <HAL_CAN_GetRxFifoFillLevel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d0f6      	beq.n	8000d9c <main+0x510>
		if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, aData) == HAL_OK) {
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	f107 0210 	add.w	r2, r7, #16
 8000db6:	2100      	movs	r1, #0
 8000db8:	480e      	ldr	r0, [pc, #56]	; (8000df4 <main+0x568>)
 8000dba:	f001 fc31 	bl	8002620 <HAL_CAN_GetRxMessage>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d1eb      	bne.n	8000d9c <main+0x510>
			if (SLCAN_Parse_Frame(&RxHeader, aData, SLCAN_CommandStringRx, &Len) == SLCAN_OK) {
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	f107 0108 	add.w	r1, r7, #8
 8000dca:	f107 0010 	add.w	r0, r7, #16
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <main+0x56c>)
 8000dd0:	f000 f9e2 	bl	8001198 <SLCAN_Parse_Frame>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1e0      	bne.n	8000d9c <main+0x510>
				if (CDC_Transmit_FS(SLCAN_CommandStringRx, Len) == HAL_OK) {
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	4619      	mov	r1, r3
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <main+0x56c>)
 8000de2:	f007 fe91 	bl	8008b08 <CDC_Transmit_FS>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1d7      	bne.n	8000d9c <main+0x510>
					LED_GreenOn();
 8000dec:	f7ff fcb0 	bl	8000750 <LED_GreenOn>
	LED_Process();
 8000df0:	e7d4      	b.n	8000d9c <main+0x510>
 8000df2:	bf00      	nop
 8000df4:	200002d8 	.word	0x200002d8
 8000df8:	20000300 	.word	0x20000300
 8000dfc:	080096ec 	.word	0x080096ec
 8000e00:	080096f0 	.word	0x080096f0
 8000e04:	080096f4 	.word	0x080096f4

08000e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b0ac      	sub	sp, #176	; 0xb0
 8000e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e12:	2234      	movs	r2, #52	; 0x34
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f008 fb60 	bl	80094dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e1c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	225c      	movs	r2, #92	; 0x5c
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f008 fb51 	bl	80094dc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	4b35      	ldr	r3, [pc, #212]	; (8000f14 <SystemClock_Config+0x10c>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	4a34      	ldr	r2, [pc, #208]	; (8000f14 <SystemClock_Config+0x10c>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4a:	4b32      	ldr	r3, [pc, #200]	; (8000f14 <SystemClock_Config+0x10c>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <SystemClock_Config+0x110>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e62:	4a2d      	ldr	r2, [pc, #180]	; (8000f18 <SystemClock_Config+0x110>)
 8000e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e68:	6013      	str	r3, [r2, #0]
 8000e6a:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <SystemClock_Config+0x110>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e76:	2301      	movs	r3, #1
 8000e78:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e7a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e82:	2302      	movs	r3, #2
 8000e84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e90:	2304      	movs	r3, #4
 8000e92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000e96:	2360      	movs	r3, #96	; 0x60
 8000e98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f003 ff86 	bl	8004dc4 <HAL_RCC_OscConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000ebe:	f000 f963 	bl	8001188 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec2:	230f      	movs	r3, #15
 8000ec4:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ed8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000edc:	2101      	movs	r1, #1
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f003 f98c 	bl	80041fc <HAL_RCC_ClockConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000eea:	f000 f94d 	bl	8001188 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	4618      	mov	r0, r3
 8000efe:	f003 fa97 	bl	8004430 <HAL_RCCEx_PeriphCLKConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <SystemClock_Config+0x104>
  {
    Error_Handler();
 8000f08:	f000 f93e 	bl	8001188 <Error_Handler>
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	37b0      	adds	r7, #176	; 0xb0
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40007000 	.word	0x40007000

08000f1c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f20:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <MX_CAN1_Init+0x68>)
 8000f22:	4a19      	ldr	r2, [pc, #100]	; (8000f88 <MX_CAN1_Init+0x6c>)
 8000f24:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 24;
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <MX_CAN1_Init+0x68>)
 8000f28:	2218      	movs	r2, #24
 8000f2a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000f2c:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <MX_CAN1_Init+0x68>)
 8000f2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f32:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <MX_CAN1_Init+0x68>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <MX_CAN1_Init+0x68>)
 8000f3c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f40:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <MX_CAN1_Init+0x68>)
 8000f44:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f48:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_CAN1_Init+0x68>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_CAN1_Init+0x68>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <MX_CAN1_Init+0x68>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_CAN1_Init+0x68>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <MX_CAN1_Init+0x68>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_CAN1_Init+0x68>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_CAN1_Init+0x68>)
 8000f70:	f001 f80e 	bl	8001f90 <HAL_CAN_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000f7a:	f000 f905 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200002d8 	.word	0x200002d8
 8000f88:	40006400 	.word	0x40006400

08000f8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_USART3_UART_Init+0x4c>)
 8000f92:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <MX_USART3_UART_Init+0x50>)
 8000f94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <MX_USART3_UART_Init+0x4c>)
 8000f98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_USART3_UART_Init+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_USART3_UART_Init+0x4c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <MX_USART3_UART_Init+0x4c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_USART3_UART_Init+0x4c>)
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <MX_USART3_UART_Init+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_USART3_UART_Init+0x4c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_USART3_UART_Init+0x4c>)
 8000fc4:	f004 f958 	bl	8005278 <HAL_UART_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fce:	f000 f8db 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000298 	.word	0x20000298
 8000fdc:	40004800 	.word	0x40004800

08000fe0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08c      	sub	sp, #48	; 0x30
 8000fe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
 8000ffa:	4b4b      	ldr	r3, [pc, #300]	; (8001128 <MX_GPIO_Init+0x148>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a4a      	ldr	r2, [pc, #296]	; (8001128 <MX_GPIO_Init+0x148>)
 8001000:	f043 0304 	orr.w	r3, r3, #4
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b48      	ldr	r3, [pc, #288]	; (8001128 <MX_GPIO_Init+0x148>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	61bb      	str	r3, [r7, #24]
 8001010:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	4b44      	ldr	r3, [pc, #272]	; (8001128 <MX_GPIO_Init+0x148>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a43      	ldr	r2, [pc, #268]	; (8001128 <MX_GPIO_Init+0x148>)
 800101c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b41      	ldr	r3, [pc, #260]	; (8001128 <MX_GPIO_Init+0x148>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4b3d      	ldr	r3, [pc, #244]	; (8001128 <MX_GPIO_Init+0x148>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a3c      	ldr	r2, [pc, #240]	; (8001128 <MX_GPIO_Init+0x148>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b3a      	ldr	r3, [pc, #232]	; (8001128 <MX_GPIO_Init+0x148>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b36      	ldr	r3, [pc, #216]	; (8001128 <MX_GPIO_Init+0x148>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a35      	ldr	r2, [pc, #212]	; (8001128 <MX_GPIO_Init+0x148>)
 8001054:	f043 0308 	orr.w	r3, r3, #8
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b33      	ldr	r3, [pc, #204]	; (8001128 <MX_GPIO_Init+0x148>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0308 	and.w	r3, r3, #8
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	4b2f      	ldr	r3, [pc, #188]	; (8001128 <MX_GPIO_Init+0x148>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a2e      	ldr	r2, [pc, #184]	; (8001128 <MX_GPIO_Init+0x148>)
 8001070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <MX_GPIO_Init+0x148>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b28      	ldr	r3, [pc, #160]	; (8001128 <MX_GPIO_Init+0x148>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a27      	ldr	r2, [pc, #156]	; (8001128 <MX_GPIO_Init+0x148>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <MX_GPIO_Init+0x148>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	f244 0181 	movw	r1, #16513	; 0x4081
 80010a4:	4821      	ldr	r0, [pc, #132]	; (800112c <MX_GPIO_Init+0x14c>)
 80010a6:	f001 fec1 	bl	8002e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2140      	movs	r1, #64	; 0x40
 80010ae:	4820      	ldr	r0, [pc, #128]	; (8001130 <MX_GPIO_Init+0x150>)
 80010b0:	f001 febc 	bl	8002e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ba:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <MX_GPIO_Init+0x154>)
 80010bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	481b      	ldr	r0, [pc, #108]	; (8001138 <MX_GPIO_Init+0x158>)
 80010ca:	f001 fd1d 	bl	8002b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80010ce:	f244 0381 	movw	r3, #16513	; 0x4081
 80010d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2300      	movs	r3, #0
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	4619      	mov	r1, r3
 80010e6:	4811      	ldr	r0, [pc, #68]	; (800112c <MX_GPIO_Init+0x14c>)
 80010e8:	f001 fd0e 	bl	8002b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010ec:	2340      	movs	r3, #64	; 0x40
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	480b      	ldr	r0, [pc, #44]	; (8001130 <MX_GPIO_Init+0x150>)
 8001104:	f001 fd00 	bl	8002b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_GPIO_Init+0x150>)
 800111c:	f001 fcf4 	bl	8002b08 <HAL_GPIO_Init>

}
 8001120:	bf00      	nop
 8001122:	3730      	adds	r7, #48	; 0x30
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800
 800112c:	40020400 	.word	0x40020400
 8001130:	40021800 	.word	0x40021800
 8001134:	10110000 	.word	0x10110000
 8001138:	40020800 	.word	0x40020800

0800113c <strcopy>:

/* USER CODE BEGIN 4 */

// Copy string1 <-- string2
void strcopy(uint8_t *string1, uint8_t *string2){
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
	int i = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
	for (i = 0; string2[i] != '\0'; ++i) {
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	e00a      	b.n	8001166 <strcopy+0x2a>
		string1[i] = string2[i];
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	441a      	add	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6879      	ldr	r1, [r7, #4]
 800115a:	440b      	add	r3, r1
 800115c:	7812      	ldrb	r2, [r2, #0]
 800115e:	701a      	strb	r2, [r3, #0]
	for (i = 0; string2[i] != '\0'; ++i) {
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3301      	adds	r3, #1
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	4413      	add	r3, r2
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1ee      	bne.n	8001150 <strcopy+0x14>
	}
 	string1[i] = '\0';
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <SLCAN_Parse_Frame>:
uint32_t SLCAN_CurrentFilterMask = 0;				// 32bit 'Left Aligned' Filter currently assigned to Bank 0 of CAN peripheral
uint8_t SLCAN_CommandStringRx[SLCAN_MTU];			// Holder for outgoing SLCAN Data (i.e. filled on CAN receive) Used in main
uint8_t SLCAN_CommandStringTx[SLCAN_MTU];			// Holder for incoming SLCAN Data (i.e. filled on CAN transmit) Used in USB

// Parse a CAN Frame -> SLCAN String. Return size of string into Len.
SLCAN_StatusTypeDef SLCAN_Parse_Frame(CAN_RxHeaderTypeDef *pHeader, uint8_t aData[], uint8_t *Buffer, uint32_t *Len){
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	603b      	str	r3, [r7, #0]
    uint8_t BufferIndex = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t ID;

    uint8_t counter;

    // Clear any data in string buffer
    for (counter = 0; counter < SLCAN_MTU; counter++) {
 80011ac:	2300      	movs	r3, #0
 80011ae:	77fb      	strb	r3, [r7, #31]
 80011b0:	e007      	b.n	80011c2 <SLCAN_Parse_Frame+0x2a>
        Buffer[counter] = '\0';
 80011b2:	7ffb      	ldrb	r3, [r7, #31]
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	4413      	add	r3, r2
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
    for (counter = 0; counter < SLCAN_MTU; counter++) {
 80011bc:	7ffb      	ldrb	r3, [r7, #31]
 80011be:	3301      	adds	r3, #1
 80011c0:	77fb      	strb	r3, [r7, #31]
 80011c2:	7ffb      	ldrb	r3, [r7, #31]
 80011c4:	2b1d      	cmp	r3, #29
 80011c6:	d9f4      	bls.n	80011b2 <SLCAN_Parse_Frame+0x1a>
    }

    // *** Add Frame Type ***
    if (pHeader->RTR == CAN_RTR_DATA) {
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d106      	bne.n	80011de <SLCAN_Parse_Frame+0x46>
        Buffer[BufferIndex] = 't';
 80011d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	4413      	add	r3, r2
 80011d8:	2274      	movs	r2, #116	; 0x74
 80011da:	701a      	strb	r2, [r3, #0]
 80011dc:	e00c      	b.n	80011f8 <SLCAN_Parse_Frame+0x60>
    }
    else if (pHeader->RTR == CAN_RTR_REMOTE) {
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d106      	bne.n	80011f4 <SLCAN_Parse_Frame+0x5c>
        Buffer[BufferIndex] = 'r';
 80011e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	2272      	movs	r2, #114	; 0x72
 80011f0:	701a      	strb	r2, [r3, #0]
 80011f2:	e001      	b.n	80011f8 <SLCAN_Parse_Frame+0x60>
    }
    else {
        // How did we get here?
        return SLCAN_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e0d0      	b.n	800139a <SLCAN_Parse_Frame+0x202>
    }

    // If Extended Frame, convert frame type character to uppercase and note the length of an Extended ID (8 Hex digits)...
    if (pHeader->IDE == CAN_ID_EXT) {
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d112      	bne.n	8001226 <SLCAN_Parse_Frame+0x8e>
        Buffer[BufferIndex] -= 32;
 8001200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	4413      	add	r3, r2
 8001208:	781a      	ldrb	r2, [r3, #0]
 800120a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	440b      	add	r3, r1
 8001212:	3a20      	subs	r2, #32
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	701a      	strb	r2, [r3, #0]
        IdLen = SLCAN_EXT_ID_LEN;
 8001218:	2308      	movs	r3, #8
 800121a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        ID = pHeader->ExtId;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	623b      	str	r3, [r7, #32]
 8001224:	e005      	b.n	8001232 <SLCAN_Parse_Frame+0x9a>
    }
    // ...Otherwise, note the length of a Standard ID (3 Hex digits)
    else {
        IdLen = SLCAN_STD_ID_LEN;
 8001226:	2303      	movs	r3, #3
 8001228:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        ID = pHeader->StdId;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	623b      	str	r3, [r7, #32]
    }

    BufferIndex++;
 8001232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001236:	3301      	adds	r3, #1
 8001238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // *** Add Identifier ***
    // Note: ID variable is invalid after this step
    for(counter=IdLen; counter > 0; counter--) {
 800123c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001240:	77fb      	strb	r3, [r7, #31]
 8001242:	e013      	b.n	800126c <SLCAN_Parse_Frame+0xd4>
        // Add ID to Buffer[1:IdLen] inclusive by adding one nybble at a time, 'Right' to 'Left'
        Buffer[counter] = (ID & 0xF);	// Match Rightmost 4 Bits of ID, assign to 'Right' of the Buffer
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	7ffb      	ldrb	r3, [r7, #31]
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	440b      	add	r3, r1
 800124e:	f002 020f 	and.w	r2, r2, #15
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	701a      	strb	r2, [r3, #0]
        ID >>= 4;
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	623b      	str	r3, [r7, #32]
        BufferIndex++;
 800125c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001260:	3301      	adds	r3, #1
 8001262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(counter=IdLen; counter > 0; counter--) {
 8001266:	7ffb      	ldrb	r3, [r7, #31]
 8001268:	3b01      	subs	r3, #1
 800126a:	77fb      	strb	r3, [r7, #31]
 800126c:	7ffb      	ldrb	r3, [r7, #31]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1e8      	bne.n	8001244 <SLCAN_Parse_Frame+0xac>
    }

    // *** Add DLC to Buffer ***
    Buffer[BufferIndex++] = pHeader->DLC;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800127a:	1c59      	adds	r1, r3, #1
 800127c:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 8001280:	4619      	mov	r1, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	440b      	add	r3, r1
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	701a      	strb	r2, [r3, #0]

    // *** Add data bytes Buffer, one nybble at a time ***
    for (counter = 0; counter < pHeader->DLC; counter++) {
 800128a:	2300      	movs	r3, #0
 800128c:	77fb      	strb	r3, [r7, #31]
 800128e:	e021      	b.n	80012d4 <SLCAN_Parse_Frame+0x13c>
        Buffer[BufferIndex++] = (aData[counter] >> 4);		// Top 4 Bits
 8001290:	7ffb      	ldrb	r3, [r7, #31]
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	4413      	add	r3, r2
 8001296:	781a      	ldrb	r2, [r3, #0]
 8001298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800129c:	1c59      	adds	r1, r3, #1
 800129e:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 80012a2:	4619      	mov	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	440b      	add	r3, r1
 80012a8:	0912      	lsrs	r2, r2, #4
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	701a      	strb	r2, [r3, #0]
        Buffer[BufferIndex++] = (aData[counter] & 0x0F);	// Bottom 4 Bits
 80012ae:	7ffb      	ldrb	r3, [r7, #31]
 80012b0:	68ba      	ldr	r2, [r7, #8]
 80012b2:	4413      	add	r3, r2
 80012b4:	781a      	ldrb	r2, [r3, #0]
 80012b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012ba:	1c59      	adds	r1, r3, #1
 80012bc:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 80012c0:	4619      	mov	r1, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	440b      	add	r3, r1
 80012c6:	f002 020f 	and.w	r2, r2, #15
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	701a      	strb	r2, [r3, #0]
    for (counter = 0; counter < pHeader->DLC; counter++) {
 80012ce:	7ffb      	ldrb	r3, [r7, #31]
 80012d0:	3301      	adds	r3, #1
 80012d2:	77fb      	strb	r3, [r7, #31]
 80012d4:	7ffa      	ldrb	r2, [r7, #31]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d3d8      	bcc.n	8001290 <SLCAN_Parse_Frame+0xf8>
    }

    // *** Add Timestamp if requested ***
    if (SetTimestamp) {
 80012de:	4b31      	ldr	r3, [pc, #196]	; (80013a4 <SLCAN_Parse_Frame+0x20c>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d022      	beq.n	800132c <SLCAN_Parse_Frame+0x194>
        uint32_t Timestamp;
        uint8_t BufferIndexFreeze = BufferIndex;
 80012e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012ea:	75fb      	strb	r3, [r7, #23]
    	Timestamp = pHeader->Timestamp;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	61bb      	str	r3, [r7, #24]
    	for (counter = 4; counter > 0; counter--) {
 80012f2:	2304      	movs	r3, #4
 80012f4:	77fb      	strb	r3, [r7, #31]
 80012f6:	e016      	b.n	8001326 <SLCAN_Parse_Frame+0x18e>
    		Buffer[BufferIndexFreeze + counter - 1] = (Timestamp & 0x0F);
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	7df9      	ldrb	r1, [r7, #23]
 80012fe:	7ffb      	ldrb	r3, [r7, #31]
 8001300:	440b      	add	r3, r1
 8001302:	3b01      	subs	r3, #1
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	440b      	add	r3, r1
 8001308:	f002 020f 	and.w	r2, r2, #15
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	701a      	strb	r2, [r3, #0]
    		Timestamp >>= 4;
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
    		BufferIndex++;
 8001316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800131a:	3301      	adds	r3, #1
 800131c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    	for (counter = 4; counter > 0; counter--) {
 8001320:	7ffb      	ldrb	r3, [r7, #31]
 8001322:	3b01      	subs	r3, #1
 8001324:	77fb      	strb	r3, [r7, #31]
 8001326:	7ffb      	ldrb	r3, [r7, #31]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1e5      	bne.n	80012f8 <SLCAN_Parse_Frame+0x160>
    	}
    }


    // *** Convert to ASCII (2nd character to end) ****
    for (counter = 1; counter < BufferIndex; counter++) {
 800132c:	2301      	movs	r3, #1
 800132e:	77fb      	strb	r3, [r7, #31]
 8001330:	e01d      	b.n	800136e <SLCAN_Parse_Frame+0x1d6>
        if (Buffer[counter] < 0xA) {
 8001332:	7ffb      	ldrb	r3, [r7, #31]
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	4413      	add	r3, r2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b09      	cmp	r3, #9
 800133c:	d80a      	bhi.n	8001354 <SLCAN_Parse_Frame+0x1bc>
            Buffer[counter] += 0x30;	// ASCII Digit
 800133e:	7ffb      	ldrb	r3, [r7, #31]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	4413      	add	r3, r2
 8001344:	781a      	ldrb	r2, [r3, #0]
 8001346:	7ffb      	ldrb	r3, [r7, #31]
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	440b      	add	r3, r1
 800134c:	3230      	adds	r2, #48	; 0x30
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	701a      	strb	r2, [r3, #0]
 8001352:	e009      	b.n	8001368 <SLCAN_Parse_Frame+0x1d0>
        } else {
            Buffer[counter] += 0x37; 	// ASCII Uppercase Character
 8001354:	7ffb      	ldrb	r3, [r7, #31]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	781a      	ldrb	r2, [r3, #0]
 800135c:	7ffb      	ldrb	r3, [r7, #31]
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	440b      	add	r3, r1
 8001362:	3237      	adds	r2, #55	; 0x37
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	701a      	strb	r2, [r3, #0]
    for (counter = 1; counter < BufferIndex; counter++) {
 8001368:	7ffb      	ldrb	r3, [r7, #31]
 800136a:	3301      	adds	r3, #1
 800136c:	77fb      	strb	r3, [r7, #31]
 800136e:	7ffa      	ldrb	r2, [r7, #31]
 8001370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001374:	429a      	cmp	r2, r3
 8001376:	d3dc      	bcc.n	8001332 <SLCAN_Parse_Frame+0x19a>
        }
    }

    // *** Add Carriage Return (SCLAN EOL) ***
    Buffer[BufferIndex++] = '\r';
 8001378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001382:	461a      	mov	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4413      	add	r3, r2
 8001388:	220d      	movs	r2, #13
 800138a:	701a      	strb	r2, [r3, #0]

    // *** Put length of string in Len ***
    *Len = BufferIndex;
 800138c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	601a      	str	r2, [r3, #0]

    LED_BlueOn();
 8001394:	f7ff f9fc 	bl	8000790 <LED_BlueOn>
    return SLCAN_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3728      	adds	r7, #40	; 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000027c 	.word	0x2000027c

080013a8 <SLCAN_Parse_Str>:

// Commands which require a response automatically send that response over USB
// TODO Make it so that responses are buffered, so any serial peripheral can be used
SLCAN_StatusTypeDef SLCAN_Parse_Str(uint8_t *Buffer, uint32_t Len, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[]) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	603b      	str	r3, [r7, #0]
    uint8_t BufferIndex = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	77fb      	strb	r3, [r7, #31]

	uint8_t counter;

    // Convert from ASCII (2nd character to end)
    for (BufferIndex = 1; BufferIndex < Len - 1; BufferIndex++) {
 80013ba:	2301      	movs	r3, #1
 80013bc:	77fb      	strb	r3, [r7, #31]
 80013be:	e02e      	b.n	800141e <SLCAN_Parse_Str+0x76>
        if (Buffer[BufferIndex] >= 'a'){        					// Lowercase letters (Should only be Uppercase...)
 80013c0:	7ffb      	ldrb	r3, [r7, #31]
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	4413      	add	r3, r2
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b60      	cmp	r3, #96	; 0x60
 80013ca:	d90a      	bls.n	80013e2 <SLCAN_Parse_Str+0x3a>
            Buffer[BufferIndex] = Buffer[BufferIndex] - 'a' + 10;
 80013cc:	7ffb      	ldrb	r3, [r7, #31]
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	4413      	add	r3, r2
 80013d2:	781a      	ldrb	r2, [r3, #0]
 80013d4:	7ffb      	ldrb	r3, [r7, #31]
 80013d6:	68f9      	ldr	r1, [r7, #12]
 80013d8:	440b      	add	r3, r1
 80013da:	3a57      	subs	r2, #87	; 0x57
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	701a      	strb	r2, [r3, #0]
 80013e0:	e01a      	b.n	8001418 <SLCAN_Parse_Str+0x70>
        }
        else if (Buffer[BufferIndex] >= 'A') {						// Uppercase letters
 80013e2:	7ffb      	ldrb	r3, [r7, #31]
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b40      	cmp	r3, #64	; 0x40
 80013ec:	d90a      	bls.n	8001404 <SLCAN_Parse_Str+0x5c>
        	Buffer[BufferIndex] = Buffer[BufferIndex] - 'A' + 10;
 80013ee:	7ffb      	ldrb	r3, [r7, #31]
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	4413      	add	r3, r2
 80013f4:	781a      	ldrb	r2, [r3, #0]
 80013f6:	7ffb      	ldrb	r3, [r7, #31]
 80013f8:	68f9      	ldr	r1, [r7, #12]
 80013fa:	440b      	add	r3, r1
 80013fc:	3a37      	subs	r2, #55	; 0x37
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	701a      	strb	r2, [r3, #0]
 8001402:	e009      	b.n	8001418 <SLCAN_Parse_Str+0x70>
        }
        else {														// Numbers
            Buffer[BufferIndex] = Buffer[BufferIndex] - '0';
 8001404:	7ffb      	ldrb	r3, [r7, #31]
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	4413      	add	r3, r2
 800140a:	781a      	ldrb	r2, [r3, #0]
 800140c:	7ffb      	ldrb	r3, [r7, #31]
 800140e:	68f9      	ldr	r1, [r7, #12]
 8001410:	440b      	add	r3, r1
 8001412:	3a30      	subs	r2, #48	; 0x30
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	701a      	strb	r2, [r3, #0]
    for (BufferIndex = 1; BufferIndex < Len - 1; BufferIndex++) {
 8001418:	7ffb      	ldrb	r3, [r7, #31]
 800141a:	3301      	adds	r3, #1
 800141c:	77fb      	strb	r3, [r7, #31]
 800141e:	7ffa      	ldrb	r2, [r7, #31]
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	3b01      	subs	r3, #1
 8001424:	429a      	cmp	r2, r3
 8001426:	d3cb      	bcc.n	80013c0 <SLCAN_Parse_Str+0x18>
        }
    }

    if (Buffer[0] == 'O' || Buffer[0] == 'o') {							// *** Open Channel *** --> "O[CR]"
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b4f      	cmp	r3, #79	; 0x4f
 800142e:	d003      	beq.n	8001438 <SLCAN_Parse_Str+0x90>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b6f      	cmp	r3, #111	; 0x6f
 8001436:	d118      	bne.n	800146a <SLCAN_Parse_Str+0xc2>
    	// Ensure Correct Command Length
    	if(Len != 2) return SLCAN_ERROR;
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d001      	beq.n	8001442 <SLCAN_Parse_Str+0x9a>
 800143e:	2301      	movs	r3, #1
 8001440:	e38c      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>

    	// Ensure Correct State
    	if (hcan1.State != HAL_CAN_STATE_READY)
 8001442:	4b9b      	ldr	r3, [pc, #620]	; (80016b0 <SLCAN_Parse_Str+0x308>)
 8001444:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b01      	cmp	r3, #1
 800144c:	d001      	beq.n	8001452 <SLCAN_Parse_Str+0xaa>
    		return SLCAN_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e384      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>

    	// Attempt to start CAN
    	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8001452:	4897      	ldr	r0, [pc, #604]	; (80016b0 <SLCAN_Parse_Str+0x308>)
 8001454:	f000 ff7a 	bl	800234c <HAL_CAN_Start>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SLCAN_Parse_Str+0xba>
    		return SLCAN_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e37c      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>

        LED_BlueOn();
 8001462:	f7ff f995 	bl	8000790 <LED_BlueOn>
        return SLCAN_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	e378      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>
    }

    else if (Buffer[0] == 'C' || Buffer[0] == 'c') {					// *** Close Channel *** --> "C[CR]"
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b43      	cmp	r3, #67	; 0x43
 8001470:	d003      	beq.n	800147a <SLCAN_Parse_Str+0xd2>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b63      	cmp	r3, #99	; 0x63
 8001478:	d118      	bne.n	80014ac <SLCAN_Parse_Str+0x104>
    	// Ensure Correct Command Length
    	if (Len != 2) return SLCAN_ERROR;
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d001      	beq.n	8001484 <SLCAN_Parse_Str+0xdc>
 8001480:	2301      	movs	r3, #1
 8001482:	e36b      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>

    	// Ensure Correct State
    	if (hcan1.State != HAL_CAN_STATE_LISTENING)
 8001484:	4b8a      	ldr	r3, [pc, #552]	; (80016b0 <SLCAN_Parse_Str+0x308>)
 8001486:	f893 3020 	ldrb.w	r3, [r3, #32]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d001      	beq.n	8001494 <SLCAN_Parse_Str+0xec>
    		return SLCAN_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e363      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>

    	// Attempt to stop CAN
    	if (HAL_CAN_Stop(&hcan1) != HAL_OK)
 8001494:	4886      	ldr	r0, [pc, #536]	; (80016b0 <SLCAN_Parse_Str+0x308>)
 8001496:	f000 ff9e 	bl	80023d6 <HAL_CAN_Stop>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <SLCAN_Parse_Str+0xfc>
    		return SLCAN_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e35b      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>

        LED_BlueOn();
 80014a4:	f7ff f974 	bl	8000790 <LED_BlueOn>
        return SLCAN_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	e357      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>
    }

    if (Buffer[0] == 'Z' || Buffer[0] == 'z') {							// *** Set Timestamp *** --> "Zx[CR]"
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b5a      	cmp	r3, #90	; 0x5a
 80014b2:	d003      	beq.n	80014bc <SLCAN_Parse_Str+0x114>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b7a      	cmp	r3, #122	; 0x7a
 80014ba:	d120      	bne.n	80014fe <SLCAN_Parse_Str+0x156>
    	// Ensure Correct Command Length
    	if (Len != 2 && Len != 3) return SLCAN_ERROR;
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d004      	beq.n	80014cc <SLCAN_Parse_Str+0x124>
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	d001      	beq.n	80014cc <SLCAN_Parse_Str+0x124>
 80014c8:	2301      	movs	r3, #1
 80014ca:	e347      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>

    	if (Len == 2){
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d107      	bne.n	80014e2 <SLCAN_Parse_Str+0x13a>
        	SetTimestamp ^= 1U;
 80014d2:	4b78      	ldr	r3, [pc, #480]	; (80016b4 <SLCAN_Parse_Str+0x30c>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	f083 0301 	eor.w	r3, r3, #1
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	4b75      	ldr	r3, [pc, #468]	; (80016b4 <SLCAN_Parse_Str+0x30c>)
 80014de:	701a      	strb	r2, [r3, #0]
 80014e0:	e009      	b.n	80014f6 <SLCAN_Parse_Str+0x14e>
    	}

    	else {
    		SetTimestamp = Buffer[1] ? 1U : 0U;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	3301      	adds	r3, #1
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <SLCAN_Parse_Str+0x148>
 80014ec:	2201      	movs	r2, #1
 80014ee:	e000      	b.n	80014f2 <SLCAN_Parse_Str+0x14a>
 80014f0:	2200      	movs	r2, #0
 80014f2:	4b70      	ldr	r3, [pc, #448]	; (80016b4 <SLCAN_Parse_Str+0x30c>)
 80014f4:	701a      	strb	r2, [r3, #0]
    	}

        LED_BlueOn();
 80014f6:	f7ff f94b 	bl	8000790 <LED_BlueOn>
        return SLCAN_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e32e      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>
    }

    else if (Buffer[0] == 'S' || Buffer[0] == 's') {					// *** Set Speed *** --> "Sx[CR]"
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b53      	cmp	r3, #83	; 0x53
 8001504:	d003      	beq.n	800150e <SLCAN_Parse_Str+0x166>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b73      	cmp	r3, #115	; 0x73
 800150c:	d11c      	bne.n	8001548 <SLCAN_Parse_Str+0x1a0>
    	// Ensure Correct Command Length
    	if (Len != 3) return SLCAN_ERROR;
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	2b03      	cmp	r3, #3
 8001512:	d001      	beq.n	8001518 <SLCAN_Parse_Str+0x170>
 8001514:	2301      	movs	r3, #1
 8001516:	e321      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>

    	// Ensure Correct State
    	if (hcan1.State != HAL_CAN_STATE_READY)
 8001518:	4b65      	ldr	r3, [pc, #404]	; (80016b0 <SLCAN_Parse_Str+0x308>)
 800151a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b01      	cmp	r3, #1
 8001522:	d001      	beq.n	8001528 <SLCAN_Parse_Str+0x180>
    		return SLCAN_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e319      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>

    	// Attempt to change bus speed
    	if (CAN_SetBitRate(&hcan1, Buffer[1]) != HAL_CAN_STATE_READY)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3301      	adds	r3, #1
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	4619      	mov	r1, r3
 8001530:	485f      	ldr	r0, [pc, #380]	; (80016b0 <SLCAN_Parse_Str+0x308>)
 8001532:	f7ff f823 	bl	800057c <CAN_SetBitRate>
 8001536:	4603      	mov	r3, r0
 8001538:	2b01      	cmp	r3, #1
 800153a:	d001      	beq.n	8001540 <SLCAN_Parse_Str+0x198>
    		return SLCAN_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e30d      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>

    	LED_BlueOn();
 8001540:	f7ff f926 	bl	8000790 <LED_BlueOn>
    	return SLCAN_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	e309      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>
    }

    else if (Buffer[0] == 'L' || Buffer[0] == 'l') {					// *** Set Mode *** --> "Lx[CR]" or "L[CR]"
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b4c      	cmp	r3, #76	; 0x4c
 800154e:	d003      	beq.n	8001558 <SLCAN_Parse_Str+0x1b0>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b6c      	cmp	r3, #108	; 0x6c
 8001556:	d135      	bne.n	80015c4 <SLCAN_Parse_Str+0x21c>
    	// Ensure Correct Command Length
    	if (Len != 3 && Len != 2) return SLCAN_ERROR;
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d004      	beq.n	8001568 <SLCAN_Parse_Str+0x1c0>
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	2b02      	cmp	r3, #2
 8001562:	d001      	beq.n	8001568 <SLCAN_Parse_Str+0x1c0>
 8001564:	2301      	movs	r3, #1
 8001566:	e2f9      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>

    	// Ensure Correct State
    	if (hcan1.State != HAL_CAN_STATE_READY)
 8001568:	4b51      	ldr	r3, [pc, #324]	; (80016b0 <SLCAN_Parse_Str+0x308>)
 800156a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b01      	cmp	r3, #1
 8001572:	d001      	beq.n	8001578 <SLCAN_Parse_Str+0x1d0>
    		return SLCAN_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e2f1      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>

    	// A single 'L' means put in Listen Mode (Mode 2)
    	if (Len == 2 && Buffer[0] == 'L')
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d107      	bne.n	800158e <SLCAN_Parse_Str+0x1e6>
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b4c      	cmp	r3, #76	; 0x4c
 8001584:	d103      	bne.n	800158e <SLCAN_Parse_Str+0x1e6>
    		Buffer[1] = CAN_LISTEN;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	3301      	adds	r3, #1
 800158a:	2202      	movs	r2, #2
 800158c:	701a      	strb	r2, [r3, #0]

    	// A single 'l' means put in Loopback Mode (Mode 1)
    	if (Len == 2 && Buffer[0] == 'l')
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d107      	bne.n	80015a4 <SLCAN_Parse_Str+0x1fc>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b6c      	cmp	r3, #108	; 0x6c
 800159a:	d103      	bne.n	80015a4 <SLCAN_Parse_Str+0x1fc>
    		Buffer[1] = CAN_LOOPBACK;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	3301      	adds	r3, #1
 80015a0:	2201      	movs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]

    	// Attempt to change mode
    	if (CAN_SetMode(&hcan1, Buffer[1]) != HAL_CAN_STATE_READY)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	3301      	adds	r3, #1
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	4619      	mov	r1, r3
 80015ac:	4840      	ldr	r0, [pc, #256]	; (80016b0 <SLCAN_Parse_Str+0x308>)
 80015ae:	f7ff f84b 	bl	8000648 <CAN_SetMode>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d001      	beq.n	80015bc <SLCAN_Parse_Str+0x214>
    		return SLCAN_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e2cf      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>

    	LED_BlueOn();
 80015bc:	f7ff f8e8 	bl	8000790 <LED_BlueOn>
        return SLCAN_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e2cb      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>
    }

    else if (Buffer[0] == 'M' &&
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b4d      	cmp	r3, #77	; 0x4d
 80015ca:	d17b      	bne.n	80016c4 <SLCAN_Parse_Str+0x31c>
    		 Buffer[1] != ('M' - 'A' + 10) &&
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3301      	adds	r3, #1
 80015d0:	781b      	ldrb	r3, [r3, #0]
    else if (Buffer[0] == 'M' &&
 80015d2:	2b16      	cmp	r3, #22
 80015d4:	d076      	beq.n	80016c4 <SLCAN_Parse_Str+0x31c>
			 Buffer[1] != ('m' - 'a' + 10))
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3301      	adds	r3, #1
 80015da:	781b      	ldrb	r3, [r3, #0]
    		 Buffer[1] != ('M' - 'A' + 10) &&
 80015dc:	2b16      	cmp	r3, #22
 80015de:	d071      	beq.n	80016c4 <SLCAN_Parse_Str+0x31c>
    {																	// *** Set Filter *** --> "M00000000[CR] or M000[CR]"
    	// Ensure Correct Command Length								  (AKA "Acceptance 'M'ask")
    	if(Len != 10 && Len != 5) return SLCAN_ERROR;
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	2b0a      	cmp	r3, #10
 80015e4:	d004      	beq.n	80015f0 <SLCAN_Parse_Str+0x248>
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	2b05      	cmp	r3, #5
 80015ea:	d001      	beq.n	80015f0 <SLCAN_Parse_Str+0x248>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e2b5      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>

    	NextFilterID = 0;
 80015f0:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <SLCAN_Parse_Str+0x310>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
    	// Standard ID
    	if (Len == 5) {
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	2b05      	cmp	r3, #5
 80015fa:	d11f      	bne.n	800163c <SLCAN_Parse_Str+0x294>
    		// Turn HEX-Digits/Shifted-ASCII ID into 32bit int
    		for (BufferIndex = 1; BufferIndex < Len - 1; BufferIndex++) {
 80015fc:	2301      	movs	r3, #1
 80015fe:	77fb      	strb	r3, [r7, #31]
 8001600:	e011      	b.n	8001626 <SLCAN_Parse_Str+0x27e>
    			NextFilterID *= 16;
 8001602:	4b2d      	ldr	r3, [pc, #180]	; (80016b8 <SLCAN_Parse_Str+0x310>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	4a2b      	ldr	r2, [pc, #172]	; (80016b8 <SLCAN_Parse_Str+0x310>)
 800160a:	6013      	str	r3, [r2, #0]
    			NextFilterID += Buffer[BufferIndex];
 800160c:	7ffb      	ldrb	r3, [r7, #31]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	4413      	add	r3, r2
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <SLCAN_Parse_Str+0x310>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4413      	add	r3, r2
 800161c:	4a26      	ldr	r2, [pc, #152]	; (80016b8 <SLCAN_Parse_Str+0x310>)
 800161e:	6013      	str	r3, [r2, #0]
    		for (BufferIndex = 1; BufferIndex < Len - 1; BufferIndex++) {
 8001620:	7ffb      	ldrb	r3, [r7, #31]
 8001622:	3301      	adds	r3, #1
 8001624:	77fb      	strb	r3, [r7, #31]
 8001626:	7ffa      	ldrb	r2, [r7, #31]
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	3b01      	subs	r3, #1
 800162c:	429a      	cmp	r2, r3
 800162e:	d3e8      	bcc.n	8001602 <SLCAN_Parse_Str+0x25a>
    		}
    		// Align to the Left (11Bit ID <--> 21 Left Shifts)
    		NextFilterID <<= 21U;
 8001630:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <SLCAN_Parse_Str+0x310>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	055b      	lsls	r3, r3, #21
 8001636:	4a20      	ldr	r2, [pc, #128]	; (80016b8 <SLCAN_Parse_Str+0x310>)
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	e01e      	b.n	800167a <SLCAN_Parse_Str+0x2d2>
    	}

    	// Extended ID
    	else {
    		// Turn HEX-Digits/Shifted-ASCII ID into 32bit int
    		for (BufferIndex = 1; BufferIndex < Len - 1; BufferIndex++) {
 800163c:	2301      	movs	r3, #1
 800163e:	77fb      	strb	r3, [r7, #31]
 8001640:	e011      	b.n	8001666 <SLCAN_Parse_Str+0x2be>
    			NextFilterID *= 16;
 8001642:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <SLCAN_Parse_Str+0x310>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	4a1b      	ldr	r2, [pc, #108]	; (80016b8 <SLCAN_Parse_Str+0x310>)
 800164a:	6013      	str	r3, [r2, #0]
    			NextFilterID += Buffer[BufferIndex];
 800164c:	7ffb      	ldrb	r3, [r7, #31]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4413      	add	r3, r2
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <SLCAN_Parse_Str+0x310>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	4a16      	ldr	r2, [pc, #88]	; (80016b8 <SLCAN_Parse_Str+0x310>)
 800165e:	6013      	str	r3, [r2, #0]
    		for (BufferIndex = 1; BufferIndex < Len - 1; BufferIndex++) {
 8001660:	7ffb      	ldrb	r3, [r7, #31]
 8001662:	3301      	adds	r3, #1
 8001664:	77fb      	strb	r3, [r7, #31]
 8001666:	7ffa      	ldrb	r2, [r7, #31]
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	3b01      	subs	r3, #1
 800166c:	429a      	cmp	r2, r3
 800166e:	d3e8      	bcc.n	8001642 <SLCAN_Parse_Str+0x29a>
    		}
    		// Align to the Left (29Bit ID <--> 3 Left Shifts)
    		NextFilterID <<= 3U;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <SLCAN_Parse_Str+0x310>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4a10      	ldr	r2, [pc, #64]	; (80016b8 <SLCAN_Parse_Str+0x310>)
 8001678:	6013      	str	r3, [r2, #0]
    		// SET_BIT(NextFilterID, CAN_FilterIDE);
    	}

    	// Set the Filter
    	HAL_CAN_StateTypeDef CAN_State;
    	CAN_State = CAN_SetFilter(&hcan1, NextFilterID, SLCAN_CurrentFilterMask);
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <SLCAN_Parse_Str+0x310>)
 800167c:	6819      	ldr	r1, [r3, #0]
 800167e:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <SLCAN_Parse_Str+0x314>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	480a      	ldr	r0, [pc, #40]	; (80016b0 <SLCAN_Parse_Str+0x308>)
 8001686:	f7fe ff3d 	bl	8000504 <CAN_SetFilter>
 800168a:	4603      	mov	r3, r0
 800168c:	74fb      	strb	r3, [r7, #19]
    	if ((CAN_State != HAL_CAN_STATE_LISTENING) && (CAN_State != HAL_CAN_STATE_READY)) {
 800168e:	7cfb      	ldrb	r3, [r7, #19]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d004      	beq.n	800169e <SLCAN_Parse_Str+0x2f6>
 8001694:	7cfb      	ldrb	r3, [r7, #19]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d001      	beq.n	800169e <SLCAN_Parse_Str+0x2f6>
    		return SLCAN_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e25e      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>
    	}

    	// Save current Filter value
    	SLCAN_CurrentFilterID = NextFilterID;
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <SLCAN_Parse_Str+0x310>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <SLCAN_Parse_Str+0x318>)
 80016a4:	6013      	str	r3, [r2, #0]

    	LED_BlueOn();
 80016a6:	f7ff f873 	bl	8000790 <LED_BlueOn>
    	return SLCAN_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e256      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>
 80016ae:	bf00      	nop
 80016b0:	200002d8 	.word	0x200002d8
 80016b4:	2000027c 	.word	0x2000027c
 80016b8:	20000274 	.word	0x20000274
 80016bc:	20000284 	.word	0x20000284
 80016c0:	20000280 	.word	0x20000280
    }

    else if (Buffer[0] ==  'm'              &&
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b6d      	cmp	r3, #109	; 0x6d
 80016ca:	d156      	bne.n	800177a <SLCAN_Parse_Str+0x3d2>
    		 Buffer[1] != ('M' - 'A' + 10)  &&
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	3301      	adds	r3, #1
 80016d0:	781b      	ldrb	r3, [r3, #0]
    else if (Buffer[0] ==  'm'              &&
 80016d2:	2b16      	cmp	r3, #22
 80016d4:	d051      	beq.n	800177a <SLCAN_Parse_Str+0x3d2>
			 Buffer[1] != ('m' - 'a' + 10))
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	3301      	adds	r3, #1
 80016da:	781b      	ldrb	r3, [r3, #0]
    		 Buffer[1] != ('M' - 'A' + 10)  &&
 80016dc:	2b16      	cmp	r3, #22
 80016de:	d04c      	beq.n	800177a <SLCAN_Parse_Str+0x3d2>
    {																	// *** Set Filter Mask *** --> "m00000000[CR]" or "m000[CR]"
    	// Ensure Correct Command Length
    	if(Len != 10 && Len != 5) return SLCAN_ERROR;
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	2b0a      	cmp	r3, #10
 80016e4:	d004      	beq.n	80016f0 <SLCAN_Parse_Str+0x348>
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	2b05      	cmp	r3, #5
 80016ea:	d001      	beq.n	80016f0 <SLCAN_Parse_Str+0x348>
 80016ec:	2301      	movs	r3, #1
 80016ee:	e235      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>

    	NextFilterMask = 0;
 80016f0:	4ba1      	ldr	r3, [pc, #644]	; (8001978 <SLCAN_Parse_Str+0x5d0>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
		// Turn HEX/Shifted-ASCII ID into 32bit int
		for (BufferIndex = 1; BufferIndex < Len - 1; BufferIndex++) {
 80016f6:	2301      	movs	r3, #1
 80016f8:	77fb      	strb	r3, [r7, #31]
 80016fa:	e011      	b.n	8001720 <SLCAN_Parse_Str+0x378>
			NextFilterMask *= 16;
 80016fc:	4b9e      	ldr	r3, [pc, #632]	; (8001978 <SLCAN_Parse_Str+0x5d0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	4a9d      	ldr	r2, [pc, #628]	; (8001978 <SLCAN_Parse_Str+0x5d0>)
 8001704:	6013      	str	r3, [r2, #0]
			NextFilterMask += Buffer[BufferIndex];
 8001706:	7ffb      	ldrb	r3, [r7, #31]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	4b99      	ldr	r3, [pc, #612]	; (8001978 <SLCAN_Parse_Str+0x5d0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4413      	add	r3, r2
 8001716:	4a98      	ldr	r2, [pc, #608]	; (8001978 <SLCAN_Parse_Str+0x5d0>)
 8001718:	6013      	str	r3, [r2, #0]
		for (BufferIndex = 1; BufferIndex < Len - 1; BufferIndex++) {
 800171a:	7ffb      	ldrb	r3, [r7, #31]
 800171c:	3301      	adds	r3, #1
 800171e:	77fb      	strb	r3, [r7, #31]
 8001720:	7ffa      	ldrb	r2, [r7, #31]
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	3b01      	subs	r3, #1
 8001726:	429a      	cmp	r2, r3
 8001728:	d3e8      	bcc.n	80016fc <SLCAN_Parse_Str+0x354>
		}

		// STD ID
    	if (Len == 5)
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	2b05      	cmp	r3, #5
 800172e:	d105      	bne.n	800173c <SLCAN_Parse_Str+0x394>
    		NextFilterMask <<= 21U;
 8001730:	4b91      	ldr	r3, [pc, #580]	; (8001978 <SLCAN_Parse_Str+0x5d0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	055b      	lsls	r3, r3, #21
 8001736:	4a90      	ldr	r2, [pc, #576]	; (8001978 <SLCAN_Parse_Str+0x5d0>)
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e004      	b.n	8001746 <SLCAN_Parse_Str+0x39e>

    	// EXT ID
    	else {
    		NextFilterMask <<= 3U;
 800173c:	4b8e      	ldr	r3, [pc, #568]	; (8001978 <SLCAN_Parse_Str+0x5d0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	4a8d      	ldr	r2, [pc, #564]	; (8001978 <SLCAN_Parse_Str+0x5d0>)
 8001744:	6013      	str	r3, [r2, #0]
    	}

    	// Set the Mask
    	HAL_CAN_StateTypeDef CAN_State;
    	CAN_State = CAN_SetFilter(&hcan1, SLCAN_CurrentFilterID, NextFilterMask);
 8001746:	4b8d      	ldr	r3, [pc, #564]	; (800197c <SLCAN_Parse_Str+0x5d4>)
 8001748:	6819      	ldr	r1, [r3, #0]
 800174a:	4b8b      	ldr	r3, [pc, #556]	; (8001978 <SLCAN_Parse_Str+0x5d0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	488b      	ldr	r0, [pc, #556]	; (8001980 <SLCAN_Parse_Str+0x5d8>)
 8001752:	f7fe fed7 	bl	8000504 <CAN_SetFilter>
 8001756:	4603      	mov	r3, r0
 8001758:	74bb      	strb	r3, [r7, #18]
    	if ((CAN_State != HAL_CAN_STATE_LISTENING) && (CAN_State != HAL_CAN_STATE_READY)) {
 800175a:	7cbb      	ldrb	r3, [r7, #18]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d004      	beq.n	800176a <SLCAN_Parse_Str+0x3c2>
 8001760:	7cbb      	ldrb	r3, [r7, #18]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d001      	beq.n	800176a <SLCAN_Parse_Str+0x3c2>
    		return SLCAN_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e1f8      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>
    	}

    	// Save current Mask value
    	SLCAN_CurrentFilterMask = NextFilterMask;
 800176a:	4b83      	ldr	r3, [pc, #524]	; (8001978 <SLCAN_Parse_Str+0x5d0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a85      	ldr	r2, [pc, #532]	; (8001984 <SLCAN_Parse_Str+0x5dc>)
 8001770:	6013      	str	r3, [r2, #0]

    	LED_BlueOn();
 8001772:	f7ff f80d 	bl	8000790 <LED_BlueOn>
    	return SLCAN_OK;
 8001776:	2300      	movs	r3, #0
 8001778:	e1f0      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>
    }

    else if ((Buffer[0] ==  'M'        || Buffer[0] ==  'm'       ) &&
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b4d      	cmp	r3, #77	; 0x4d
 8001780:	d004      	beq.n	800178c <SLCAN_Parse_Str+0x3e4>
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b6d      	cmp	r3, #109	; 0x6d
 8001788:	f040 80bb 	bne.w	8001902 <SLCAN_Parse_Str+0x55a>
    		 (Buffer[1] == ('M' - 'A' + 10) || Buffer[1] == ('m' - 'a' + 10))
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	3301      	adds	r3, #1
 8001790:	781b      	ldrb	r3, [r3, #0]
    else if ((Buffer[0] ==  'M'        || Buffer[0] ==  'm'       ) &&
 8001792:	2b16      	cmp	r3, #22
 8001794:	d005      	beq.n	80017a2 <SLCAN_Parse_Str+0x3fa>
    		 (Buffer[1] == ('M' - 'A' + 10) || Buffer[1] == ('m' - 'a' + 10))
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3301      	adds	r3, #1
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b16      	cmp	r3, #22
 800179e:	f040 80b0 	bne.w	8001902 <SLCAN_Parse_Str+0x55a>
			 )
    {																	// *** Return Filter+Mask (as ASCII String) *** --> "MM[CR]"
    	// Ensure Correct Command Length								// Returns: "AxxxxxxxxKyyyyyyyy\r\0"
    	if(Len != 3) return SLCAN_ERROR;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d001      	beq.n	80017ac <SLCAN_Parse_Str+0x404>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e1d7      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>

        uint8_t BufferIndexFreeze;
        uint32_t tmpFilter; 					// Will hold Filter, then Mask

        // Start of Filter
    	BufferIndex = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	77fb      	strb	r3, [r7, #31]
    	FilterBuf[BufferIndex++] = 'A';
 80017b0:	7ffb      	ldrb	r3, [r7, #31]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	77fa      	strb	r2, [r7, #31]
 80017b6:	461a      	mov	r2, r3
 80017b8:	4b73      	ldr	r3, [pc, #460]	; (8001988 <SLCAN_Parse_Str+0x5e0>)
 80017ba:	2141      	movs	r1, #65	; 0x41
 80017bc:	5499      	strb	r1, [r3, r2]

    	tmpFilter = SLCAN_CurrentFilterID;
 80017be:	4b6f      	ldr	r3, [pc, #444]	; (800197c <SLCAN_Parse_Str+0x5d4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	61bb      	str	r3, [r7, #24]
    	// Add HEX Digits to Buffer, Right to Left, one Nybble at a time
    	BufferIndexFreeze = BufferIndex;
 80017c4:	7ffb      	ldrb	r3, [r7, #31]
 80017c6:	747b      	strb	r3, [r7, #17]
    	for (counter = 8; counter > 0; counter--) {
 80017c8:	2308      	movs	r3, #8
 80017ca:	77bb      	strb	r3, [r7, #30]
 80017cc:	e013      	b.n	80017f6 <SLCAN_Parse_Str+0x44e>
    		FilterBuf[BufferIndexFreeze + counter - 1] = (tmpFilter & 0x0F);
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	7c79      	ldrb	r1, [r7, #17]
 80017d4:	7fbb      	ldrb	r3, [r7, #30]
 80017d6:	440b      	add	r3, r1
 80017d8:	3b01      	subs	r3, #1
 80017da:	f002 020f 	and.w	r2, r2, #15
 80017de:	b2d1      	uxtb	r1, r2
 80017e0:	4a69      	ldr	r2, [pc, #420]	; (8001988 <SLCAN_Parse_Str+0x5e0>)
 80017e2:	54d1      	strb	r1, [r2, r3]
    		tmpFilter >>= 4;
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	091b      	lsrs	r3, r3, #4
 80017e8:	61bb      	str	r3, [r7, #24]
    		BufferIndex++;
 80017ea:	7ffb      	ldrb	r3, [r7, #31]
 80017ec:	3301      	adds	r3, #1
 80017ee:	77fb      	strb	r3, [r7, #31]
    	for (counter = 8; counter > 0; counter--) {
 80017f0:	7fbb      	ldrb	r3, [r7, #30]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	77bb      	strb	r3, [r7, #30]
 80017f6:	7fbb      	ldrb	r3, [r7, #30]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1e8      	bne.n	80017ce <SLCAN_Parse_Str+0x426>
    	}

        // Convert to ASCII
        for (counter = 1; counter < BufferIndex; counter++) {
 80017fc:	2301      	movs	r3, #1
 80017fe:	77bb      	strb	r3, [r7, #30]
 8001800:	e018      	b.n	8001834 <SLCAN_Parse_Str+0x48c>
            if (FilterBuf[counter] < 0xA) {
 8001802:	7fbb      	ldrb	r3, [r7, #30]
 8001804:	4a60      	ldr	r2, [pc, #384]	; (8001988 <SLCAN_Parse_Str+0x5e0>)
 8001806:	5cd3      	ldrb	r3, [r2, r3]
 8001808:	2b09      	cmp	r3, #9
 800180a:	d808      	bhi.n	800181e <SLCAN_Parse_Str+0x476>
            	FilterBuf[counter] += 0x30;		// ASCII Digit
 800180c:	7fbb      	ldrb	r3, [r7, #30]
 800180e:	4a5e      	ldr	r2, [pc, #376]	; (8001988 <SLCAN_Parse_Str+0x5e0>)
 8001810:	5cd2      	ldrb	r2, [r2, r3]
 8001812:	7fbb      	ldrb	r3, [r7, #30]
 8001814:	3230      	adds	r2, #48	; 0x30
 8001816:	b2d1      	uxtb	r1, r2
 8001818:	4a5b      	ldr	r2, [pc, #364]	; (8001988 <SLCAN_Parse_Str+0x5e0>)
 800181a:	54d1      	strb	r1, [r2, r3]
 800181c:	e007      	b.n	800182e <SLCAN_Parse_Str+0x486>
            } else {
            	FilterBuf[counter] += 0x37; 	// ASCII Uppercase Character
 800181e:	7fbb      	ldrb	r3, [r7, #30]
 8001820:	4a59      	ldr	r2, [pc, #356]	; (8001988 <SLCAN_Parse_Str+0x5e0>)
 8001822:	5cd2      	ldrb	r2, [r2, r3]
 8001824:	7fbb      	ldrb	r3, [r7, #30]
 8001826:	3237      	adds	r2, #55	; 0x37
 8001828:	b2d1      	uxtb	r1, r2
 800182a:	4a57      	ldr	r2, [pc, #348]	; (8001988 <SLCAN_Parse_Str+0x5e0>)
 800182c:	54d1      	strb	r1, [r2, r3]
        for (counter = 1; counter < BufferIndex; counter++) {
 800182e:	7fbb      	ldrb	r3, [r7, #30]
 8001830:	3301      	adds	r3, #1
 8001832:	77bb      	strb	r3, [r7, #30]
 8001834:	7fba      	ldrb	r2, [r7, #30]
 8001836:	7ffb      	ldrb	r3, [r7, #31]
 8001838:	429a      	cmp	r2, r3
 800183a:	d3e2      	bcc.n	8001802 <SLCAN_Parse_Str+0x45a>
            }
        }

        // Start of Mask
    	FilterBuf[BufferIndex++] = 'K';
 800183c:	7ffb      	ldrb	r3, [r7, #31]
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	77fa      	strb	r2, [r7, #31]
 8001842:	461a      	mov	r2, r3
 8001844:	4b50      	ldr	r3, [pc, #320]	; (8001988 <SLCAN_Parse_Str+0x5e0>)
 8001846:	214b      	movs	r1, #75	; 0x4b
 8001848:	5499      	strb	r1, [r3, r2]

    	tmpFilter = SLCAN_CurrentFilterMask;
 800184a:	4b4e      	ldr	r3, [pc, #312]	; (8001984 <SLCAN_Parse_Str+0x5dc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	61bb      	str	r3, [r7, #24]
    	// Add HEX Digits to Buffer, Right to Left, one Nybble at a time
    	BufferIndexFreeze = BufferIndex;
 8001850:	7ffb      	ldrb	r3, [r7, #31]
 8001852:	747b      	strb	r3, [r7, #17]
    	for (counter = 8; counter > 0; counter--) {
 8001854:	2308      	movs	r3, #8
 8001856:	77bb      	strb	r3, [r7, #30]
 8001858:	e013      	b.n	8001882 <SLCAN_Parse_Str+0x4da>
    		FilterBuf[BufferIndexFreeze + counter - 1] = (tmpFilter & 0x0F);
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	7c79      	ldrb	r1, [r7, #17]
 8001860:	7fbb      	ldrb	r3, [r7, #30]
 8001862:	440b      	add	r3, r1
 8001864:	3b01      	subs	r3, #1
 8001866:	f002 020f 	and.w	r2, r2, #15
 800186a:	b2d1      	uxtb	r1, r2
 800186c:	4a46      	ldr	r2, [pc, #280]	; (8001988 <SLCAN_Parse_Str+0x5e0>)
 800186e:	54d1      	strb	r1, [r2, r3]
    		tmpFilter >>= 4;
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
    		BufferIndex++;
 8001876:	7ffb      	ldrb	r3, [r7, #31]
 8001878:	3301      	adds	r3, #1
 800187a:	77fb      	strb	r3, [r7, #31]
    	for (counter = 8; counter > 0; counter--) {
 800187c:	7fbb      	ldrb	r3, [r7, #30]
 800187e:	3b01      	subs	r3, #1
 8001880:	77bb      	strb	r3, [r7, #30]
 8001882:	7fbb      	ldrb	r3, [r7, #30]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1e8      	bne.n	800185a <SLCAN_Parse_Str+0x4b2>
    	}

        // Convert to ASCII
        for (counter = BufferIndexFreeze; counter < BufferIndex; counter++) {
 8001888:	7c7b      	ldrb	r3, [r7, #17]
 800188a:	77bb      	strb	r3, [r7, #30]
 800188c:	e018      	b.n	80018c0 <SLCAN_Parse_Str+0x518>
            if (FilterBuf[counter] < 0xA) {
 800188e:	7fbb      	ldrb	r3, [r7, #30]
 8001890:	4a3d      	ldr	r2, [pc, #244]	; (8001988 <SLCAN_Parse_Str+0x5e0>)
 8001892:	5cd3      	ldrb	r3, [r2, r3]
 8001894:	2b09      	cmp	r3, #9
 8001896:	d808      	bhi.n	80018aa <SLCAN_Parse_Str+0x502>
            	FilterBuf[counter] += 0x30;		// ASCII Digit
 8001898:	7fbb      	ldrb	r3, [r7, #30]
 800189a:	4a3b      	ldr	r2, [pc, #236]	; (8001988 <SLCAN_Parse_Str+0x5e0>)
 800189c:	5cd2      	ldrb	r2, [r2, r3]
 800189e:	7fbb      	ldrb	r3, [r7, #30]
 80018a0:	3230      	adds	r2, #48	; 0x30
 80018a2:	b2d1      	uxtb	r1, r2
 80018a4:	4a38      	ldr	r2, [pc, #224]	; (8001988 <SLCAN_Parse_Str+0x5e0>)
 80018a6:	54d1      	strb	r1, [r2, r3]
 80018a8:	e007      	b.n	80018ba <SLCAN_Parse_Str+0x512>
            } else {
            	FilterBuf[counter] += 0x37; 	// ASCII Uppercase Character
 80018aa:	7fbb      	ldrb	r3, [r7, #30]
 80018ac:	4a36      	ldr	r2, [pc, #216]	; (8001988 <SLCAN_Parse_Str+0x5e0>)
 80018ae:	5cd2      	ldrb	r2, [r2, r3]
 80018b0:	7fbb      	ldrb	r3, [r7, #30]
 80018b2:	3237      	adds	r2, #55	; 0x37
 80018b4:	b2d1      	uxtb	r1, r2
 80018b6:	4a34      	ldr	r2, [pc, #208]	; (8001988 <SLCAN_Parse_Str+0x5e0>)
 80018b8:	54d1      	strb	r1, [r2, r3]
        for (counter = BufferIndexFreeze; counter < BufferIndex; counter++) {
 80018ba:	7fbb      	ldrb	r3, [r7, #30]
 80018bc:	3301      	adds	r3, #1
 80018be:	77bb      	strb	r3, [r7, #30]
 80018c0:	7fba      	ldrb	r2, [r7, #30]
 80018c2:	7ffb      	ldrb	r3, [r7, #31]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d3e2      	bcc.n	800188e <SLCAN_Parse_Str+0x4e6>
            }
        }

    	FilterBuf[BufferIndex++] = '\r';
 80018c8:	7ffb      	ldrb	r3, [r7, #31]
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	77fa      	strb	r2, [r7, #31]
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b2d      	ldr	r3, [pc, #180]	; (8001988 <SLCAN_Parse_Str+0x5e0>)
 80018d2:	210d      	movs	r1, #13
 80018d4:	5499      	strb	r1, [r3, r2]
    	FilterBuf[BufferIndex++] = '\0';
 80018d6:	7ffb      	ldrb	r3, [r7, #31]
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	77fa      	strb	r2, [r7, #31]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <SLCAN_Parse_Str+0x5e0>)
 80018e0:	2100      	movs	r1, #0
 80018e2:	5499      	strb	r1, [r3, r2]

    	if (CDC_Transmit_FS(FilterBuf, BufferIndex) != USBD_OK) {
 80018e4:	7ffb      	ldrb	r3, [r7, #31]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	4619      	mov	r1, r3
 80018ea:	4827      	ldr	r0, [pc, #156]	; (8001988 <SLCAN_Parse_Str+0x5e0>)
 80018ec:	f007 f90c 	bl	8008b08 <CDC_Transmit_FS>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <SLCAN_Parse_Str+0x552>
    		return SLCAN_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e130      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>
    	}

    	LED_BlueOn();
 80018fa:	f7fe ff49 	bl	8000790 <LED_BlueOn>
    	return SLCAN_OK;
 80018fe:	2300      	movs	r3, #0
 8001900:	e12c      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>
    }

    else if (Buffer[0] == 'F' || Buffer[0] == 'f') {					// *** Read Status Flag (as ASCII String) *** --> "F\r"
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b46      	cmp	r3, #70	; 0x46
 8001908:	d003      	beq.n	8001912 <SLCAN_Parse_Str+0x56a>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b66      	cmp	r3, #102	; 0x66
 8001910:	d178      	bne.n	8001a04 <SLCAN_Parse_Str+0x65c>
    	// Ensure Correct Command Length								// Returns: "Fxxxxxxxx\r\0"
    	if (Len != 2 && Len != 3) return SLCAN_ERROR;
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	2b02      	cmp	r3, #2
 8001916:	d004      	beq.n	8001922 <SLCAN_Parse_Str+0x57a>
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	2b03      	cmp	r3, #3
 800191c:	d001      	beq.n	8001922 <SLCAN_Parse_Str+0x57a>
 800191e:	2301      	movs	r3, #1
 8001920:	e11c      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>

        uint8_t BufferIndexFreeze;
        uint32_t tmpCode = hcan1.ErrorCode;
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <SLCAN_Parse_Str+0x5d8>)
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	617b      	str	r3, [r7, #20]

    	BufferIndex = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	77fb      	strb	r3, [r7, #31]
    	StatusBuf[BufferIndex++] = 'F';
 800192c:	7ffb      	ldrb	r3, [r7, #31]
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	77fa      	strb	r2, [r7, #31]
 8001932:	461a      	mov	r2, r3
 8001934:	4b15      	ldr	r3, [pc, #84]	; (800198c <SLCAN_Parse_Str+0x5e4>)
 8001936:	2146      	movs	r1, #70	; 0x46
 8001938:	5499      	strb	r1, [r3, r2]

    	// Add HEX Digits to Buffer, Right to Left, one Nybble at a time
    	BufferIndexFreeze = BufferIndex;
 800193a:	7ffb      	ldrb	r3, [r7, #31]
 800193c:	743b      	strb	r3, [r7, #16]
    	for (counter = 8; counter > 0; counter--) {
 800193e:	2308      	movs	r3, #8
 8001940:	77bb      	strb	r3, [r7, #30]
 8001942:	e013      	b.n	800196c <SLCAN_Parse_Str+0x5c4>
    		StatusBuf[BufferIndexFreeze + counter - 1] = (tmpCode & 0x0F);
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	7c39      	ldrb	r1, [r7, #16]
 800194a:	7fbb      	ldrb	r3, [r7, #30]
 800194c:	440b      	add	r3, r1
 800194e:	3b01      	subs	r3, #1
 8001950:	f002 020f 	and.w	r2, r2, #15
 8001954:	b2d1      	uxtb	r1, r2
 8001956:	4a0d      	ldr	r2, [pc, #52]	; (800198c <SLCAN_Parse_Str+0x5e4>)
 8001958:	54d1      	strb	r1, [r2, r3]
    		tmpCode >>= 4;
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	091b      	lsrs	r3, r3, #4
 800195e:	617b      	str	r3, [r7, #20]
    		BufferIndex++;
 8001960:	7ffb      	ldrb	r3, [r7, #31]
 8001962:	3301      	adds	r3, #1
 8001964:	77fb      	strb	r3, [r7, #31]
    	for (counter = 8; counter > 0; counter--) {
 8001966:	7fbb      	ldrb	r3, [r7, #30]
 8001968:	3b01      	subs	r3, #1
 800196a:	77bb      	strb	r3, [r7, #30]
 800196c:	7fbb      	ldrb	r3, [r7, #30]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1e8      	bne.n	8001944 <SLCAN_Parse_Str+0x59c>
    	}

        // Convert to ASCII
        for (counter = BufferIndexFreeze; counter < BufferIndex; counter++) {
 8001972:	7c3b      	ldrb	r3, [r7, #16]
 8001974:	77bb      	strb	r3, [r7, #30]
 8001976:	e024      	b.n	80019c2 <SLCAN_Parse_Str+0x61a>
 8001978:	20000278 	.word	0x20000278
 800197c:	20000280 	.word	0x20000280
 8001980:	200002d8 	.word	0x200002d8
 8001984:	20000284 	.word	0x20000284
 8001988:	20000254 	.word	0x20000254
 800198c:	20000268 	.word	0x20000268
            if (StatusBuf[counter] < 0xA) {
 8001990:	7fbb      	ldrb	r3, [r7, #30]
 8001992:	4a74      	ldr	r2, [pc, #464]	; (8001b64 <SLCAN_Parse_Str+0x7bc>)
 8001994:	5cd3      	ldrb	r3, [r2, r3]
 8001996:	2b09      	cmp	r3, #9
 8001998:	d808      	bhi.n	80019ac <SLCAN_Parse_Str+0x604>
                StatusBuf[counter] += 0x30;		// ASCII Digit
 800199a:	7fbb      	ldrb	r3, [r7, #30]
 800199c:	4a71      	ldr	r2, [pc, #452]	; (8001b64 <SLCAN_Parse_Str+0x7bc>)
 800199e:	5cd2      	ldrb	r2, [r2, r3]
 80019a0:	7fbb      	ldrb	r3, [r7, #30]
 80019a2:	3230      	adds	r2, #48	; 0x30
 80019a4:	b2d1      	uxtb	r1, r2
 80019a6:	4a6f      	ldr	r2, [pc, #444]	; (8001b64 <SLCAN_Parse_Str+0x7bc>)
 80019a8:	54d1      	strb	r1, [r2, r3]
 80019aa:	e007      	b.n	80019bc <SLCAN_Parse_Str+0x614>
            } else {
                StatusBuf[counter] += 0x37; 	// ASCII Uppercase Character
 80019ac:	7fbb      	ldrb	r3, [r7, #30]
 80019ae:	4a6d      	ldr	r2, [pc, #436]	; (8001b64 <SLCAN_Parse_Str+0x7bc>)
 80019b0:	5cd2      	ldrb	r2, [r2, r3]
 80019b2:	7fbb      	ldrb	r3, [r7, #30]
 80019b4:	3237      	adds	r2, #55	; 0x37
 80019b6:	b2d1      	uxtb	r1, r2
 80019b8:	4a6a      	ldr	r2, [pc, #424]	; (8001b64 <SLCAN_Parse_Str+0x7bc>)
 80019ba:	54d1      	strb	r1, [r2, r3]
        for (counter = BufferIndexFreeze; counter < BufferIndex; counter++) {
 80019bc:	7fbb      	ldrb	r3, [r7, #30]
 80019be:	3301      	adds	r3, #1
 80019c0:	77bb      	strb	r3, [r7, #30]
 80019c2:	7fba      	ldrb	r2, [r7, #30]
 80019c4:	7ffb      	ldrb	r3, [r7, #31]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d3e2      	bcc.n	8001990 <SLCAN_Parse_Str+0x5e8>
            }
        }

    	StatusBuf[BufferIndex++] = '\r';
 80019ca:	7ffb      	ldrb	r3, [r7, #31]
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	77fa      	strb	r2, [r7, #31]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b64      	ldr	r3, [pc, #400]	; (8001b64 <SLCAN_Parse_Str+0x7bc>)
 80019d4:	210d      	movs	r1, #13
 80019d6:	5499      	strb	r1, [r3, r2]
    	StatusBuf[BufferIndex++] = '\0';
 80019d8:	7ffb      	ldrb	r3, [r7, #31]
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	77fa      	strb	r2, [r7, #31]
 80019de:	461a      	mov	r2, r3
 80019e0:	4b60      	ldr	r3, [pc, #384]	; (8001b64 <SLCAN_Parse_Str+0x7bc>)
 80019e2:	2100      	movs	r1, #0
 80019e4:	5499      	strb	r1, [r3, r2]

    	if (CDC_Transmit_FS(StatusBuf, BufferIndex) != USBD_OK) {
 80019e6:	7ffb      	ldrb	r3, [r7, #31]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	4619      	mov	r1, r3
 80019ec:	485d      	ldr	r0, [pc, #372]	; (8001b64 <SLCAN_Parse_Str+0x7bc>)
 80019ee:	f007 f88b 	bl	8008b08 <CDC_Transmit_FS>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <SLCAN_Parse_Str+0x654>
    		return SLCAN_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0af      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>
    	}

    	LED_BlueOn();
 80019fc:	f7fe fec8 	bl	8000790 <LED_BlueOn>
    	return SLCAN_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	e0ab      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>
    }

    else if (Buffer[0] == 't' || Buffer[0] == 'T') {						// *** Transmit *** --> "T1122334481122334455667788ADBE[CR]"
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b74      	cmp	r3, #116	; 0x74
 8001a0a:	d003      	beq.n	8001a14 <SLCAN_Parse_Str+0x66c>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b54      	cmp	r3, #84	; 0x54
 8001a12:	d103      	bne.n	8001a1c <SLCAN_Parse_Str+0x674>
        pHeader->RTR = CAN_RTR_DATA;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	e00d      	b.n	8001a38 <SLCAN_Parse_Str+0x690>
    }

    else if (Buffer[0] == 'r' || Buffer[0] == 'R') {						// *** Transmit (RTR) ***
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b72      	cmp	r3, #114	; 0x72
 8001a22:	d003      	beq.n	8001a2c <SLCAN_Parse_Str+0x684>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b52      	cmp	r3, #82	; 0x52
 8001a2a:	d103      	bne.n	8001a34 <SLCAN_Parse_Str+0x68c>
        pHeader->RTR = CAN_RTR_REMOTE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	e001      	b.n	8001a38 <SLCAN_Parse_Str+0x690>
    }

    else {																	// Command Not Found
        return SLCAN_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e091      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>
    }

    // Putting Requested Transmission Data into the supplied header and data buffer.
    // (Should I just call HAL CAN Tx Function from here?)
    // Standard ID
    if (Buffer[0] == 't' || Buffer[0] == 'r') {
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b74      	cmp	r3, #116	; 0x74
 8001a3e:	d003      	beq.n	8001a48 <SLCAN_Parse_Str+0x6a0>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b72      	cmp	r3, #114	; 0x72
 8001a46:	d103      	bne.n	8001a50 <SLCAN_Parse_Str+0x6a8>
        pHeader->IDE = CAN_ID_STD;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	e00d      	b.n	8001a6c <SLCAN_Parse_Str+0x6c4>
    }

    // Extended ID
    else if (Buffer[0] == 'T' || Buffer[0] == 'R') {
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b54      	cmp	r3, #84	; 0x54
 8001a56:	d003      	beq.n	8001a60 <SLCAN_Parse_Str+0x6b8>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b52      	cmp	r3, #82	; 0x52
 8001a5e:	d103      	bne.n	8001a68 <SLCAN_Parse_Str+0x6c0>
        pHeader->IDE = CAN_ID_EXT;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2204      	movs	r2, #4
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	e001      	b.n	8001a6c <SLCAN_Parse_Str+0x6c4>
    }

    else {
        // How did we get here?
        return SLCAN_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e077      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>
    }

    // Reset ID in ExtID and StdId
    // Assign ID value to appropriate struct member
    BufferIndex = 1;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	77fb      	strb	r3, [r7, #31]
    pHeader->ExtId = 0;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	605a      	str	r2, [r3, #4]
    pHeader->StdId = 0;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
    if (pHeader->IDE == CAN_ID_EXT) {
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d11b      	bne.n	8001abc <SLCAN_Parse_Str+0x714>
    	// Extended IDs take up 8 HEX digits
        for (counter = 0; counter < SLCAN_EXT_ID_LEN; counter++) {
 8001a84:	2300      	movs	r3, #0
 8001a86:	77bb      	strb	r3, [r7, #30]
 8001a88:	e014      	b.n	8001ab4 <SLCAN_Parse_Str+0x70c>
        	pHeader->ExtId *= 16;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	011a      	lsls	r2, r3, #4
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	605a      	str	r2, [r3, #4]
        	pHeader->ExtId += Buffer[counter + 1];
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	7fba      	ldrb	r2, [r7, #30]
 8001a9a:	3201      	adds	r2, #1
 8001a9c:	68f9      	ldr	r1, [r7, #12]
 8001a9e:	440a      	add	r2, r1
 8001aa0:	7812      	ldrb	r2, [r2, #0]
 8001aa2:	441a      	add	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	605a      	str	r2, [r3, #4]
        	BufferIndex++;
 8001aa8:	7ffb      	ldrb	r3, [r7, #31]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	77fb      	strb	r3, [r7, #31]
        for (counter = 0; counter < SLCAN_EXT_ID_LEN; counter++) {
 8001aae:	7fbb      	ldrb	r3, [r7, #30]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	77bb      	strb	r3, [r7, #30]
 8001ab4:	7fbb      	ldrb	r3, [r7, #30]
 8001ab6:	2b07      	cmp	r3, #7
 8001ab8:	d9e7      	bls.n	8001a8a <SLCAN_Parse_Str+0x6e2>
 8001aba:	e01a      	b.n	8001af2 <SLCAN_Parse_Str+0x74a>
        }
    }
    else {
    	// Standard IDs take up 3 HEX digits
        for (counter = 0; counter < SLCAN_STD_ID_LEN; counter++) {
 8001abc:	2300      	movs	r3, #0
 8001abe:	77bb      	strb	r3, [r7, #30]
 8001ac0:	e014      	b.n	8001aec <SLCAN_Parse_Str+0x744>
        	pHeader->StdId *= 16;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	011a      	lsls	r2, r3, #4
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	601a      	str	r2, [r3, #0]
        	pHeader->StdId += Buffer[counter + 1];
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	7fba      	ldrb	r2, [r7, #30]
 8001ad2:	3201      	adds	r2, #1
 8001ad4:	68f9      	ldr	r1, [r7, #12]
 8001ad6:	440a      	add	r2, r1
 8001ad8:	7812      	ldrb	r2, [r2, #0]
 8001ada:	441a      	add	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	601a      	str	r2, [r3, #0]
        	BufferIndex++;
 8001ae0:	7ffb      	ldrb	r3, [r7, #31]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	77fb      	strb	r3, [r7, #31]
        for (counter = 0; counter < SLCAN_STD_ID_LEN; counter++) {
 8001ae6:	7fbb      	ldrb	r3, [r7, #30]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	77bb      	strb	r3, [r7, #30]
 8001aec:	7fbb      	ldrb	r3, [r7, #30]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d9e7      	bls.n	8001ac2 <SLCAN_Parse_Str+0x71a>
        }
    }


    pHeader->DLC = Buffer[BufferIndex++];
 8001af2:	7ffb      	ldrb	r3, [r7, #31]
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	77fa      	strb	r2, [r7, #31]
 8001af8:	461a      	mov	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4413      	add	r3, r2
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	611a      	str	r2, [r3, #16]
    if (pHeader->DLC < 0 || pHeader->DLC > 8) {
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d901      	bls.n	8001b12 <SLCAN_Parse_Str+0x76a>
        return SLCAN_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e024      	b.n	8001b5c <SLCAN_Parse_Str+0x7b4>
    }

    // TODO Add a check for non-ASCII Characters (if (Buffer[BufferIndex] < 0 || Buffer[BufferIndex] > 15) ...)
    // TODO Add a check for if there are enough characters available (if (Len - BufferIndex - 1 (\r) ) < (DLC * 2) - 1) ...

    for (counter = 0; counter < pHeader->DLC; counter++) {
 8001b12:	2300      	movs	r3, #0
 8001b14:	77bb      	strb	r3, [r7, #30]
 8001b16:	e019      	b.n	8001b4c <SLCAN_Parse_Str+0x7a4>
        aData[counter] = (Buffer[BufferIndex] << 4) + (0x0F & Buffer[BufferIndex + 1]);
 8001b18:	7ffb      	ldrb	r3, [r7, #31]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	b2d9      	uxtb	r1, r3
 8001b24:	7ffb      	ldrb	r3, [r7, #31]
 8001b26:	3301      	adds	r3, #1
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	7fbb      	ldrb	r3, [r7, #30]
 8001b36:	6838      	ldr	r0, [r7, #0]
 8001b38:	4403      	add	r3, r0
 8001b3a:	440a      	add	r2, r1
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	701a      	strb	r2, [r3, #0]
        BufferIndex += 2;
 8001b40:	7ffb      	ldrb	r3, [r7, #31]
 8001b42:	3302      	adds	r3, #2
 8001b44:	77fb      	strb	r3, [r7, #31]
    for (counter = 0; counter < pHeader->DLC; counter++) {
 8001b46:	7fbb      	ldrb	r3, [r7, #30]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	77bb      	strb	r3, [r7, #30]
 8001b4c:	7fba      	ldrb	r2, [r7, #30]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d3e0      	bcc.n	8001b18 <SLCAN_Parse_Str+0x770>
    }

    LED_BlueOn();
 8001b56:	f7fe fe1b 	bl	8000790 <LED_BlueOn>
    return SLCAN_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3720      	adds	r7, #32
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000268 	.word	0x20000268

08001b68 <ClearSLCAN>:

void ClearSLCAN(void){
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
	for (int i = 0; i < SLCAN_MTU; i++)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	e007      	b.n	8001b84 <ClearSLCAN+0x1c>
		SLCAN_CommandStringRx[i] = '\0';
 8001b74:	4a08      	ldr	r2, [pc, #32]	; (8001b98 <ClearSLCAN+0x30>)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < SLCAN_MTU; i++)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3301      	adds	r3, #1
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b1d      	cmp	r3, #29
 8001b88:	ddf4      	ble.n	8001b74 <ClearSLCAN+0xc>
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000300 	.word	0x20000300

08001b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <HAL_MspInit+0x4c>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	4a0f      	ldr	r2, [pc, #60]	; (8001be8 <HAL_MspInit+0x4c>)
 8001bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <HAL_MspInit+0x4c>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	603b      	str	r3, [r7, #0]
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <HAL_MspInit+0x4c>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <HAL_MspInit+0x4c>)
 8001bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_MspInit+0x4c>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	603b      	str	r3, [r7, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800

08001bec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a19      	ldr	r2, [pc, #100]	; (8001c70 <HAL_CAN_MspInit+0x84>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d12b      	bne.n	8001c66 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <HAL_CAN_MspInit+0x88>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	4a17      	ldr	r2, [pc, #92]	; (8001c74 <HAL_CAN_MspInit+0x88>)
 8001c18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <HAL_CAN_MspInit+0x88>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_CAN_MspInit+0x88>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a10      	ldr	r2, [pc, #64]	; (8001c74 <HAL_CAN_MspInit+0x88>)
 8001c34:	f043 0308 	orr.w	r3, r3, #8
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <HAL_CAN_MspInit+0x88>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c46:	2303      	movs	r3, #3
 8001c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c52:	2303      	movs	r3, #3
 8001c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c56:	2309      	movs	r3, #9
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4805      	ldr	r0, [pc, #20]	; (8001c78 <HAL_CAN_MspInit+0x8c>)
 8001c62:	f000 ff51 	bl	8002b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001c66:	bf00      	nop
 8001c68:	3728      	adds	r7, #40	; 0x28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40006400 	.word	0x40006400
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40020c00 	.word	0x40020c00

08001c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a19      	ldr	r2, [pc, #100]	; (8001d00 <HAL_UART_MspInit+0x84>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d12c      	bne.n	8001cf8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <HAL_UART_MspInit+0x88>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	4a17      	ldr	r2, [pc, #92]	; (8001d04 <HAL_UART_MspInit+0x88>)
 8001ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cac:	6413      	str	r3, [r2, #64]	; 0x40
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_UART_MspInit+0x88>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_UART_MspInit+0x88>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a10      	ldr	r2, [pc, #64]	; (8001d04 <HAL_UART_MspInit+0x88>)
 8001cc4:	f043 0308 	orr.w	r3, r3, #8
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <HAL_UART_MspInit+0x88>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001cd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ce8:	2307      	movs	r3, #7
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <HAL_UART_MspInit+0x8c>)
 8001cf4:	f000 ff08 	bl	8002b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cf8:	bf00      	nop
 8001cfa:	3728      	adds	r7, #40	; 0x28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40004800 	.word	0x40004800
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40020c00 	.word	0x40020c00

08001d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1e:	e7fe      	b.n	8001d1e <HardFault_Handler+0x4>

08001d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <MemManage_Handler+0x4>

08001d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d2a:	e7fe      	b.n	8001d2a <BusFault_Handler+0x4>

08001d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <UsageFault_Handler+0x4>

08001d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d60:	f000 f8d4 	bl	8001f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d6c:	4802      	ldr	r0, [pc, #8]	; (8001d78 <OTG_FS_IRQHandler+0x10>)
 8001d6e:	f001 f9cd 	bl	800310c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	2000183c 	.word	0x2000183c

08001d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d84:	4a14      	ldr	r2, [pc, #80]	; (8001dd8 <_sbrk+0x5c>)
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <_sbrk+0x60>)
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d90:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <_sbrk+0x64>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d102      	bne.n	8001d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d98:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <_sbrk+0x64>)
 8001d9a:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <_sbrk+0x68>)
 8001d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <_sbrk+0x64>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d207      	bcs.n	8001dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dac:	f007 fb5c 	bl	8009468 <__errno>
 8001db0:	4602      	mov	r2, r0
 8001db2:	230c      	movs	r3, #12
 8001db4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dba:	e009      	b.n	8001dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dbc:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <_sbrk+0x64>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dc2:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <_sbrk+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	4a05      	ldr	r2, [pc, #20]	; (8001de0 <_sbrk+0x64>)
 8001dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dce:	68fb      	ldr	r3, [r7, #12]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20020000 	.word	0x20020000
 8001ddc:	00000400 	.word	0x00000400
 8001de0:	20000288 	.word	0x20000288
 8001de4:	20001c48 	.word	0x20001c48

08001de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <SystemInit+0x28>)
 8001dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df2:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <SystemInit+0x28>)
 8001df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dfc:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <SystemInit+0x28>)
 8001dfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e02:	609a      	str	r2, [r3, #8]
#endif
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e1a:	e003      	b.n	8001e24 <LoopCopyDataInit>

08001e1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e22:	3104      	adds	r1, #4

08001e24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e24:	480b      	ldr	r0, [pc, #44]	; (8001e54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e26:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e2c:	d3f6      	bcc.n	8001e1c <CopyDataInit>
  ldr  r2, =_sbss
 8001e2e:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e30:	e002      	b.n	8001e38 <LoopFillZerobss>

08001e32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e34:	f842 3b04 	str.w	r3, [r2], #4

08001e38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e3c:	d3f9      	bcc.n	8001e32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e3e:	f7ff ffd3 	bl	8001de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e42:	f007 fb17 	bl	8009474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e46:	f7fe fd21 	bl	800088c <main>
  bx  lr    
 8001e4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e50:	08009768 	.word	0x08009768
  ldr  r0, =_sdata
 8001e54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e58:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8001e5c:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8001e60:	20001c48 	.word	0x20001c48

08001e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e64:	e7fe      	b.n	8001e64 <ADC_IRQHandler>
	...

08001e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <HAL_Init+0x40>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0d      	ldr	r2, [pc, #52]	; (8001ea8 <HAL_Init+0x40>)
 8001e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <HAL_Init+0x40>)
 8001e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <HAL_Init+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <HAL_Init+0x40>)
 8001e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e90:	2003      	movs	r0, #3
 8001e92:	f000 fdf7 	bl	8002a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e96:	2000      	movs	r0, #0
 8001e98:	f000 f808 	bl	8001eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e9c:	f7ff fe7e 	bl	8001b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023c00 	.word	0x40023c00

08001eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_InitTick+0x54>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_InitTick+0x58>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fe0f 	bl	8002aee <HAL_SYSTICK_Config>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00e      	b.n	8001ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b0f      	cmp	r3, #15
 8001ede:	d80a      	bhi.n	8001ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ee8:	f000 fdd7 	bl	8002a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eec:	4a06      	ldr	r2, [pc, #24]	; (8001f08 <HAL_InitTick+0x5c>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e000      	b.n	8001ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000000 	.word	0x20000000
 8001f04:	20000008 	.word	0x20000008
 8001f08:	20000004 	.word	0x20000004

08001f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_IncTick+0x20>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_IncTick+0x24>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <HAL_IncTick+0x24>)
 8001f1e:	6013      	str	r3, [r2, #0]
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000008 	.word	0x20000008
 8001f30:	20000340 	.word	0x20000340

08001f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return uwTick;
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <HAL_GetTick+0x14>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000340 	.word	0x20000340

08001f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f54:	f7ff ffee 	bl	8001f34 <HAL_GetTick>
 8001f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f64:	d005      	beq.n	8001f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <HAL_Delay+0x40>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4413      	add	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f72:	bf00      	nop
 8001f74:	f7ff ffde 	bl	8001f34 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d8f7      	bhi.n	8001f74 <HAL_Delay+0x28>
  {
  }
}
 8001f84:	bf00      	nop
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000008 	.word	0x20000008

08001f90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e0ef      	b.n	8002182 <HAL_CAN_Init+0x1f2>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d102      	bne.n	8001fb4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff fe1c 	bl	8001bec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0202 	bic.w	r2, r2, #2
 8001fc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fc4:	f7ff ffb6 	bl	8001f34 <HAL_GetTick>
 8001fc8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fca:	e013      	b.n	8001ff4 <HAL_CAN_Init+0x64>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fcc:	f7ff ffb2 	bl	8001f34 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fda:	d90b      	bls.n	8001ff4 <HAL_CAN_Init+0x64>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2205      	movs	r2, #5
 8001fec:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0c6      	b.n	8002182 <HAL_CAN_Init+0x1f2>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1e4      	bne.n	8001fcc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0201 	orr.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002012:	f7ff ff8f 	bl	8001f34 <HAL_GetTick>
 8002016:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002018:	e013      	b.n	8002042 <HAL_CAN_Init+0xb2>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800201a:	f7ff ff8b 	bl	8001f34 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002028:	d90b      	bls.n	8002042 <HAL_CAN_Init+0xb2>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2205      	movs	r2, #5
 800203a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e09f      	b.n	8002182 <HAL_CAN_Init+0x1f2>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0e4      	beq.n	800201a <HAL_CAN_Init+0x8a>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	7e1b      	ldrb	r3, [r3, #24]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d108      	bne.n	800206a <HAL_CAN_Init+0xda>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	e007      	b.n	800207a <HAL_CAN_Init+0xea>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002078:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	7e5b      	ldrb	r3, [r3, #25]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d108      	bne.n	8002094 <HAL_CAN_Init+0x104>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	e007      	b.n	80020a4 <HAL_CAN_Init+0x114>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	7e9b      	ldrb	r3, [r3, #26]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d108      	bne.n	80020be <HAL_CAN_Init+0x12e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0220 	orr.w	r2, r2, #32
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	e007      	b.n	80020ce <HAL_CAN_Init+0x13e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0220 	bic.w	r2, r2, #32
 80020cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	7edb      	ldrb	r3, [r3, #27]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d108      	bne.n	80020e8 <HAL_CAN_Init+0x158>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0210 	bic.w	r2, r2, #16
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	e007      	b.n	80020f8 <HAL_CAN_Init+0x168>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0210 	orr.w	r2, r2, #16
 80020f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	7f1b      	ldrb	r3, [r3, #28]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d108      	bne.n	8002112 <HAL_CAN_Init+0x182>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0208 	orr.w	r2, r2, #8
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	e007      	b.n	8002122 <HAL_CAN_Init+0x192>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0208 	bic.w	r2, r2, #8
 8002120:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	7f5b      	ldrb	r3, [r3, #29]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d108      	bne.n	800213c <HAL_CAN_Init+0x1ac>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 0204 	orr.w	r2, r2, #4
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	e007      	b.n	800214c <HAL_CAN_Init+0x1bc>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0204 	bic.w	r2, r2, #4
 800214a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	ea42 0103 	orr.w	r1, r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	1e5a      	subs	r2, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021a2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80021a4:	7cfb      	ldrb	r3, [r7, #19]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d003      	beq.n	80021b2 <HAL_CAN_ConfigFilter+0x26>
 80021aa:	7cfb      	ldrb	r3, [r7, #19]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	f040 80be 	bne.w	800232e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80021b2:	4b65      	ldr	r3, [pc, #404]	; (8002348 <HAL_CAN_ConfigFilter+0x1bc>)
 80021b4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021bc:	f043 0201 	orr.w	r2, r3, #1
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	021b      	lsls	r3, r3, #8
 80021e2:	431a      	orrs	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	2201      	movs	r2, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	43db      	mvns	r3, r3
 8002204:	401a      	ands	r2, r3
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d123      	bne.n	800225c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	43db      	mvns	r3, r3
 800221e:	401a      	ands	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002236:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	3248      	adds	r2, #72	; 0x48
 800223c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002250:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002252:	6979      	ldr	r1, [r7, #20]
 8002254:	3348      	adds	r3, #72	; 0x48
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d122      	bne.n	80022aa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	431a      	orrs	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002284:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	3248      	adds	r2, #72	; 0x48
 800228a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800229e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022a0:	6979      	ldr	r1, [r7, #20]
 80022a2:	3348      	adds	r3, #72	; 0x48
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	440b      	add	r3, r1
 80022a8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	401a      	ands	r2, r3
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80022c4:	e007      	b.n	80022d6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	401a      	ands	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80022f0:	e007      	b.n	8002302 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d107      	bne.n	800231a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	431a      	orrs	r2, r3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002320:	f023 0201 	bic.w	r2, r3, #1
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	e006      	b.n	800233c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
  }
}
 800233c:	4618      	mov	r0, r3
 800233e:	371c      	adds	r7, #28
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	40006400 	.word	0x40006400

0800234c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b01      	cmp	r3, #1
 800235e:	d12f      	bne.n	80023c0 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002378:	f7ff fddc 	bl	8001f34 <HAL_GetTick>
 800237c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800237e:	e013      	b.n	80023a8 <HAL_CAN_Start+0x5c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002380:	f7ff fdd8 	bl	8001f34 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800238e:	d90b      	bls.n	80023a8 <HAL_CAN_Start+0x5c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2205      	movs	r2, #5
 80023a0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e012      	b.n	80023ce <HAL_CAN_Start+0x82>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1e4      	bne.n	8002380 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	e006      	b.n	80023ce <HAL_CAN_Start+0x82>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
  }
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b084      	sub	sp, #16
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d134      	bne.n	8002454 <HAL_CAN_Stop+0x7e>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0201 	orr.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023fa:	f7ff fd9b 	bl	8001f34 <HAL_GetTick>
 80023fe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002400:	e013      	b.n	800242a <HAL_CAN_Stop+0x54>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002402:	f7ff fd97 	bl	8001f34 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002410:	d90b      	bls.n	800242a <HAL_CAN_Stop+0x54>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2205      	movs	r2, #5
 8002422:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e01b      	b.n	8002462 <HAL_CAN_Stop+0x8c>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0e4      	beq.n	8002402 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0202 	bic.w	r2, r2, #2
 8002446:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	e006      	b.n	8002462 <HAL_CAN_Stop+0x8c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
  }
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800246a:	b480      	push	{r7}
 800246c:	b089      	sub	sp, #36	; 0x24
 800246e:	af00      	add	r7, sp, #0
 8002470:	60f8      	str	r0, [r7, #12]
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
 8002476:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800247e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002488:	7ffb      	ldrb	r3, [r7, #31]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d003      	beq.n	8002496 <HAL_CAN_AddTxMessage+0x2c>
 800248e:	7ffb      	ldrb	r3, [r7, #31]
 8002490:	2b02      	cmp	r3, #2
 8002492:	f040 80b8 	bne.w	8002606 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10a      	bne.n	80024b6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d105      	bne.n	80024b6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80a0 	beq.w	80025f6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	0e1b      	lsrs	r3, r3, #24
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d907      	bls.n	80024d6 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e09e      	b.n	8002614 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80024d6:	2201      	movs	r2, #1
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	409a      	lsls	r2, r3
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10d      	bne.n	8002504 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80024f2:	68f9      	ldr	r1, [r7, #12]
 80024f4:	6809      	ldr	r1, [r1, #0]
 80024f6:	431a      	orrs	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	3318      	adds	r3, #24
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	440b      	add	r3, r1
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	e00f      	b.n	8002524 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800250e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002514:	68f9      	ldr	r1, [r7, #12]
 8002516:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002518:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	3318      	adds	r3, #24
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	440b      	add	r3, r1
 8002522:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6819      	ldr	r1, [r3, #0]
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	3318      	adds	r3, #24
 8002530:	011b      	lsls	r3, r3, #4
 8002532:	440b      	add	r3, r1
 8002534:	3304      	adds	r3, #4
 8002536:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	7d1b      	ldrb	r3, [r3, #20]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d111      	bne.n	8002564 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	3318      	adds	r3, #24
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	4413      	add	r3, r2
 800254c:	3304      	adds	r3, #4
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	6811      	ldr	r1, [r2, #0]
 8002554:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	3318      	adds	r3, #24
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	440b      	add	r3, r1
 8002560:	3304      	adds	r3, #4
 8002562:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3307      	adds	r3, #7
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	061a      	lsls	r2, r3, #24
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3306      	adds	r3, #6
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	041b      	lsls	r3, r3, #16
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3305      	adds	r3, #5
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	021b      	lsls	r3, r3, #8
 800257e:	4313      	orrs	r3, r2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	3204      	adds	r2, #4
 8002584:	7812      	ldrb	r2, [r2, #0]
 8002586:	4610      	mov	r0, r2
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	6811      	ldr	r1, [r2, #0]
 800258c:	ea43 0200 	orr.w	r2, r3, r0
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	440b      	add	r3, r1
 8002596:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800259a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3303      	adds	r3, #3
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	061a      	lsls	r2, r3, #24
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3302      	adds	r3, #2
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	041b      	lsls	r3, r3, #16
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3301      	adds	r3, #1
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	4313      	orrs	r3, r2
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	7812      	ldrb	r2, [r2, #0]
 80025bc:	4610      	mov	r0, r2
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	6811      	ldr	r1, [r2, #0]
 80025c2:	ea43 0200 	orr.w	r2, r3, r0
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	440b      	add	r3, r1
 80025cc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80025d0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	3318      	adds	r3, #24
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	4413      	add	r3, r2
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	6811      	ldr	r1, [r2, #0]
 80025e4:	f043 0201 	orr.w	r2, r3, #1
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	3318      	adds	r3, #24
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	440b      	add	r3, r1
 80025f0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e00e      	b.n	8002614 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e006      	b.n	8002614 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
  }
}
 8002614:	4618      	mov	r0, r3
 8002616:	3724      	adds	r7, #36	; 0x24
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002620:	b480      	push	{r7}
 8002622:	b087      	sub	sp, #28
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002634:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002636:	7dfb      	ldrb	r3, [r7, #23]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d003      	beq.n	8002644 <HAL_CAN_GetRxMessage+0x24>
 800263c:	7dfb      	ldrb	r3, [r7, #23]
 800263e:	2b02      	cmp	r3, #2
 8002640:	f040 80f3 	bne.w	800282a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10e      	bne.n	8002668 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d116      	bne.n	8002686 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0e7      	b.n	8002838 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d107      	bne.n	8002686 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e0d8      	b.n	8002838 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	331b      	adds	r3, #27
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	4413      	add	r3, r2
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0204 	and.w	r2, r3, #4
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10c      	bne.n	80026be <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	331b      	adds	r3, #27
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	4413      	add	r3, r2
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	0d5b      	lsrs	r3, r3, #21
 80026b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	e00b      	b.n	80026d6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	331b      	adds	r3, #27
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	4413      	add	r3, r2
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	08db      	lsrs	r3, r3, #3
 80026ce:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	331b      	adds	r3, #27
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	4413      	add	r3, r2
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0202 	and.w	r2, r3, #2
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	331b      	adds	r3, #27
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	4413      	add	r3, r2
 80026f8:	3304      	adds	r3, #4
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 020f 	and.w	r2, r3, #15
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	331b      	adds	r3, #27
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	4413      	add	r3, r2
 8002710:	3304      	adds	r3, #4
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	0a1b      	lsrs	r3, r3, #8
 8002716:	b2da      	uxtb	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	331b      	adds	r3, #27
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	4413      	add	r3, r2
 8002728:	3304      	adds	r3, #4
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	0c1b      	lsrs	r3, r3, #16
 800272e:	b29a      	uxth	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	4413      	add	r3, r2
 800273e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	4413      	add	r3, r2
 8002754:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	0a1a      	lsrs	r2, r3, #8
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	3301      	adds	r3, #1
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	4413      	add	r3, r2
 800276e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	0c1a      	lsrs	r2, r3, #16
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	3302      	adds	r3, #2
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	4413      	add	r3, r2
 8002788:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	0e1a      	lsrs	r2, r3, #24
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	3303      	adds	r3, #3
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	3304      	adds	r3, #4
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	4413      	add	r3, r2
 80027ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	0a1a      	lsrs	r2, r3, #8
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	3305      	adds	r3, #5
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	0c1a      	lsrs	r2, r3, #16
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	3306      	adds	r3, #6
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	0e1a      	lsrs	r2, r3, #24
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	3307      	adds	r3, #7
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d108      	bne.n	8002816 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0220 	orr.w	r2, r2, #32
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	e007      	b.n	8002826 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 0220 	orr.w	r2, r2, #32
 8002824:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	e006      	b.n	8002838 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
  }
}
 8002838:	4618      	mov	r0, r3
 800283a:	371c      	adds	r7, #28
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002858:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800285a:	7afb      	ldrb	r3, [r7, #11]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d002      	beq.n	8002866 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002860:	7afb      	ldrb	r3, [r7, #11]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d10f      	bne.n	8002886 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d106      	bne.n	800287a <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	e005      	b.n	8002886 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002886:	68fb      	ldr	r3, [r7, #12]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_CAN_GetState>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL state
  */
HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  HAL_CAN_StateTypeDef state = hcan->State;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028a2:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_CAN_STATE_READY) ||
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d002      	beq.n	80028b0 <HAL_CAN_GetState+0x1c>
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d112      	bne.n	80028d6 <HAL_CAN_GetState+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check sleep mode acknowledge flag */
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <HAL_CAN_GetState+0x30>
    {
      /* Sleep mode is active */
      state = HAL_CAN_STATE_SLEEP_ACTIVE;
 80028be:	2304      	movs	r3, #4
 80028c0:	73fb      	strb	r3, [r7, #15]
 80028c2:	e008      	b.n	80028d6 <HAL_CAN_GetState+0x42>
    }
    /* Check sleep mode request flag */
    else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_CAN_GetState+0x42>
    {
      /* Sleep mode request is pending */
      state = HAL_CAN_STATE_SLEEP_PENDING;
 80028d2:	2303      	movs	r3, #3
 80028d4:	73fb      	strb	r3, [r7, #15]
      /* Neither sleep mode request nor sleep mode acknowledge */
    }
  }

  /* Return CAN state */
  return state;
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002900:	4013      	ands	r3, r2
 8002902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800290c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002916:	4a04      	ldr	r2, [pc, #16]	; (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	60d3      	str	r3, [r2, #12]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <__NVIC_GetPriorityGrouping+0x18>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	f003 0307 	and.w	r3, r3, #7
}
 800293a:	4618      	mov	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	2b00      	cmp	r3, #0
 8002958:	db0b      	blt.n	8002972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	f003 021f 	and.w	r2, r3, #31
 8002960:	4907      	ldr	r1, [pc, #28]	; (8002980 <__NVIC_EnableIRQ+0x38>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	2001      	movs	r0, #1
 800296a:	fa00 f202 	lsl.w	r2, r0, r2
 800296e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000e100 	.word	0xe000e100

08002984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	6039      	str	r1, [r7, #0]
 800298e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002994:	2b00      	cmp	r3, #0
 8002996:	db0a      	blt.n	80029ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	490c      	ldr	r1, [pc, #48]	; (80029d0 <__NVIC_SetPriority+0x4c>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	0112      	lsls	r2, r2, #4
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	440b      	add	r3, r1
 80029a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029ac:	e00a      	b.n	80029c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4908      	ldr	r1, [pc, #32]	; (80029d4 <__NVIC_SetPriority+0x50>)
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	3b04      	subs	r3, #4
 80029bc:	0112      	lsls	r2, r2, #4
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	440b      	add	r3, r1
 80029c2:	761a      	strb	r2, [r3, #24]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000e100 	.word	0xe000e100
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d8:	b480      	push	{r7}
 80029da:	b089      	sub	sp, #36	; 0x24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f1c3 0307 	rsb	r3, r3, #7
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	bf28      	it	cs
 80029f6:	2304      	movcs	r3, #4
 80029f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3304      	adds	r3, #4
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	d902      	bls.n	8002a08 <NVIC_EncodePriority+0x30>
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	3b03      	subs	r3, #3
 8002a06:	e000      	b.n	8002a0a <NVIC_EncodePriority+0x32>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43da      	mvns	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2a:	43d9      	mvns	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a30:	4313      	orrs	r3, r2
         );
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3724      	adds	r7, #36	; 0x24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a50:	d301      	bcc.n	8002a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a52:	2301      	movs	r3, #1
 8002a54:	e00f      	b.n	8002a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a56:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <SysTick_Config+0x40>)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a5e:	210f      	movs	r1, #15
 8002a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a64:	f7ff ff8e 	bl	8002984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <SysTick_Config+0x40>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a6e:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <SysTick_Config+0x40>)
 8002a70:	2207      	movs	r2, #7
 8002a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	e000e010 	.word	0xe000e010

08002a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ff29 	bl	80028e4 <__NVIC_SetPriorityGrouping>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b086      	sub	sp, #24
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aac:	f7ff ff3e 	bl	800292c <__NVIC_GetPriorityGrouping>
 8002ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	6978      	ldr	r0, [r7, #20]
 8002ab8:	f7ff ff8e 	bl	80029d8 <NVIC_EncodePriority>
 8002abc:	4602      	mov	r2, r0
 8002abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff5d 	bl	8002984 <__NVIC_SetPriority>
}
 8002aca:	bf00      	nop
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff31 	bl	8002948 <__NVIC_EnableIRQ>
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ffa2 	bl	8002a40 <SysTick_Config>
 8002afc:	4603      	mov	r3, r0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b089      	sub	sp, #36	; 0x24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
 8002b22:	e165      	b.n	8002df0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b24:	2201      	movs	r2, #1
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4013      	ands	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	f040 8154 	bne.w	8002dea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d00b      	beq.n	8002b62 <HAL_GPIO_Init+0x5a>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d007      	beq.n	8002b62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b56:	2b11      	cmp	r3, #17
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b12      	cmp	r3, #18
 8002b60:	d130      	bne.n	8002bc4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b98:	2201      	movs	r2, #1
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	f003 0201 	and.w	r2, r3, #1
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	2203      	movs	r2, #3
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_Init+0xfc>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b12      	cmp	r3, #18
 8002c02:	d123      	bne.n	8002c4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	08da      	lsrs	r2, r3, #3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3208      	adds	r2, #8
 8002c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	220f      	movs	r2, #15
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	08da      	lsrs	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3208      	adds	r2, #8
 8002c46:	69b9      	ldr	r1, [r7, #24]
 8002c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	2203      	movs	r2, #3
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 0203 	and.w	r2, r3, #3
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80ae 	beq.w	8002dea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	4b5c      	ldr	r3, [pc, #368]	; (8002e04 <HAL_GPIO_Init+0x2fc>)
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	4a5b      	ldr	r2, [pc, #364]	; (8002e04 <HAL_GPIO_Init+0x2fc>)
 8002c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c9e:	4b59      	ldr	r3, [pc, #356]	; (8002e04 <HAL_GPIO_Init+0x2fc>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002caa:	4a57      	ldr	r2, [pc, #348]	; (8002e08 <HAL_GPIO_Init+0x300>)
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	089b      	lsrs	r3, r3, #2
 8002cb0:	3302      	adds	r3, #2
 8002cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	220f      	movs	r2, #15
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4e      	ldr	r2, [pc, #312]	; (8002e0c <HAL_GPIO_Init+0x304>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d025      	beq.n	8002d22 <HAL_GPIO_Init+0x21a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a4d      	ldr	r2, [pc, #308]	; (8002e10 <HAL_GPIO_Init+0x308>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d01f      	beq.n	8002d1e <HAL_GPIO_Init+0x216>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a4c      	ldr	r2, [pc, #304]	; (8002e14 <HAL_GPIO_Init+0x30c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d019      	beq.n	8002d1a <HAL_GPIO_Init+0x212>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a4b      	ldr	r2, [pc, #300]	; (8002e18 <HAL_GPIO_Init+0x310>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d013      	beq.n	8002d16 <HAL_GPIO_Init+0x20e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a4a      	ldr	r2, [pc, #296]	; (8002e1c <HAL_GPIO_Init+0x314>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d00d      	beq.n	8002d12 <HAL_GPIO_Init+0x20a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a49      	ldr	r2, [pc, #292]	; (8002e20 <HAL_GPIO_Init+0x318>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d007      	beq.n	8002d0e <HAL_GPIO_Init+0x206>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a48      	ldr	r2, [pc, #288]	; (8002e24 <HAL_GPIO_Init+0x31c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d101      	bne.n	8002d0a <HAL_GPIO_Init+0x202>
 8002d06:	2306      	movs	r3, #6
 8002d08:	e00c      	b.n	8002d24 <HAL_GPIO_Init+0x21c>
 8002d0a:	2307      	movs	r3, #7
 8002d0c:	e00a      	b.n	8002d24 <HAL_GPIO_Init+0x21c>
 8002d0e:	2305      	movs	r3, #5
 8002d10:	e008      	b.n	8002d24 <HAL_GPIO_Init+0x21c>
 8002d12:	2304      	movs	r3, #4
 8002d14:	e006      	b.n	8002d24 <HAL_GPIO_Init+0x21c>
 8002d16:	2303      	movs	r3, #3
 8002d18:	e004      	b.n	8002d24 <HAL_GPIO_Init+0x21c>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e002      	b.n	8002d24 <HAL_GPIO_Init+0x21c>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <HAL_GPIO_Init+0x21c>
 8002d22:	2300      	movs	r3, #0
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	f002 0203 	and.w	r2, r2, #3
 8002d2a:	0092      	lsls	r2, r2, #2
 8002d2c:	4093      	lsls	r3, r2
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d34:	4934      	ldr	r1, [pc, #208]	; (8002e08 <HAL_GPIO_Init+0x300>)
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	089b      	lsrs	r3, r3, #2
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d42:	4b39      	ldr	r3, [pc, #228]	; (8002e28 <HAL_GPIO_Init+0x320>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d66:	4a30      	ldr	r2, [pc, #192]	; (8002e28 <HAL_GPIO_Init+0x320>)
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d6c:	4b2e      	ldr	r3, [pc, #184]	; (8002e28 <HAL_GPIO_Init+0x320>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d90:	4a25      	ldr	r2, [pc, #148]	; (8002e28 <HAL_GPIO_Init+0x320>)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d96:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <HAL_GPIO_Init+0x320>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dba:	4a1b      	ldr	r2, [pc, #108]	; (8002e28 <HAL_GPIO_Init+0x320>)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_GPIO_Init+0x320>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002de4:	4a10      	ldr	r2, [pc, #64]	; (8002e28 <HAL_GPIO_Init+0x320>)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3301      	adds	r3, #1
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	2b0f      	cmp	r3, #15
 8002df4:	f67f ae96 	bls.w	8002b24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002df8:	bf00      	nop
 8002dfa:	3724      	adds	r7, #36	; 0x24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40013800 	.word	0x40013800
 8002e0c:	40020000 	.word	0x40020000
 8002e10:	40020400 	.word	0x40020400
 8002e14:	40020800 	.word	0x40020800
 8002e18:	40020c00 	.word	0x40020c00
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40021400 	.word	0x40021400
 8002e24:	40021800 	.word	0x40021800
 8002e28:	40013c00 	.word	0x40013c00

08002e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	807b      	strh	r3, [r7, #2]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e3c:	787b      	ldrb	r3, [r7, #1]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e42:	887a      	ldrh	r2, [r7, #2]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e48:	e003      	b.n	8002e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e4a:	887b      	ldrh	r3, [r7, #2]
 8002e4c:	041a      	lsls	r2, r3, #16
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	619a      	str	r2, [r3, #24]
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e60:	b08f      	sub	sp, #60	; 0x3c
 8002e62:	af0a      	add	r7, sp, #40	; 0x28
 8002e64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e116      	b.n	800309e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f005 ff94 	bl	8008db8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2203      	movs	r2, #3
 8002e94:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f002 fec1 	bl	8005c36 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	603b      	str	r3, [r7, #0]
 8002eba:	687e      	ldr	r6, [r7, #4]
 8002ebc:	466d      	mov	r5, sp
 8002ebe:	f106 0410 	add.w	r4, r6, #16
 8002ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ece:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ed2:	1d33      	adds	r3, r6, #4
 8002ed4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ed6:	6838      	ldr	r0, [r7, #0]
 8002ed8:	f002 fd98 	bl	8005a0c <USB_CoreInit>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d005      	beq.n	8002eee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e0d7      	b.n	800309e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f002 feaf 	bl	8005c58 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efa:	2300      	movs	r3, #0
 8002efc:	73fb      	strb	r3, [r7, #15]
 8002efe:	e04a      	b.n	8002f96 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f00:	7bfa      	ldrb	r2, [r7, #15]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	1a9b      	subs	r3, r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	333d      	adds	r3, #61	; 0x3d
 8002f10:	2201      	movs	r2, #1
 8002f12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f14:	7bfa      	ldrb	r2, [r7, #15]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	333c      	adds	r3, #60	; 0x3c
 8002f24:	7bfa      	ldrb	r2, [r7, #15]
 8002f26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f28:	7bfa      	ldrb	r2, [r7, #15]
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	b298      	uxth	r0, r3
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	3342      	adds	r3, #66	; 0x42
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	333f      	adds	r3, #63	; 0x3f
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f54:	7bfa      	ldrb	r2, [r7, #15]
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	1a9b      	subs	r3, r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	3344      	adds	r3, #68	; 0x44
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f68:	7bfa      	ldrb	r2, [r7, #15]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	3348      	adds	r3, #72	; 0x48
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f7c:	7bfa      	ldrb	r2, [r7, #15]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	3350      	adds	r3, #80	; 0x50
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	3301      	adds	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
 8002f96:	7bfa      	ldrb	r2, [r7, #15]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d3af      	bcc.n	8002f00 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	73fb      	strb	r3, [r7, #15]
 8002fa4:	e044      	b.n	8003030 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fa6:	7bfa      	ldrb	r2, [r7, #15]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002fce:	7bfa      	ldrb	r2, [r7, #15]
 8002fd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002fd2:	7bfa      	ldrb	r2, [r7, #15]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	440b      	add	r3, r1
 8002fe0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fe8:	7bfa      	ldrb	r2, [r7, #15]
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	1a9b      	subs	r3, r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ffe:	7bfa      	ldrb	r2, [r7, #15]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	1a9b      	subs	r3, r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003014:	7bfa      	ldrb	r2, [r7, #15]
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	1a9b      	subs	r3, r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	3301      	adds	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
 8003030:	7bfa      	ldrb	r2, [r7, #15]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	429a      	cmp	r2, r3
 8003038:	d3b5      	bcc.n	8002fa6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	687e      	ldr	r6, [r7, #4]
 8003042:	466d      	mov	r5, sp
 8003044:	f106 0410 	add.w	r4, r6, #16
 8003048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800304a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800304c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800304e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003050:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003054:	e885 0003 	stmia.w	r5, {r0, r1}
 8003058:	1d33      	adds	r3, r6, #4
 800305a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800305c:	6838      	ldr	r0, [r7, #0]
 800305e:	f002 fe25 	bl	8005cac <USB_DevInit>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e014      	b.n	800309e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	2b01      	cmp	r3, #1
 800308a:	d102      	bne.n	8003092 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f001 f891 	bl	80041b4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f003 fe60 	bl	8006d5c <USB_DevDisconnect>

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_PCD_Start+0x1c>
 80030be:	2302      	movs	r3, #2
 80030c0:	e020      	b.n	8003104 <HAL_PCD_Start+0x5e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d109      	bne.n	80030e6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d005      	beq.n	80030e6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f002 fd92 	bl	8005c14 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f003 fe10 	bl	8006d1a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800310c:	b590      	push	{r4, r7, lr}
 800310e:	b08d      	sub	sp, #52	; 0x34
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f003 fece 	bl	8006ec4 <USB_GetMode>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 83ca 	bne.w	80038c4 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f003 fe32 	bl	8006d9e <USB_ReadInterrupts>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 83c0 	beq.w	80038c2 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f003 fe29 	bl	8006d9e <USB_ReadInterrupts>
 800314c:	4603      	mov	r3, r0
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b02      	cmp	r3, #2
 8003154:	d107      	bne.n	8003166 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f002 0202 	and.w	r2, r2, #2
 8003164:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f003 fe17 	bl	8006d9e <USB_ReadInterrupts>
 8003170:	4603      	mov	r3, r0
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b10      	cmp	r3, #16
 8003178:	d161      	bne.n	800323e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699a      	ldr	r2, [r3, #24]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0210 	bic.w	r2, r2, #16
 8003188:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	f003 020f 	and.w	r2, r3, #15
 8003196:	4613      	mov	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	4413      	add	r3, r2
 80031a6:	3304      	adds	r3, #4
 80031a8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	0c5b      	lsrs	r3, r3, #17
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d124      	bne.n	8003200 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80031bc:	4013      	ands	r3, r2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d035      	beq.n	800322e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	091b      	lsrs	r3, r3, #4
 80031ca:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80031cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	6a38      	ldr	r0, [r7, #32]
 80031d6:	f003 fc7d 	bl	8006ad4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	091b      	lsrs	r3, r3, #4
 80031e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031e6:	441a      	add	r2, r3
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	699a      	ldr	r2, [r3, #24]
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	091b      	lsrs	r3, r3, #4
 80031f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031f8:	441a      	add	r2, r3
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	619a      	str	r2, [r3, #24]
 80031fe:	e016      	b.n	800322e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	0c5b      	lsrs	r3, r3, #17
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	2b06      	cmp	r3, #6
 800320a:	d110      	bne.n	800322e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003212:	2208      	movs	r2, #8
 8003214:	4619      	mov	r1, r3
 8003216:	6a38      	ldr	r0, [r7, #32]
 8003218:	f003 fc5c 	bl	8006ad4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	699a      	ldr	r2, [r3, #24]
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	091b      	lsrs	r3, r3, #4
 8003224:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003228:	441a      	add	r2, r3
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699a      	ldr	r2, [r3, #24]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f042 0210 	orr.w	r2, r2, #16
 800323c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f003 fdab 	bl	8006d9e <USB_ReadInterrupts>
 8003248:	4603      	mov	r3, r0
 800324a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800324e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003252:	d16e      	bne.n	8003332 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f003 fdb1 	bl	8006dc4 <USB_ReadDevAllOutEpInterrupt>
 8003262:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003264:	e062      	b.n	800332c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d057      	beq.n	8003320 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	4611      	mov	r1, r2
 800327a:	4618      	mov	r0, r3
 800327c:	f003 fdd6 	bl	8006e2c <USB_ReadDevOutEPInterrupt>
 8003280:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00c      	beq.n	80032a6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	4413      	add	r3, r2
 8003294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003298:	461a      	mov	r2, r3
 800329a:	2301      	movs	r3, #1
 800329c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800329e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 fddd 	bl	8003e60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00c      	beq.n	80032ca <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032bc:	461a      	mov	r2, r3
 80032be:	2308      	movs	r3, #8
 80032c0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80032c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fed7 	bl	8004078 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e0:	461a      	mov	r2, r3
 80032e2:	2310      	movs	r3, #16
 80032e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fc:	461a      	mov	r2, r3
 80032fe:	2320      	movs	r3, #32
 8003300:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d009      	beq.n	8003320 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	4413      	add	r3, r2
 8003314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003318:	461a      	mov	r2, r3
 800331a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800331e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	3301      	adds	r3, #1
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003328:	085b      	lsrs	r3, r3, #1
 800332a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800332c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332e:	2b00      	cmp	r3, #0
 8003330:	d199      	bne.n	8003266 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f003 fd31 	bl	8006d9e <USB_ReadInterrupts>
 800333c:	4603      	mov	r3, r0
 800333e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003342:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003346:	f040 80c0 	bne.w	80034ca <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f003 fd52 	bl	8006df8 <USB_ReadDevAllInEpInterrupt>
 8003354:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800335a:	e0b2      	b.n	80034c2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 80a7 	beq.w	80034b6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	4611      	mov	r1, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f003 fd78 	bl	8006e68 <USB_ReadDevInEPInterrupt>
 8003378:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d057      	beq.n	8003434 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	2201      	movs	r2, #1
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	43db      	mvns	r3, r3
 800339e:	69f9      	ldr	r1, [r7, #28]
 80033a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033a4:	4013      	ands	r3, r2
 80033a6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b4:	461a      	mov	r2, r3
 80033b6:	2301      	movs	r3, #1
 80033b8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d132      	bne.n	8003428 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	3348      	adds	r3, #72	; 0x48
 80033d2:	6819      	ldr	r1, [r3, #0]
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d8:	4613      	mov	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4403      	add	r3, r0
 80033e2:	3344      	adds	r3, #68	; 0x44
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4419      	add	r1, r3
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4403      	add	r3, r0
 80033f6:	3348      	adds	r3, #72	; 0x48
 80033f8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d113      	bne.n	8003428 <HAL_PCD_IRQHandler+0x31c>
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	3350      	adds	r3, #80	; 0x50
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d108      	bne.n	8003428 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003420:	461a      	mov	r2, r3
 8003422:	2101      	movs	r1, #1
 8003424:	f003 fd80 	bl	8006f28 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	b2db      	uxtb	r3, r3
 800342c:	4619      	mov	r1, r3
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f005 fd51 	bl	8008ed6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d008      	beq.n	8003450 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	4413      	add	r3, r2
 8003446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800344a:	461a      	mov	r2, r3
 800344c:	2308      	movs	r3, #8
 800344e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b00      	cmp	r3, #0
 8003458:	d008      	beq.n	800346c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	4413      	add	r3, r2
 8003462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003466:	461a      	mov	r2, r3
 8003468:	2310      	movs	r3, #16
 800346a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	4413      	add	r3, r2
 800347e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003482:	461a      	mov	r2, r3
 8003484:	2340      	movs	r3, #64	; 0x40
 8003486:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d008      	beq.n	80034a4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	4413      	add	r3, r2
 800349a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800349e:	461a      	mov	r2, r3
 80034a0:	2302      	movs	r3, #2
 80034a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 fc48 	bl	8003d46 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	3301      	adds	r3, #1
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034be:	085b      	lsrs	r3, r3, #1
 80034c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f47f af49 	bne.w	800335c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f003 fc65 	bl	8006d9e <USB_ReadInterrupts>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034de:	d122      	bne.n	8003526 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	69fa      	ldr	r2, [r7, #28]
 80034ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034ee:	f023 0301 	bic.w	r3, r3, #1
 80034f2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d108      	bne.n	8003510 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003506:	2100      	movs	r1, #0
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f005 ff33 	bl	8009374 <HAL_PCDEx_LPM_Callback>
 800350e:	e002      	b.n	8003516 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f005 fd57 	bl	8008fc4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695a      	ldr	r2, [r3, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003524:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f003 fc37 	bl	8006d9e <USB_ReadInterrupts>
 8003530:	4603      	mov	r3, r0
 8003532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800353a:	d112      	bne.n	8003562 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b01      	cmp	r3, #1
 800354a:	d102      	bne.n	8003552 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f005 fd13 	bl	8008f78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695a      	ldr	r2, [r3, #20]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003560:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f003 fc19 	bl	8006d9e <USB_ReadInterrupts>
 800356c:	4603      	mov	r3, r0
 800356e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003576:	d121      	bne.n	80035bc <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695a      	ldr	r2, [r3, #20]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003586:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800358e:	2b00      	cmp	r3, #0
 8003590:	d111      	bne.n	80035b6 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a0:	089b      	lsrs	r3, r3, #2
 80035a2:	f003 020f 	and.w	r2, r3, #15
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80035ac:	2101      	movs	r1, #1
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f005 fee0 	bl	8009374 <HAL_PCDEx_LPM_Callback>
 80035b4:	e002      	b.n	80035bc <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f005 fcde 	bl	8008f78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f003 fbec 	bl	8006d9e <USB_ReadInterrupts>
 80035c6:	4603      	mov	r3, r0
 80035c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d0:	f040 80c7 	bne.w	8003762 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035e2:	f023 0301 	bic.w	r3, r3, #1
 80035e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2110      	movs	r1, #16
 80035ee:	4618      	mov	r0, r3
 80035f0:	f002 fcba 	bl	8005f68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035f4:	2300      	movs	r3, #0
 80035f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035f8:	e056      	b.n	80036a8 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	4413      	add	r3, r2
 8003602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003606:	461a      	mov	r2, r3
 8003608:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800360c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800360e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	4413      	add	r3, r2
 8003616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800361e:	0151      	lsls	r1, r2, #5
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	440a      	add	r2, r1
 8003624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003628:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800362c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800362e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	4413      	add	r3, r2
 8003636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800363e:	0151      	lsls	r1, r2, #5
 8003640:	69fa      	ldr	r2, [r7, #28]
 8003642:	440a      	add	r2, r1
 8003644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003648:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800364c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800364e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	4413      	add	r3, r2
 8003656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365a:	461a      	mov	r2, r3
 800365c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003660:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	4413      	add	r3, r2
 800366a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003672:	0151      	lsls	r1, r2, #5
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	440a      	add	r2, r1
 8003678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800367c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003680:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003684:	015a      	lsls	r2, r3, #5
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	4413      	add	r3, r2
 800368a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003692:	0151      	lsls	r1, r2, #5
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	440a      	add	r2, r1
 8003698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800369c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80036a0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a4:	3301      	adds	r3, #1
 80036a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d3a3      	bcc.n	80035fa <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	69fa      	ldr	r2, [r7, #28]
 80036bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036c0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80036c4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d016      	beq.n	80036fc <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d8:	69fa      	ldr	r2, [r7, #28]
 80036da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036de:	f043 030b 	orr.w	r3, r3, #11
 80036e2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	69fa      	ldr	r2, [r7, #28]
 80036f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036f4:	f043 030b 	orr.w	r3, r3, #11
 80036f8:	6453      	str	r3, [r2, #68]	; 0x44
 80036fa:	e015      	b.n	8003728 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	69fa      	ldr	r2, [r7, #28]
 8003706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800370a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800370e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003712:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003722:	f043 030b 	orr.w	r3, r3, #11
 8003726:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	69fa      	ldr	r2, [r7, #28]
 8003732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003736:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800373a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6818      	ldr	r0, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800374c:	461a      	mov	r2, r3
 800374e:	f003 fbeb 	bl	8006f28 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003760:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f003 fb19 	bl	8006d9e <USB_ReadInterrupts>
 800376c:	4603      	mov	r3, r0
 800376e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003776:	d124      	bne.n	80037c2 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f003 fbaf 	bl	8006ee0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f002 fc4f 	bl	800602a <USB_GetDevSpeed>
 800378c:	4603      	mov	r3, r0
 800378e:	461a      	mov	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681c      	ldr	r4, [r3, #0]
 8003798:	f000 fe16 	bl	80043c8 <HAL_RCC_GetHCLKFreq>
 800379c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	461a      	mov	r2, r3
 80037a6:	4620      	mov	r0, r4
 80037a8:	f002 f992 	bl	8005ad0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f005 fbba 	bl	8008f26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695a      	ldr	r2, [r3, #20]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80037c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f003 fae9 	bl	8006d9e <USB_ReadInterrupts>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d10a      	bne.n	80037ec <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f005 fb97 	bl	8008f0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695a      	ldr	r2, [r3, #20]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f002 0208 	and.w	r2, r2, #8
 80037ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f003 fad4 	bl	8006d9e <USB_ReadInterrupts>
 80037f6:	4603      	mov	r3, r0
 80037f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003800:	d10f      	bne.n	8003822 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003802:	2300      	movs	r3, #0
 8003804:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	b2db      	uxtb	r3, r3
 800380a:	4619      	mov	r1, r3
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f005 fbf9 	bl	8009004 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695a      	ldr	r2, [r3, #20]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003820:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f003 fab9 	bl	8006d9e <USB_ReadInterrupts>
 800382c:	4603      	mov	r3, r0
 800382e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003832:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003836:	d10f      	bne.n	8003858 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	b2db      	uxtb	r3, r3
 8003840:	4619      	mov	r1, r3
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f005 fbcc 	bl	8008fe0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695a      	ldr	r2, [r3, #20]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003856:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f003 fa9e 	bl	8006d9e <USB_ReadInterrupts>
 8003862:	4603      	mov	r3, r0
 8003864:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386c:	d10a      	bne.n	8003884 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f005 fbda 	bl	8009028 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695a      	ldr	r2, [r3, #20]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003882:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f003 fa88 	bl	8006d9e <USB_ReadInterrupts>
 800388e:	4603      	mov	r3, r0
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b04      	cmp	r3, #4
 8003896:	d115      	bne.n	80038c4 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d002      	beq.n	80038b0 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f005 fbca 	bl	8009044 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6859      	ldr	r1, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	430a      	orrs	r2, r1
 80038be:	605a      	str	r2, [r3, #4]
 80038c0:	e000      	b.n	80038c4 <HAL_PCD_IRQHandler+0x7b8>
      return;
 80038c2:	bf00      	nop
    }
  }
}
 80038c4:	3734      	adds	r7, #52	; 0x34
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd90      	pop	{r4, r7, pc}

080038ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	460b      	mov	r3, r1
 80038d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_PCD_SetAddress+0x1a>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e013      	b.n	800390c <HAL_PCD_SetAddress+0x42>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	78fa      	ldrb	r2, [r7, #3]
 80038fa:	4611      	mov	r1, r2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f003 f9e6 	bl	8006cce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	4608      	mov	r0, r1
 800391e:	4611      	mov	r1, r2
 8003920:	461a      	mov	r2, r3
 8003922:	4603      	mov	r3, r0
 8003924:	70fb      	strb	r3, [r7, #3]
 8003926:	460b      	mov	r3, r1
 8003928:	803b      	strh	r3, [r7, #0]
 800392a:	4613      	mov	r3, r2
 800392c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003936:	2b00      	cmp	r3, #0
 8003938:	da0f      	bge.n	800395a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	f003 020f 	and.w	r2, r3, #15
 8003940:	4613      	mov	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	3338      	adds	r3, #56	; 0x38
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	3304      	adds	r3, #4
 8003950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	705a      	strb	r2, [r3, #1]
 8003958:	e00f      	b.n	800397a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	f003 020f 	and.w	r2, r3, #15
 8003960:	4613      	mov	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	1a9b      	subs	r3, r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	4413      	add	r3, r2
 8003970:	3304      	adds	r3, #4
 8003972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	f003 030f 	and.w	r3, r3, #15
 8003980:	b2da      	uxtb	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003986:	883a      	ldrh	r2, [r7, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	78ba      	ldrb	r2, [r7, #2]
 8003990:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	785b      	ldrb	r3, [r3, #1]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d004      	beq.n	80039a4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039a4:	78bb      	ldrb	r3, [r7, #2]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d102      	bne.n	80039b0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_PCD_EP_Open+0xaa>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e00e      	b.n	80039dc <HAL_PCD_EP_Open+0xc8>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68f9      	ldr	r1, [r7, #12]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f002 fb51 	bl	8006074 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80039da:	7afb      	ldrb	r3, [r7, #11]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	da0f      	bge.n	8003a18 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	f003 020f 	and.w	r2, r3, #15
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	1a9b      	subs	r3, r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	3338      	adds	r3, #56	; 0x38
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2201      	movs	r2, #1
 8003a14:	705a      	strb	r2, [r3, #1]
 8003a16:	e00f      	b.n	8003a38 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	f003 020f 	and.w	r2, r3, #15
 8003a1e:	4613      	mov	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3304      	adds	r3, #4
 8003a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a38:	78fb      	ldrb	r3, [r7, #3]
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_PCD_EP_Close+0x6e>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e00e      	b.n	8003a70 <HAL_PCD_EP_Close+0x8c>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68f9      	ldr	r1, [r7, #12]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f002 fb8f 	bl	8006184 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	607a      	str	r2, [r7, #4]
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	460b      	mov	r3, r1
 8003a86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a88:	7afb      	ldrb	r3, [r7, #11]
 8003a8a:	f003 020f 	and.w	r2, r3, #15
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aba:	7afb      	ldrb	r3, [r7, #11]
 8003abc:	f003 030f 	and.w	r3, r3, #15
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d102      	bne.n	8003ad4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ad4:	7afb      	ldrb	r3, [r7, #11]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	461a      	mov	r2, r3
 8003aea:	6979      	ldr	r1, [r7, #20]
 8003aec:	f002 fe6a 	bl	80067c4 <USB_EP0StartXfer>
 8003af0:	e008      	b.n	8003b04 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	461a      	mov	r2, r3
 8003afe:	6979      	ldr	r1, [r7, #20]
 8003b00:	f002 fc1c 	bl	800633c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	460b      	mov	r3, r1
 8003b18:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b1a:	78fb      	ldrb	r3, [r7, #3]
 8003b1c:	f003 020f 	and.w	r2, r3, #15
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003b30:	681b      	ldr	r3, [r3, #0]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr

08003b3e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b086      	sub	sp, #24
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b4e:	7afb      	ldrb	r3, [r7, #11]
 8003b50:	f003 020f 	and.w	r2, r3, #15
 8003b54:	4613      	mov	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	1a9b      	subs	r3, r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	3338      	adds	r3, #56	; 0x38
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4413      	add	r3, r2
 8003b62:	3304      	adds	r3, #4
 8003b64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2200      	movs	r2, #0
 8003b76:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b7e:	7afb      	ldrb	r3, [r7, #11]
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d102      	bne.n	8003b98 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b98:	7afb      	ldrb	r3, [r7, #11]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d109      	bne.n	8003bb6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	461a      	mov	r2, r3
 8003bae:	6979      	ldr	r1, [r7, #20]
 8003bb0:	f002 fe08 	bl	80067c4 <USB_EP0StartXfer>
 8003bb4:	e008      	b.n	8003bc8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	6979      	ldr	r1, [r7, #20]
 8003bc4:	f002 fbba 	bl	800633c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	460b      	mov	r3, r1
 8003bdc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bde:	78fb      	ldrb	r3, [r7, #3]
 8003be0:	f003 020f 	and.w	r2, r3, #15
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d901      	bls.n	8003bf0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e050      	b.n	8003c92 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	da0f      	bge.n	8003c18 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	f003 020f 	and.w	r2, r3, #15
 8003bfe:	4613      	mov	r3, r2
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	3338      	adds	r3, #56	; 0x38
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	705a      	strb	r2, [r3, #1]
 8003c16:	e00d      	b.n	8003c34 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c18:	78fa      	ldrb	r2, [r7, #3]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	4413      	add	r3, r2
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2201      	movs	r2, #1
 8003c38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c3a:	78fb      	ldrb	r3, [r7, #3]
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_PCD_EP_SetStall+0x82>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e01e      	b.n	8003c92 <HAL_PCD_EP_SetStall+0xc0>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68f9      	ldr	r1, [r7, #12]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f002 ff5f 	bl	8006b26 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10a      	bne.n	8003c88 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6818      	ldr	r0, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	b2d9      	uxtb	r1, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c82:	461a      	mov	r2, r3
 8003c84:	f003 f950 	bl	8006f28 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b084      	sub	sp, #16
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ca6:	78fb      	ldrb	r3, [r7, #3]
 8003ca8:	f003 020f 	and.w	r2, r3, #15
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d901      	bls.n	8003cb8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e042      	b.n	8003d3e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	da0f      	bge.n	8003ce0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cc0:	78fb      	ldrb	r3, [r7, #3]
 8003cc2:	f003 020f 	and.w	r2, r3, #15
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	1a9b      	subs	r3, r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	3338      	adds	r3, #56	; 0x38
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	705a      	strb	r2, [r3, #1]
 8003cde:	e00f      	b.n	8003d00 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ce0:	78fb      	ldrb	r3, [r7, #3]
 8003ce2:	f003 020f 	and.w	r2, r3, #15
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	1a9b      	subs	r3, r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d06:	78fb      	ldrb	r3, [r7, #3]
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <HAL_PCD_EP_ClrStall+0x86>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e00e      	b.n	8003d3e <HAL_PCD_EP_ClrStall+0xa4>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68f9      	ldr	r1, [r7, #12]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f002 ff67 	bl	8006c02 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b08a      	sub	sp, #40	; 0x28
 8003d4a:	af02      	add	r7, sp, #8
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	3338      	adds	r3, #56	; 0x38
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	4413      	add	r3, r2
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d901      	bls.n	8003d7e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e06c      	b.n	8003e58 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	695a      	ldr	r2, [r3, #20]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	69fa      	ldr	r2, [r7, #28]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d902      	bls.n	8003d9a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	3303      	adds	r3, #3
 8003d9e:	089b      	lsrs	r3, r3, #2
 8003da0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003da2:	e02b      	b.n	8003dfc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	695a      	ldr	r2, [r3, #20]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d902      	bls.n	8003dc0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	3303      	adds	r3, #3
 8003dc4:	089b      	lsrs	r3, r3, #2
 8003dc6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	68d9      	ldr	r1, [r3, #12]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	4603      	mov	r3, r0
 8003dde:	6978      	ldr	r0, [r7, #20]
 8003de0:	f002 fe43 	bl	8006a6a <USB_WritePacket>

    ep->xfer_buff  += len;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	441a      	add	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	699a      	ldr	r2, [r3, #24]
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	441a      	add	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d809      	bhi.n	8003e26 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	699a      	ldr	r2, [r3, #24]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d203      	bcs.n	8003e26 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1be      	bne.n	8003da4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	695a      	ldr	r2, [r3, #20]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d811      	bhi.n	8003e56 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	2201      	movs	r2, #1
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	6939      	ldr	r1, [r7, #16]
 8003e4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e52:	4013      	ands	r3, r2
 8003e54:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3720      	adds	r7, #32
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	333c      	adds	r3, #60	; 0x3c
 8003e78:	3304      	adds	r3, #4
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	f040 80a0 	bne.w	8003fd8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d015      	beq.n	8003ece <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4a72      	ldr	r2, [pc, #456]	; (8004070 <PCD_EP_OutXfrComplete_int+0x210>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	f240 80dd 	bls.w	8004066 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 80d7 	beq.w	8004066 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eca:	6093      	str	r3, [r2, #8]
 8003ecc:	e0cb      	b.n	8004066 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d009      	beq.n	8003eec <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	2320      	movs	r3, #32
 8003ee8:	6093      	str	r3, [r2, #8]
 8003eea:	e0bc      	b.n	8004066 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f040 80b7 	bne.w	8004066 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4a5d      	ldr	r2, [pc, #372]	; (8004070 <PCD_EP_OutXfrComplete_int+0x210>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d90f      	bls.n	8003f20 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f16:	461a      	mov	r2, r3
 8003f18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f1c:	6093      	str	r3, [r2, #8]
 8003f1e:	e0a2      	b.n	8004066 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	4613      	mov	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f32:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	0159      	lsls	r1, r3, #5
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	440b      	add	r3, r1
 8003f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003f46:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	1a9b      	subs	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4403      	add	r3, r0
 8003f56:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003f5a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	4613      	mov	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	1a9b      	subs	r3, r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f6e:	6819      	ldr	r1, [r3, #0]
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	4613      	mov	r3, r2
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	1a9b      	subs	r3, r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4403      	add	r3, r0
 8003f7e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4419      	add	r1, r3
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	1a9b      	subs	r3, r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4403      	add	r3, r0
 8003f94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f98:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d114      	bne.n	8003fca <PCD_EP_OutXfrComplete_int+0x16a>
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d108      	bne.n	8003fca <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6818      	ldr	r0, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	f002 ffaf 	bl	8006f28 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	4619      	mov	r1, r3
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f004 ff65 	bl	8008ea0 <HAL_PCD_DataOutStageCallback>
 8003fd6:	e046      	b.n	8004066 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4a26      	ldr	r2, [pc, #152]	; (8004074 <PCD_EP_OutXfrComplete_int+0x214>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d124      	bne.n	800402a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ffc:	6093      	str	r3, [r2, #8]
 8003ffe:	e032      	b.n	8004066 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	4413      	add	r3, r2
 8004012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004016:	461a      	mov	r2, r3
 8004018:	2320      	movs	r3, #32
 800401a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	b2db      	uxtb	r3, r3
 8004020:	4619      	mov	r1, r3
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f004 ff3c 	bl	8008ea0 <HAL_PCD_DataOutStageCallback>
 8004028:	e01d      	b.n	8004066 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d114      	bne.n	800405a <PCD_EP_OutXfrComplete_int+0x1fa>
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d108      	bne.n	800405a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004052:	461a      	mov	r2, r3
 8004054:	2100      	movs	r1, #0
 8004056:	f002 ff67 	bl	8006f28 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	4619      	mov	r1, r3
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f004 ff1d 	bl	8008ea0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	4f54300a 	.word	0x4f54300a
 8004074:	4f54310a 	.word	0x4f54310a

08004078 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	333c      	adds	r3, #60	; 0x3c
 8004090:	3304      	adds	r3, #4
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4a15      	ldr	r2, [pc, #84]	; (8004100 <PCD_EP_OutSetupPacket_int+0x88>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d90e      	bls.n	80040cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d009      	beq.n	80040cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c4:	461a      	mov	r2, r3
 80040c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f004 fed5 	bl	8008e7c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4a0a      	ldr	r2, [pc, #40]	; (8004100 <PCD_EP_OutSetupPacket_int+0x88>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d90c      	bls.n	80040f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d108      	bne.n	80040f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040ec:	461a      	mov	r2, r3
 80040ee:	2101      	movs	r1, #1
 80040f0:	f002 ff1a 	bl	8006f28 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	4f54300a 	.word	0x4f54300a

08004104 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	70fb      	strb	r3, [r7, #3]
 8004110:	4613      	mov	r3, r2
 8004112:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d107      	bne.n	8004132 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004122:	883b      	ldrh	r3, [r7, #0]
 8004124:	0419      	lsls	r1, r3, #16
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	430a      	orrs	r2, r1
 800412e:	629a      	str	r2, [r3, #40]	; 0x28
 8004130:	e028      	b.n	8004184 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	0c1b      	lsrs	r3, r3, #16
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	4413      	add	r3, r2
 800413e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004140:	2300      	movs	r3, #0
 8004142:	73fb      	strb	r3, [r7, #15]
 8004144:	e00d      	b.n	8004162 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	3340      	adds	r3, #64	; 0x40
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	0c1b      	lsrs	r3, r3, #16
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	4413      	add	r3, r2
 800415a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	3301      	adds	r3, #1
 8004160:	73fb      	strb	r3, [r7, #15]
 8004162:	7bfa      	ldrb	r2, [r7, #15]
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	3b01      	subs	r3, #1
 8004168:	429a      	cmp	r2, r3
 800416a:	d3ec      	bcc.n	8004146 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800416c:	883b      	ldrh	r3, [r7, #0]
 800416e:	0418      	lsls	r0, r3, #16
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6819      	ldr	r1, [r3, #0]
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	3b01      	subs	r3, #1
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	4302      	orrs	r2, r0
 800417c:	3340      	adds	r3, #64	; 0x40
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	460b      	mov	r3, r1
 800419c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	887a      	ldrh	r2, [r7, #2]
 80041a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e6:	f043 0303 	orr.w	r3, r3, #3
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e0cc      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004210:	4b68      	ldr	r3, [pc, #416]	; (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 030f 	and.w	r3, r3, #15
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d90c      	bls.n	8004238 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421e:	4b65      	ldr	r3, [pc, #404]	; (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004226:	4b63      	ldr	r3, [pc, #396]	; (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d001      	beq.n	8004238 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e0b8      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d020      	beq.n	8004286 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004250:	4b59      	ldr	r3, [pc, #356]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	4a58      	ldr	r2, [pc, #352]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800425a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d005      	beq.n	8004274 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004268:	4b53      	ldr	r3, [pc, #332]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	4a52      	ldr	r2, [pc, #328]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004272:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004274:	4b50      	ldr	r3, [pc, #320]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	494d      	ldr	r1, [pc, #308]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	4313      	orrs	r3, r2
 8004284:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d044      	beq.n	800431c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d107      	bne.n	80042aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429a:	4b47      	ldr	r3, [pc, #284]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d119      	bne.n	80042da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e07f      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d003      	beq.n	80042ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	d107      	bne.n	80042ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ba:	4b3f      	ldr	r3, [pc, #252]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d109      	bne.n	80042da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e06f      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ca:	4b3b      	ldr	r3, [pc, #236]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e067      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042da:	4b37      	ldr	r3, [pc, #220]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f023 0203 	bic.w	r2, r3, #3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	4934      	ldr	r1, [pc, #208]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042ec:	f7fd fe22 	bl	8001f34 <HAL_GetTick>
 80042f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f2:	e00a      	b.n	800430a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f4:	f7fd fe1e 	bl	8001f34 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004302:	4293      	cmp	r3, r2
 8004304:	d901      	bls.n	800430a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e04f      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430a:	4b2b      	ldr	r3, [pc, #172]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 020c 	and.w	r2, r3, #12
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	429a      	cmp	r2, r3
 800431a:	d1eb      	bne.n	80042f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800431c:	4b25      	ldr	r3, [pc, #148]	; (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 030f 	and.w	r3, r3, #15
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	429a      	cmp	r2, r3
 8004328:	d20c      	bcs.n	8004344 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432a:	4b22      	ldr	r3, [pc, #136]	; (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004332:	4b20      	ldr	r3, [pc, #128]	; (80043b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d001      	beq.n	8004344 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e032      	b.n	80043aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d008      	beq.n	8004362 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004350:	4b19      	ldr	r3, [pc, #100]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	4916      	ldr	r1, [pc, #88]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	4313      	orrs	r3, r2
 8004360:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800436e:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	490e      	ldr	r1, [pc, #56]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800437e:	4313      	orrs	r3, r2
 8004380:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004382:	f000 fb7f 	bl	8004a84 <HAL_RCC_GetSysClockFreq>
 8004386:	4601      	mov	r1, r0
 8004388:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	091b      	lsrs	r3, r3, #4
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	4a0a      	ldr	r2, [pc, #40]	; (80043bc <HAL_RCC_ClockConfig+0x1c0>)
 8004394:	5cd3      	ldrb	r3, [r2, r3]
 8004396:	fa21 f303 	lsr.w	r3, r1, r3
 800439a:	4a09      	ldr	r2, [pc, #36]	; (80043c0 <HAL_RCC_ClockConfig+0x1c4>)
 800439c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800439e:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <HAL_RCC_ClockConfig+0x1c8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fd fd82 	bl	8001eac <HAL_InitTick>

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	40023c00 	.word	0x40023c00
 80043b8:	40023800 	.word	0x40023800
 80043bc:	08009740 	.word	0x08009740
 80043c0:	20000000 	.word	0x20000000
 80043c4:	20000004 	.word	0x20000004

080043c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043cc:	4b03      	ldr	r3, [pc, #12]	; (80043dc <HAL_RCC_GetHCLKFreq+0x14>)
 80043ce:	681b      	ldr	r3, [r3, #0]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20000000 	.word	0x20000000

080043e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043e4:	f7ff fff0 	bl	80043c8 <HAL_RCC_GetHCLKFreq>
 80043e8:	4601      	mov	r1, r0
 80043ea:	4b05      	ldr	r3, [pc, #20]	; (8004400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	0a9b      	lsrs	r3, r3, #10
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	4a03      	ldr	r2, [pc, #12]	; (8004404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043f6:	5cd3      	ldrb	r3, [r2, r3]
 80043f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40023800 	.word	0x40023800
 8004404:	08009750 	.word	0x08009750

08004408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800440c:	f7ff ffdc 	bl	80043c8 <HAL_RCC_GetHCLKFreq>
 8004410:	4601      	mov	r1, r0
 8004412:	4b05      	ldr	r3, [pc, #20]	; (8004428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	0b5b      	lsrs	r3, r3, #13
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	4a03      	ldr	r2, [pc, #12]	; (800442c <HAL_RCC_GetPCLK2Freq+0x24>)
 800441e:	5cd3      	ldrb	r3, [r2, r3]
 8004420:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004424:	4618      	mov	r0, r3
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40023800 	.word	0x40023800
 800442c:	08009750 	.word	0x08009750

08004430 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b08c      	sub	sp, #48	; 0x30
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d010      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004468:	4b6f      	ldr	r3, [pc, #444]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800446a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800446e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004476:	496c      	ldr	r1, [pc, #432]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004486:	2301      	movs	r3, #1
 8004488:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d010      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004496:	4b64      	ldr	r3, [pc, #400]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800449c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a4:	4960      	ldr	r1, [pc, #384]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80044b4:	2301      	movs	r3, #1
 80044b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d017      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044c4:	4b58      	ldr	r3, [pc, #352]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	4955      	ldr	r1, [pc, #340]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044e2:	d101      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80044e4:	2301      	movs	r3, #1
 80044e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80044f0:	2301      	movs	r3, #1
 80044f2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d017      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004500:	4b49      	ldr	r3, [pc, #292]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004506:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450e:	4946      	ldr	r1, [pc, #280]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800451e:	d101      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004520:	2301      	movs	r3, #1
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800452c:	2301      	movs	r3, #1
 800452e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0320 	and.w	r3, r3, #32
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 808a 	beq.w	8004652 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800453e:	2300      	movs	r3, #0
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	4b39      	ldr	r3, [pc, #228]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	4a38      	ldr	r2, [pc, #224]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800454c:	6413      	str	r3, [r2, #64]	; 0x40
 800454e:	4b36      	ldr	r3, [pc, #216]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004556:	60bb      	str	r3, [r7, #8]
 8004558:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800455a:	4b34      	ldr	r3, [pc, #208]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a33      	ldr	r2, [pc, #204]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004564:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004566:	f7fd fce5 	bl	8001f34 <HAL_GetTick>
 800456a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800456c:	e008      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800456e:	f7fd fce1 	bl	8001f34 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e278      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004580:	4b2a      	ldr	r3, [pc, #168]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0f0      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800458c:	4b26      	ldr	r3, [pc, #152]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800458e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004594:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d02f      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a4:	6a3a      	ldr	r2, [r7, #32]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d028      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045aa:	4b1f      	ldr	r3, [pc, #124]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045b4:	4b1e      	ldr	r3, [pc, #120]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045ba:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80045c0:	4a19      	ldr	r2, [pc, #100]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045c6:	4b18      	ldr	r3, [pc, #96]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d114      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80045d2:	f7fd fcaf 	bl	8001f34 <HAL_GetTick>
 80045d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d8:	e00a      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045da:	f7fd fcab 	bl	8001f34 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e240      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f0:	4b0d      	ldr	r3, [pc, #52]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0ee      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004608:	d114      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800460a:	4b07      	ldr	r3, [pc, #28]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800461a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800461e:	4902      	ldr	r1, [pc, #8]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004620:	4313      	orrs	r3, r2
 8004622:	608b      	str	r3, [r1, #8]
 8004624:	e00c      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004626:	bf00      	nop
 8004628:	40023800 	.word	0x40023800
 800462c:	40007000 	.word	0x40007000
 8004630:	42470e40 	.word	0x42470e40
 8004634:	4b4a      	ldr	r3, [pc, #296]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	4a49      	ldr	r2, [pc, #292]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800463a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800463e:	6093      	str	r3, [r2, #8]
 8004640:	4b47      	ldr	r3, [pc, #284]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004642:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800464c:	4944      	ldr	r1, [pc, #272]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800464e:	4313      	orrs	r3, r2
 8004650:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0310 	and.w	r3, r3, #16
 800465a:	2b00      	cmp	r3, #0
 800465c:	d004      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004664:	4b3f      	ldr	r3, [pc, #252]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004666:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004674:	4b3a      	ldr	r3, [pc, #232]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800467a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004682:	4937      	ldr	r1, [pc, #220]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004684:	4313      	orrs	r3, r2
 8004686:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004696:	4b32      	ldr	r3, [pc, #200]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800469c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046a4:	492e      	ldr	r1, [pc, #184]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d011      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80046b8:	4b29      	ldr	r3, [pc, #164]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046be:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c6:	4926      	ldr	r1, [pc, #152]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046d6:	d101      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80046d8:	2301      	movs	r3, #1
 80046da:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80046e8:	4b1d      	ldr	r3, [pc, #116]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	491a      	ldr	r1, [pc, #104]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004706:	2b00      	cmp	r3, #0
 8004708:	d011      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800470a:	4b15      	ldr	r3, [pc, #84]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800470c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004710:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004718:	4911      	ldr	r1, [pc, #68]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004728:	d101      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800472a:	2301      	movs	r3, #1
 800472c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800472e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004730:	2b01      	cmp	r3, #1
 8004732:	d005      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800473c:	f040 80ff 	bne.w	800493e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004740:	4b09      	ldr	r3, [pc, #36]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004746:	f7fd fbf5 	bl	8001f34 <HAL_GetTick>
 800474a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800474c:	e00e      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800474e:	f7fd fbf1 	bl	8001f34 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d907      	bls.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e188      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004760:	40023800 	.word	0x40023800
 8004764:	424711e0 	.word	0x424711e0
 8004768:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800476c:	4b7e      	ldr	r3, [pc, #504]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1ea      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	2b00      	cmp	r3, #0
 800478a:	d009      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004794:	2b00      	cmp	r3, #0
 8004796:	d028      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479c:	2b00      	cmp	r3, #0
 800479e:	d124      	bne.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80047a0:	4b71      	ldr	r3, [pc, #452]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a6:	0c1b      	lsrs	r3, r3, #16
 80047a8:	f003 0303 	and.w	r3, r3, #3
 80047ac:	3301      	adds	r3, #1
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047b2:	4b6d      	ldr	r3, [pc, #436]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047b8:	0e1b      	lsrs	r3, r3, #24
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	019b      	lsls	r3, r3, #6
 80047ca:	431a      	orrs	r2, r3
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	085b      	lsrs	r3, r3, #1
 80047d0:	3b01      	subs	r3, #1
 80047d2:	041b      	lsls	r3, r3, #16
 80047d4:	431a      	orrs	r2, r3
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	061b      	lsls	r3, r3, #24
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	071b      	lsls	r3, r3, #28
 80047e2:	4961      	ldr	r1, [pc, #388]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d004      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047fe:	d00a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004808:	2b00      	cmp	r3, #0
 800480a:	d035      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004810:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004814:	d130      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004816:	4b54      	ldr	r3, [pc, #336]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800481c:	0c1b      	lsrs	r3, r3, #16
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	3301      	adds	r3, #1
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004828:	4b4f      	ldr	r3, [pc, #316]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800482a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800482e:	0f1b      	lsrs	r3, r3, #28
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	019b      	lsls	r3, r3, #6
 8004840:	431a      	orrs	r2, r3
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	085b      	lsrs	r3, r3, #1
 8004846:	3b01      	subs	r3, #1
 8004848:	041b      	lsls	r3, r3, #16
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	061b      	lsls	r3, r3, #24
 8004852:	431a      	orrs	r2, r3
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	071b      	lsls	r3, r3, #28
 8004858:	4943      	ldr	r1, [pc, #268]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004860:	4b41      	ldr	r3, [pc, #260]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004866:	f023 021f 	bic.w	r2, r3, #31
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486e:	3b01      	subs	r3, #1
 8004870:	493d      	ldr	r1, [pc, #244]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004880:	2b00      	cmp	r3, #0
 8004882:	d029      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004888:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800488c:	d124      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800488e:	4b36      	ldr	r3, [pc, #216]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	3301      	adds	r3, #1
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048a0:	4b31      	ldr	r3, [pc, #196]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a6:	0f1b      	lsrs	r3, r3, #28
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	019b      	lsls	r3, r3, #6
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	085b      	lsrs	r3, r3, #1
 80048c0:	3b01      	subs	r3, #1
 80048c2:	041b      	lsls	r3, r3, #16
 80048c4:	431a      	orrs	r2, r3
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	061b      	lsls	r3, r3, #24
 80048ca:	431a      	orrs	r2, r3
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	071b      	lsls	r3, r3, #28
 80048d0:	4925      	ldr	r1, [pc, #148]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d016      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	019b      	lsls	r3, r3, #6
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	085b      	lsrs	r3, r3, #1
 80048f6:	3b01      	subs	r3, #1
 80048f8:	041b      	lsls	r3, r3, #16
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	061b      	lsls	r3, r3, #24
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	071b      	lsls	r3, r3, #28
 800490a:	4917      	ldr	r1, [pc, #92]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004912:	4b16      	ldr	r3, [pc, #88]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004914:	2201      	movs	r2, #1
 8004916:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004918:	f7fd fb0c 	bl	8001f34 <HAL_GetTick>
 800491c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004920:	f7fd fb08 	bl	8001f34 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e09f      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004932:	4b0d      	ldr	r3, [pc, #52]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0f0      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800493e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004940:	2b01      	cmp	r3, #1
 8004942:	f040 8095 	bne.w	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004946:	4b0a      	ldr	r3, [pc, #40]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800494c:	f7fd faf2 	bl	8001f34 <HAL_GetTick>
 8004950:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004952:	e00f      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004954:	f7fd faee 	bl	8001f34 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d908      	bls.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e085      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004966:	bf00      	nop
 8004968:	40023800 	.word	0x40023800
 800496c:	42470068 	.word	0x42470068
 8004970:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004974:	4b41      	ldr	r3, [pc, #260]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800497c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004980:	d0e8      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d02b      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d127      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80049aa:	4b34      	ldr	r3, [pc, #208]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80049ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b0:	0c1b      	lsrs	r3, r3, #16
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	3301      	adds	r3, #1
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	699a      	ldr	r2, [r3, #24]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	019b      	lsls	r3, r3, #6
 80049c6:	431a      	orrs	r2, r3
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	085b      	lsrs	r3, r3, #1
 80049cc:	3b01      	subs	r3, #1
 80049ce:	041b      	lsls	r3, r3, #16
 80049d0:	431a      	orrs	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	061b      	lsls	r3, r3, #24
 80049d8:	4928      	ldr	r1, [pc, #160]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80049e0:	4b26      	ldr	r3, [pc, #152]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80049e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049e6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	3b01      	subs	r3, #1
 80049f0:	021b      	lsls	r3, r3, #8
 80049f2:	4922      	ldr	r1, [pc, #136]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d01d      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a0e:	d118      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a10:	4b1a      	ldr	r3, [pc, #104]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a16:	0e1b      	lsrs	r3, r3, #24
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	699a      	ldr	r2, [r3, #24]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	019b      	lsls	r3, r3, #6
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	085b      	lsrs	r3, r3, #1
 8004a30:	3b01      	subs	r3, #1
 8004a32:	041b      	lsls	r3, r3, #16
 8004a34:	431a      	orrs	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	061b      	lsls	r3, r3, #24
 8004a3a:	4910      	ldr	r1, [pc, #64]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004a42:	4b0f      	ldr	r3, [pc, #60]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004a44:	2201      	movs	r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a48:	f7fd fa74 	bl	8001f34 <HAL_GetTick>
 8004a4c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004a50:	f7fd fa70 	bl	8001f34 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e007      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a62:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a6e:	d1ef      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3730      	adds	r7, #48	; 0x30
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	42470070 	.word	0x42470070

08004a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a9e:	4bc6      	ldr	r3, [pc, #792]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 030c 	and.w	r3, r3, #12
 8004aa6:	2b0c      	cmp	r3, #12
 8004aa8:	f200 817e 	bhi.w	8004da8 <HAL_RCC_GetSysClockFreq+0x324>
 8004aac:	a201      	add	r2, pc, #4	; (adr r2, 8004ab4 <HAL_RCC_GetSysClockFreq+0x30>)
 8004aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab2:	bf00      	nop
 8004ab4:	08004ae9 	.word	0x08004ae9
 8004ab8:	08004da9 	.word	0x08004da9
 8004abc:	08004da9 	.word	0x08004da9
 8004ac0:	08004da9 	.word	0x08004da9
 8004ac4:	08004aef 	.word	0x08004aef
 8004ac8:	08004da9 	.word	0x08004da9
 8004acc:	08004da9 	.word	0x08004da9
 8004ad0:	08004da9 	.word	0x08004da9
 8004ad4:	08004af5 	.word	0x08004af5
 8004ad8:	08004da9 	.word	0x08004da9
 8004adc:	08004da9 	.word	0x08004da9
 8004ae0:	08004da9 	.word	0x08004da9
 8004ae4:	08004c51 	.word	0x08004c51
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ae8:	4bb4      	ldr	r3, [pc, #720]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x338>)
 8004aea:	613b      	str	r3, [r7, #16]
       break;
 8004aec:	e15f      	b.n	8004dae <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aee:	4bb4      	ldr	r3, [pc, #720]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004af0:	613b      	str	r3, [r7, #16]
      break;
 8004af2:	e15c      	b.n	8004dae <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004af4:	4bb0      	ldr	r3, [pc, #704]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004afc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004afe:	4bae      	ldr	r3, [pc, #696]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d04a      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b0a:	4bab      	ldr	r3, [pc, #684]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	099b      	lsrs	r3, r3, #6
 8004b10:	f04f 0400 	mov.w	r4, #0
 8004b14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	ea03 0501 	and.w	r5, r3, r1
 8004b20:	ea04 0602 	and.w	r6, r4, r2
 8004b24:	4629      	mov	r1, r5
 8004b26:	4632      	mov	r2, r6
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	f04f 0400 	mov.w	r4, #0
 8004b30:	0154      	lsls	r4, r2, #5
 8004b32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b36:	014b      	lsls	r3, r1, #5
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4622      	mov	r2, r4
 8004b3c:	1b49      	subs	r1, r1, r5
 8004b3e:	eb62 0206 	sbc.w	r2, r2, r6
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	f04f 0400 	mov.w	r4, #0
 8004b4a:	0194      	lsls	r4, r2, #6
 8004b4c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b50:	018b      	lsls	r3, r1, #6
 8004b52:	1a5b      	subs	r3, r3, r1
 8004b54:	eb64 0402 	sbc.w	r4, r4, r2
 8004b58:	f04f 0100 	mov.w	r1, #0
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	00e2      	lsls	r2, r4, #3
 8004b62:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b66:	00d9      	lsls	r1, r3, #3
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4614      	mov	r4, r2
 8004b6c:	195b      	adds	r3, r3, r5
 8004b6e:	eb44 0406 	adc.w	r4, r4, r6
 8004b72:	f04f 0100 	mov.w	r1, #0
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	0262      	lsls	r2, r4, #9
 8004b7c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004b80:	0259      	lsls	r1, r3, #9
 8004b82:	460b      	mov	r3, r1
 8004b84:	4614      	mov	r4, r2
 8004b86:	4618      	mov	r0, r3
 8004b88:	4621      	mov	r1, r4
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f04f 0400 	mov.w	r4, #0
 8004b90:	461a      	mov	r2, r3
 8004b92:	4623      	mov	r3, r4
 8004b94:	f7fb fb36 	bl	8000204 <__aeabi_uldivmod>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	460c      	mov	r4, r1
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	e049      	b.n	8004c34 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ba0:	4b85      	ldr	r3, [pc, #532]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	099b      	lsrs	r3, r3, #6
 8004ba6:	f04f 0400 	mov.w	r4, #0
 8004baa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	ea03 0501 	and.w	r5, r3, r1
 8004bb6:	ea04 0602 	and.w	r6, r4, r2
 8004bba:	4629      	mov	r1, r5
 8004bbc:	4632      	mov	r2, r6
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	f04f 0400 	mov.w	r4, #0
 8004bc6:	0154      	lsls	r4, r2, #5
 8004bc8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004bcc:	014b      	lsls	r3, r1, #5
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4622      	mov	r2, r4
 8004bd2:	1b49      	subs	r1, r1, r5
 8004bd4:	eb62 0206 	sbc.w	r2, r2, r6
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	f04f 0400 	mov.w	r4, #0
 8004be0:	0194      	lsls	r4, r2, #6
 8004be2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004be6:	018b      	lsls	r3, r1, #6
 8004be8:	1a5b      	subs	r3, r3, r1
 8004bea:	eb64 0402 	sbc.w	r4, r4, r2
 8004bee:	f04f 0100 	mov.w	r1, #0
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	00e2      	lsls	r2, r4, #3
 8004bf8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004bfc:	00d9      	lsls	r1, r3, #3
 8004bfe:	460b      	mov	r3, r1
 8004c00:	4614      	mov	r4, r2
 8004c02:	195b      	adds	r3, r3, r5
 8004c04:	eb44 0406 	adc.w	r4, r4, r6
 8004c08:	f04f 0100 	mov.w	r1, #0
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	02a2      	lsls	r2, r4, #10
 8004c12:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004c16:	0299      	lsls	r1, r3, #10
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4614      	mov	r4, r2
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	4621      	mov	r1, r4
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f04f 0400 	mov.w	r4, #0
 8004c26:	461a      	mov	r2, r3
 8004c28:	4623      	mov	r3, r4
 8004c2a:	f7fb faeb 	bl	8000204 <__aeabi_uldivmod>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	460c      	mov	r4, r1
 8004c32:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c34:	4b60      	ldr	r3, [pc, #384]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	0c1b      	lsrs	r3, r3, #16
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	3301      	adds	r3, #1
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4c:	613b      	str	r3, [r7, #16]
      break;
 8004c4e:	e0ae      	b.n	8004dae <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c50:	4b59      	ldr	r3, [pc, #356]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c58:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c5a:	4b57      	ldr	r3, [pc, #348]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d04a      	beq.n	8004cfc <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c66:	4b54      	ldr	r3, [pc, #336]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	099b      	lsrs	r3, r3, #6
 8004c6c:	f04f 0400 	mov.w	r4, #0
 8004c70:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	ea03 0501 	and.w	r5, r3, r1
 8004c7c:	ea04 0602 	and.w	r6, r4, r2
 8004c80:	4629      	mov	r1, r5
 8004c82:	4632      	mov	r2, r6
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	f04f 0400 	mov.w	r4, #0
 8004c8c:	0154      	lsls	r4, r2, #5
 8004c8e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c92:	014b      	lsls	r3, r1, #5
 8004c94:	4619      	mov	r1, r3
 8004c96:	4622      	mov	r2, r4
 8004c98:	1b49      	subs	r1, r1, r5
 8004c9a:	eb62 0206 	sbc.w	r2, r2, r6
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	f04f 0400 	mov.w	r4, #0
 8004ca6:	0194      	lsls	r4, r2, #6
 8004ca8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004cac:	018b      	lsls	r3, r1, #6
 8004cae:	1a5b      	subs	r3, r3, r1
 8004cb0:	eb64 0402 	sbc.w	r4, r4, r2
 8004cb4:	f04f 0100 	mov.w	r1, #0
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	00e2      	lsls	r2, r4, #3
 8004cbe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004cc2:	00d9      	lsls	r1, r3, #3
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4614      	mov	r4, r2
 8004cc8:	195b      	adds	r3, r3, r5
 8004cca:	eb44 0406 	adc.w	r4, r4, r6
 8004cce:	f04f 0100 	mov.w	r1, #0
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	0262      	lsls	r2, r4, #9
 8004cd8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004cdc:	0259      	lsls	r1, r3, #9
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4614      	mov	r4, r2
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	4621      	mov	r1, r4
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f04f 0400 	mov.w	r4, #0
 8004cec:	461a      	mov	r2, r3
 8004cee:	4623      	mov	r3, r4
 8004cf0:	f7fb fa88 	bl	8000204 <__aeabi_uldivmod>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	e049      	b.n	8004d90 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cfc:	4b2e      	ldr	r3, [pc, #184]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	099b      	lsrs	r3, r3, #6
 8004d02:	f04f 0400 	mov.w	r4, #0
 8004d06:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	ea03 0501 	and.w	r5, r3, r1
 8004d12:	ea04 0602 	and.w	r6, r4, r2
 8004d16:	4629      	mov	r1, r5
 8004d18:	4632      	mov	r2, r6
 8004d1a:	f04f 0300 	mov.w	r3, #0
 8004d1e:	f04f 0400 	mov.w	r4, #0
 8004d22:	0154      	lsls	r4, r2, #5
 8004d24:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d28:	014b      	lsls	r3, r1, #5
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	4622      	mov	r2, r4
 8004d2e:	1b49      	subs	r1, r1, r5
 8004d30:	eb62 0206 	sbc.w	r2, r2, r6
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	f04f 0400 	mov.w	r4, #0
 8004d3c:	0194      	lsls	r4, r2, #6
 8004d3e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d42:	018b      	lsls	r3, r1, #6
 8004d44:	1a5b      	subs	r3, r3, r1
 8004d46:	eb64 0402 	sbc.w	r4, r4, r2
 8004d4a:	f04f 0100 	mov.w	r1, #0
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	00e2      	lsls	r2, r4, #3
 8004d54:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d58:	00d9      	lsls	r1, r3, #3
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4614      	mov	r4, r2
 8004d5e:	195b      	adds	r3, r3, r5
 8004d60:	eb44 0406 	adc.w	r4, r4, r6
 8004d64:	f04f 0100 	mov.w	r1, #0
 8004d68:	f04f 0200 	mov.w	r2, #0
 8004d6c:	02a2      	lsls	r2, r4, #10
 8004d6e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004d72:	0299      	lsls	r1, r3, #10
 8004d74:	460b      	mov	r3, r1
 8004d76:	4614      	mov	r4, r2
 8004d78:	4618      	mov	r0, r3
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f04f 0400 	mov.w	r4, #0
 8004d82:	461a      	mov	r2, r3
 8004d84:	4623      	mov	r3, r4
 8004d86:	f7fb fa3d 	bl	8000204 <__aeabi_uldivmod>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	460c      	mov	r4, r1
 8004d8e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004d90:	4b09      	ldr	r3, [pc, #36]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	0f1b      	lsrs	r3, r3, #28
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da4:	613b      	str	r3, [r7, #16]
      break;
 8004da6:	e002      	b.n	8004dae <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004da8:	4b04      	ldr	r3, [pc, #16]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x338>)
 8004daa:	613b      	str	r3, [r7, #16]
      break;
 8004dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dae:	693b      	ldr	r3, [r7, #16]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	371c      	adds	r7, #28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	00f42400 	.word	0x00f42400
 8004dc0:	007a1200 	.word	0x007a1200

08004dc4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 8083 	beq.w	8004ee4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004dde:	4b95      	ldr	r3, [pc, #596]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 030c 	and.w	r3, r3, #12
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	d019      	beq.n	8004e1e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004dea:	4b92      	ldr	r3, [pc, #584]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004df2:	2b08      	cmp	r3, #8
 8004df4:	d106      	bne.n	8004e04 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004df6:	4b8f      	ldr	r3, [pc, #572]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e02:	d00c      	beq.n	8004e1e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e04:	4b8b      	ldr	r3, [pc, #556]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e0c:	2b0c      	cmp	r3, #12
 8004e0e:	d112      	bne.n	8004e36 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e10:	4b88      	ldr	r3, [pc, #544]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e1c:	d10b      	bne.n	8004e36 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e1e:	4b85      	ldr	r3, [pc, #532]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d05b      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x11e>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d157      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e216      	b.n	8005264 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e3e:	d106      	bne.n	8004e4e <HAL_RCC_OscConfig+0x8a>
 8004e40:	4b7c      	ldr	r3, [pc, #496]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a7b      	ldr	r2, [pc, #492]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	e01d      	b.n	8004e8a <HAL_RCC_OscConfig+0xc6>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e56:	d10c      	bne.n	8004e72 <HAL_RCC_OscConfig+0xae>
 8004e58:	4b76      	ldr	r3, [pc, #472]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a75      	ldr	r2, [pc, #468]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004e5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e62:	6013      	str	r3, [r2, #0]
 8004e64:	4b73      	ldr	r3, [pc, #460]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a72      	ldr	r2, [pc, #456]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e6e:	6013      	str	r3, [r2, #0]
 8004e70:	e00b      	b.n	8004e8a <HAL_RCC_OscConfig+0xc6>
 8004e72:	4b70      	ldr	r3, [pc, #448]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a6f      	ldr	r2, [pc, #444]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	4b6d      	ldr	r3, [pc, #436]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a6c      	ldr	r2, [pc, #432]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e88:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d013      	beq.n	8004eba <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e92:	f7fd f84f 	bl	8001f34 <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e9a:	f7fd f84b 	bl	8001f34 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b64      	cmp	r3, #100	; 0x64
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e1db      	b.n	8005264 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eac:	4b61      	ldr	r3, [pc, #388]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0f0      	beq.n	8004e9a <HAL_RCC_OscConfig+0xd6>
 8004eb8:	e014      	b.n	8004ee4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eba:	f7fd f83b 	bl	8001f34 <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ec2:	f7fd f837 	bl	8001f34 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b64      	cmp	r3, #100	; 0x64
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e1c7      	b.n	8005264 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ed4:	4b57      	ldr	r3, [pc, #348]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1f0      	bne.n	8004ec2 <HAL_RCC_OscConfig+0xfe>
 8004ee0:	e000      	b.n	8004ee4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d06f      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ef0:	4b50      	ldr	r3, [pc, #320]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 030c 	and.w	r3, r3, #12
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d017      	beq.n	8004f2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004efc:	4b4d      	ldr	r3, [pc, #308]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d105      	bne.n	8004f14 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f08:	4b4a      	ldr	r3, [pc, #296]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00b      	beq.n	8004f2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f14:	4b47      	ldr	r3, [pc, #284]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f1c:	2b0c      	cmp	r3, #12
 8004f1e:	d11c      	bne.n	8004f5a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f20:	4b44      	ldr	r3, [pc, #272]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d116      	bne.n	8004f5a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f2c:	4b41      	ldr	r3, [pc, #260]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d005      	beq.n	8004f44 <HAL_RCC_OscConfig+0x180>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d001      	beq.n	8004f44 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e18f      	b.n	8005264 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f44:	4b3b      	ldr	r3, [pc, #236]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	4938      	ldr	r1, [pc, #224]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f58:	e03a      	b.n	8004fd0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d020      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f62:	4b35      	ldr	r3, [pc, #212]	; (8005038 <HAL_RCC_OscConfig+0x274>)
 8004f64:	2201      	movs	r2, #1
 8004f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f68:	f7fc ffe4 	bl	8001f34 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f70:	f7fc ffe0 	bl	8001f34 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e170      	b.n	8005264 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f82:	4b2c      	ldr	r3, [pc, #176]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0f0      	beq.n	8004f70 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f8e:	4b29      	ldr	r3, [pc, #164]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	4925      	ldr	r1, [pc, #148]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	600b      	str	r3, [r1, #0]
 8004fa2:	e015      	b.n	8004fd0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fa4:	4b24      	ldr	r3, [pc, #144]	; (8005038 <HAL_RCC_OscConfig+0x274>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004faa:	f7fc ffc3 	bl	8001f34 <HAL_GetTick>
 8004fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fb0:	e008      	b.n	8004fc4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fb2:	f7fc ffbf 	bl	8001f34 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d901      	bls.n	8004fc4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e14f      	b.n	8005264 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fc4:	4b1b      	ldr	r3, [pc, #108]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1f0      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0308 	and.w	r3, r3, #8
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d037      	beq.n	800504c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d016      	beq.n	8005012 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fe4:	4b15      	ldr	r3, [pc, #84]	; (800503c <HAL_RCC_OscConfig+0x278>)
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fea:	f7fc ffa3 	bl	8001f34 <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ff0:	e008      	b.n	8005004 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ff2:	f7fc ff9f 	bl	8001f34 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e12f      	b.n	8005264 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005004:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <HAL_RCC_OscConfig+0x270>)
 8005006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0f0      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x22e>
 8005010:	e01c      	b.n	800504c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005012:	4b0a      	ldr	r3, [pc, #40]	; (800503c <HAL_RCC_OscConfig+0x278>)
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005018:	f7fc ff8c 	bl	8001f34 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800501e:	e00f      	b.n	8005040 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005020:	f7fc ff88 	bl	8001f34 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d908      	bls.n	8005040 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e118      	b.n	8005264 <HAL_RCC_OscConfig+0x4a0>
 8005032:	bf00      	nop
 8005034:	40023800 	.word	0x40023800
 8005038:	42470000 	.word	0x42470000
 800503c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005040:	4b8a      	ldr	r3, [pc, #552]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 8005042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1e9      	bne.n	8005020 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 8097 	beq.w	8005188 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800505a:	2300      	movs	r3, #0
 800505c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800505e:	4b83      	ldr	r3, [pc, #524]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10f      	bne.n	800508a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	4b7f      	ldr	r3, [pc, #508]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	4a7e      	ldr	r2, [pc, #504]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 8005074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005078:	6413      	str	r3, [r2, #64]	; 0x40
 800507a:	4b7c      	ldr	r3, [pc, #496]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005086:	2301      	movs	r3, #1
 8005088:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508a:	4b79      	ldr	r3, [pc, #484]	; (8005270 <HAL_RCC_OscConfig+0x4ac>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005092:	2b00      	cmp	r3, #0
 8005094:	d118      	bne.n	80050c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005096:	4b76      	ldr	r3, [pc, #472]	; (8005270 <HAL_RCC_OscConfig+0x4ac>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a75      	ldr	r2, [pc, #468]	; (8005270 <HAL_RCC_OscConfig+0x4ac>)
 800509c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050a2:	f7fc ff47 	bl	8001f34 <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050aa:	f7fc ff43 	bl	8001f34 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e0d3      	b.n	8005264 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050bc:	4b6c      	ldr	r3, [pc, #432]	; (8005270 <HAL_RCC_OscConfig+0x4ac>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0f0      	beq.n	80050aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d106      	bne.n	80050de <HAL_RCC_OscConfig+0x31a>
 80050d0:	4b66      	ldr	r3, [pc, #408]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 80050d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d4:	4a65      	ldr	r2, [pc, #404]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 80050d6:	f043 0301 	orr.w	r3, r3, #1
 80050da:	6713      	str	r3, [r2, #112]	; 0x70
 80050dc:	e01c      	b.n	8005118 <HAL_RCC_OscConfig+0x354>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	2b05      	cmp	r3, #5
 80050e4:	d10c      	bne.n	8005100 <HAL_RCC_OscConfig+0x33c>
 80050e6:	4b61      	ldr	r3, [pc, #388]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 80050e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ea:	4a60      	ldr	r2, [pc, #384]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 80050ec:	f043 0304 	orr.w	r3, r3, #4
 80050f0:	6713      	str	r3, [r2, #112]	; 0x70
 80050f2:	4b5e      	ldr	r3, [pc, #376]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 80050f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f6:	4a5d      	ldr	r2, [pc, #372]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 80050f8:	f043 0301 	orr.w	r3, r3, #1
 80050fc:	6713      	str	r3, [r2, #112]	; 0x70
 80050fe:	e00b      	b.n	8005118 <HAL_RCC_OscConfig+0x354>
 8005100:	4b5a      	ldr	r3, [pc, #360]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 8005102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005104:	4a59      	ldr	r2, [pc, #356]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 8005106:	f023 0301 	bic.w	r3, r3, #1
 800510a:	6713      	str	r3, [r2, #112]	; 0x70
 800510c:	4b57      	ldr	r3, [pc, #348]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 800510e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005110:	4a56      	ldr	r2, [pc, #344]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 8005112:	f023 0304 	bic.w	r3, r3, #4
 8005116:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d015      	beq.n	800514c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005120:	f7fc ff08 	bl	8001f34 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005126:	e00a      	b.n	800513e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005128:	f7fc ff04 	bl	8001f34 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	f241 3288 	movw	r2, #5000	; 0x1388
 8005136:	4293      	cmp	r3, r2
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e092      	b.n	8005264 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800513e:	4b4b      	ldr	r3, [pc, #300]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 8005140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0ee      	beq.n	8005128 <HAL_RCC_OscConfig+0x364>
 800514a:	e014      	b.n	8005176 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514c:	f7fc fef2 	bl	8001f34 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005152:	e00a      	b.n	800516a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005154:	f7fc feee 	bl	8001f34 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005162:	4293      	cmp	r3, r2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e07c      	b.n	8005264 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800516a:	4b40      	ldr	r3, [pc, #256]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 800516c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1ee      	bne.n	8005154 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005176:	7dfb      	ldrb	r3, [r7, #23]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d105      	bne.n	8005188 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800517c:	4b3b      	ldr	r3, [pc, #236]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	4a3a      	ldr	r2, [pc, #232]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 8005182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005186:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d068      	beq.n	8005262 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005190:	4b36      	ldr	r3, [pc, #216]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 030c 	and.w	r3, r3, #12
 8005198:	2b08      	cmp	r3, #8
 800519a:	d060      	beq.n	800525e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d145      	bne.n	8005230 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a4:	4b33      	ldr	r3, [pc, #204]	; (8005274 <HAL_RCC_OscConfig+0x4b0>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051aa:	f7fc fec3 	bl	8001f34 <HAL_GetTick>
 80051ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b0:	e008      	b.n	80051c4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051b2:	f7fc febf 	bl	8001f34 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e04f      	b.n	8005264 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051c4:	4b29      	ldr	r3, [pc, #164]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1f0      	bne.n	80051b2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	69da      	ldr	r2, [r3, #28]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	019b      	lsls	r3, r3, #6
 80051e0:	431a      	orrs	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e6:	085b      	lsrs	r3, r3, #1
 80051e8:	3b01      	subs	r3, #1
 80051ea:	041b      	lsls	r3, r3, #16
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f2:	061b      	lsls	r3, r3, #24
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fa:	071b      	lsls	r3, r3, #28
 80051fc:	491b      	ldr	r1, [pc, #108]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005202:	4b1c      	ldr	r3, [pc, #112]	; (8005274 <HAL_RCC_OscConfig+0x4b0>)
 8005204:	2201      	movs	r2, #1
 8005206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005208:	f7fc fe94 	bl	8001f34 <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005210:	f7fc fe90 	bl	8001f34 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e020      	b.n	8005264 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005222:	4b12      	ldr	r3, [pc, #72]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0f0      	beq.n	8005210 <HAL_RCC_OscConfig+0x44c>
 800522e:	e018      	b.n	8005262 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005230:	4b10      	ldr	r3, [pc, #64]	; (8005274 <HAL_RCC_OscConfig+0x4b0>)
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005236:	f7fc fe7d 	bl	8001f34 <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800523c:	e008      	b.n	8005250 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800523e:	f7fc fe79 	bl	8001f34 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e009      	b.n	8005264 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005250:	4b06      	ldr	r3, [pc, #24]	; (800526c <HAL_RCC_OscConfig+0x4a8>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1f0      	bne.n	800523e <HAL_RCC_OscConfig+0x47a>
 800525c:	e001      	b.n	8005262 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40023800 	.word	0x40023800
 8005270:	40007000 	.word	0x40007000
 8005274:	42470060 	.word	0x42470060

08005278 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e03f      	b.n	800530a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d106      	bne.n	80052a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7fc fcec 	bl	8001c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2224      	movs	r2, #36	; 0x24
 80052a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f829 	bl	8005314 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	695a      	ldr	r2, [r3, #20]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005318:	b085      	sub	sp, #20
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	431a      	orrs	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	4313      	orrs	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005356:	f023 030c 	bic.w	r3, r3, #12
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6812      	ldr	r2, [r2, #0]
 800535e:	68f9      	ldr	r1, [r7, #12]
 8005360:	430b      	orrs	r3, r1
 8005362:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699a      	ldr	r2, [r3, #24]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005382:	f040 818b 	bne.w	800569c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4ac1      	ldr	r2, [pc, #772]	; (8005690 <UART_SetConfig+0x37c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d005      	beq.n	800539c <UART_SetConfig+0x88>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4abf      	ldr	r2, [pc, #764]	; (8005694 <UART_SetConfig+0x380>)
 8005396:	4293      	cmp	r3, r2
 8005398:	f040 80bd 	bne.w	8005516 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800539c:	f7ff f834 	bl	8004408 <HAL_RCC_GetPCLK2Freq>
 80053a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	461d      	mov	r5, r3
 80053a6:	f04f 0600 	mov.w	r6, #0
 80053aa:	46a8      	mov	r8, r5
 80053ac:	46b1      	mov	r9, r6
 80053ae:	eb18 0308 	adds.w	r3, r8, r8
 80053b2:	eb49 0409 	adc.w	r4, r9, r9
 80053b6:	4698      	mov	r8, r3
 80053b8:	46a1      	mov	r9, r4
 80053ba:	eb18 0805 	adds.w	r8, r8, r5
 80053be:	eb49 0906 	adc.w	r9, r9, r6
 80053c2:	f04f 0100 	mov.w	r1, #0
 80053c6:	f04f 0200 	mov.w	r2, #0
 80053ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80053ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80053d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80053d6:	4688      	mov	r8, r1
 80053d8:	4691      	mov	r9, r2
 80053da:	eb18 0005 	adds.w	r0, r8, r5
 80053de:	eb49 0106 	adc.w	r1, r9, r6
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	461d      	mov	r5, r3
 80053e8:	f04f 0600 	mov.w	r6, #0
 80053ec:	196b      	adds	r3, r5, r5
 80053ee:	eb46 0406 	adc.w	r4, r6, r6
 80053f2:	461a      	mov	r2, r3
 80053f4:	4623      	mov	r3, r4
 80053f6:	f7fa ff05 	bl	8000204 <__aeabi_uldivmod>
 80053fa:	4603      	mov	r3, r0
 80053fc:	460c      	mov	r4, r1
 80053fe:	461a      	mov	r2, r3
 8005400:	4ba5      	ldr	r3, [pc, #660]	; (8005698 <UART_SetConfig+0x384>)
 8005402:	fba3 2302 	umull	r2, r3, r3, r2
 8005406:	095b      	lsrs	r3, r3, #5
 8005408:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	461d      	mov	r5, r3
 8005410:	f04f 0600 	mov.w	r6, #0
 8005414:	46a9      	mov	r9, r5
 8005416:	46b2      	mov	sl, r6
 8005418:	eb19 0309 	adds.w	r3, r9, r9
 800541c:	eb4a 040a 	adc.w	r4, sl, sl
 8005420:	4699      	mov	r9, r3
 8005422:	46a2      	mov	sl, r4
 8005424:	eb19 0905 	adds.w	r9, r9, r5
 8005428:	eb4a 0a06 	adc.w	sl, sl, r6
 800542c:	f04f 0100 	mov.w	r1, #0
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005438:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800543c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005440:	4689      	mov	r9, r1
 8005442:	4692      	mov	sl, r2
 8005444:	eb19 0005 	adds.w	r0, r9, r5
 8005448:	eb4a 0106 	adc.w	r1, sl, r6
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	461d      	mov	r5, r3
 8005452:	f04f 0600 	mov.w	r6, #0
 8005456:	196b      	adds	r3, r5, r5
 8005458:	eb46 0406 	adc.w	r4, r6, r6
 800545c:	461a      	mov	r2, r3
 800545e:	4623      	mov	r3, r4
 8005460:	f7fa fed0 	bl	8000204 <__aeabi_uldivmod>
 8005464:	4603      	mov	r3, r0
 8005466:	460c      	mov	r4, r1
 8005468:	461a      	mov	r2, r3
 800546a:	4b8b      	ldr	r3, [pc, #556]	; (8005698 <UART_SetConfig+0x384>)
 800546c:	fba3 1302 	umull	r1, r3, r3, r2
 8005470:	095b      	lsrs	r3, r3, #5
 8005472:	2164      	movs	r1, #100	; 0x64
 8005474:	fb01 f303 	mul.w	r3, r1, r3
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	3332      	adds	r3, #50	; 0x32
 800547e:	4a86      	ldr	r2, [pc, #536]	; (8005698 <UART_SetConfig+0x384>)
 8005480:	fba2 2303 	umull	r2, r3, r2, r3
 8005484:	095b      	lsrs	r3, r3, #5
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800548c:	4498      	add	r8, r3
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	461d      	mov	r5, r3
 8005492:	f04f 0600 	mov.w	r6, #0
 8005496:	46a9      	mov	r9, r5
 8005498:	46b2      	mov	sl, r6
 800549a:	eb19 0309 	adds.w	r3, r9, r9
 800549e:	eb4a 040a 	adc.w	r4, sl, sl
 80054a2:	4699      	mov	r9, r3
 80054a4:	46a2      	mov	sl, r4
 80054a6:	eb19 0905 	adds.w	r9, r9, r5
 80054aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80054ae:	f04f 0100 	mov.w	r1, #0
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054c2:	4689      	mov	r9, r1
 80054c4:	4692      	mov	sl, r2
 80054c6:	eb19 0005 	adds.w	r0, r9, r5
 80054ca:	eb4a 0106 	adc.w	r1, sl, r6
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	461d      	mov	r5, r3
 80054d4:	f04f 0600 	mov.w	r6, #0
 80054d8:	196b      	adds	r3, r5, r5
 80054da:	eb46 0406 	adc.w	r4, r6, r6
 80054de:	461a      	mov	r2, r3
 80054e0:	4623      	mov	r3, r4
 80054e2:	f7fa fe8f 	bl	8000204 <__aeabi_uldivmod>
 80054e6:	4603      	mov	r3, r0
 80054e8:	460c      	mov	r4, r1
 80054ea:	461a      	mov	r2, r3
 80054ec:	4b6a      	ldr	r3, [pc, #424]	; (8005698 <UART_SetConfig+0x384>)
 80054ee:	fba3 1302 	umull	r1, r3, r3, r2
 80054f2:	095b      	lsrs	r3, r3, #5
 80054f4:	2164      	movs	r1, #100	; 0x64
 80054f6:	fb01 f303 	mul.w	r3, r1, r3
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	3332      	adds	r3, #50	; 0x32
 8005500:	4a65      	ldr	r2, [pc, #404]	; (8005698 <UART_SetConfig+0x384>)
 8005502:	fba2 2303 	umull	r2, r3, r2, r3
 8005506:	095b      	lsrs	r3, r3, #5
 8005508:	f003 0207 	and.w	r2, r3, #7
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4442      	add	r2, r8
 8005512:	609a      	str	r2, [r3, #8]
 8005514:	e26f      	b.n	80059f6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005516:	f7fe ff63 	bl	80043e0 <HAL_RCC_GetPCLK1Freq>
 800551a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	461d      	mov	r5, r3
 8005520:	f04f 0600 	mov.w	r6, #0
 8005524:	46a8      	mov	r8, r5
 8005526:	46b1      	mov	r9, r6
 8005528:	eb18 0308 	adds.w	r3, r8, r8
 800552c:	eb49 0409 	adc.w	r4, r9, r9
 8005530:	4698      	mov	r8, r3
 8005532:	46a1      	mov	r9, r4
 8005534:	eb18 0805 	adds.w	r8, r8, r5
 8005538:	eb49 0906 	adc.w	r9, r9, r6
 800553c:	f04f 0100 	mov.w	r1, #0
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005548:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800554c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005550:	4688      	mov	r8, r1
 8005552:	4691      	mov	r9, r2
 8005554:	eb18 0005 	adds.w	r0, r8, r5
 8005558:	eb49 0106 	adc.w	r1, r9, r6
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	461d      	mov	r5, r3
 8005562:	f04f 0600 	mov.w	r6, #0
 8005566:	196b      	adds	r3, r5, r5
 8005568:	eb46 0406 	adc.w	r4, r6, r6
 800556c:	461a      	mov	r2, r3
 800556e:	4623      	mov	r3, r4
 8005570:	f7fa fe48 	bl	8000204 <__aeabi_uldivmod>
 8005574:	4603      	mov	r3, r0
 8005576:	460c      	mov	r4, r1
 8005578:	461a      	mov	r2, r3
 800557a:	4b47      	ldr	r3, [pc, #284]	; (8005698 <UART_SetConfig+0x384>)
 800557c:	fba3 2302 	umull	r2, r3, r3, r2
 8005580:	095b      	lsrs	r3, r3, #5
 8005582:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	461d      	mov	r5, r3
 800558a:	f04f 0600 	mov.w	r6, #0
 800558e:	46a9      	mov	r9, r5
 8005590:	46b2      	mov	sl, r6
 8005592:	eb19 0309 	adds.w	r3, r9, r9
 8005596:	eb4a 040a 	adc.w	r4, sl, sl
 800559a:	4699      	mov	r9, r3
 800559c:	46a2      	mov	sl, r4
 800559e:	eb19 0905 	adds.w	r9, r9, r5
 80055a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80055a6:	f04f 0100 	mov.w	r1, #0
 80055aa:	f04f 0200 	mov.w	r2, #0
 80055ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055ba:	4689      	mov	r9, r1
 80055bc:	4692      	mov	sl, r2
 80055be:	eb19 0005 	adds.w	r0, r9, r5
 80055c2:	eb4a 0106 	adc.w	r1, sl, r6
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	461d      	mov	r5, r3
 80055cc:	f04f 0600 	mov.w	r6, #0
 80055d0:	196b      	adds	r3, r5, r5
 80055d2:	eb46 0406 	adc.w	r4, r6, r6
 80055d6:	461a      	mov	r2, r3
 80055d8:	4623      	mov	r3, r4
 80055da:	f7fa fe13 	bl	8000204 <__aeabi_uldivmod>
 80055de:	4603      	mov	r3, r0
 80055e0:	460c      	mov	r4, r1
 80055e2:	461a      	mov	r2, r3
 80055e4:	4b2c      	ldr	r3, [pc, #176]	; (8005698 <UART_SetConfig+0x384>)
 80055e6:	fba3 1302 	umull	r1, r3, r3, r2
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	2164      	movs	r1, #100	; 0x64
 80055ee:	fb01 f303 	mul.w	r3, r1, r3
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	3332      	adds	r3, #50	; 0x32
 80055f8:	4a27      	ldr	r2, [pc, #156]	; (8005698 <UART_SetConfig+0x384>)
 80055fa:	fba2 2303 	umull	r2, r3, r2, r3
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005606:	4498      	add	r8, r3
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	461d      	mov	r5, r3
 800560c:	f04f 0600 	mov.w	r6, #0
 8005610:	46a9      	mov	r9, r5
 8005612:	46b2      	mov	sl, r6
 8005614:	eb19 0309 	adds.w	r3, r9, r9
 8005618:	eb4a 040a 	adc.w	r4, sl, sl
 800561c:	4699      	mov	r9, r3
 800561e:	46a2      	mov	sl, r4
 8005620:	eb19 0905 	adds.w	r9, r9, r5
 8005624:	eb4a 0a06 	adc.w	sl, sl, r6
 8005628:	f04f 0100 	mov.w	r1, #0
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005634:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005638:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800563c:	4689      	mov	r9, r1
 800563e:	4692      	mov	sl, r2
 8005640:	eb19 0005 	adds.w	r0, r9, r5
 8005644:	eb4a 0106 	adc.w	r1, sl, r6
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	461d      	mov	r5, r3
 800564e:	f04f 0600 	mov.w	r6, #0
 8005652:	196b      	adds	r3, r5, r5
 8005654:	eb46 0406 	adc.w	r4, r6, r6
 8005658:	461a      	mov	r2, r3
 800565a:	4623      	mov	r3, r4
 800565c:	f7fa fdd2 	bl	8000204 <__aeabi_uldivmod>
 8005660:	4603      	mov	r3, r0
 8005662:	460c      	mov	r4, r1
 8005664:	461a      	mov	r2, r3
 8005666:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <UART_SetConfig+0x384>)
 8005668:	fba3 1302 	umull	r1, r3, r3, r2
 800566c:	095b      	lsrs	r3, r3, #5
 800566e:	2164      	movs	r1, #100	; 0x64
 8005670:	fb01 f303 	mul.w	r3, r1, r3
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	3332      	adds	r3, #50	; 0x32
 800567a:	4a07      	ldr	r2, [pc, #28]	; (8005698 <UART_SetConfig+0x384>)
 800567c:	fba2 2303 	umull	r2, r3, r2, r3
 8005680:	095b      	lsrs	r3, r3, #5
 8005682:	f003 0207 	and.w	r2, r3, #7
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4442      	add	r2, r8
 800568c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800568e:	e1b2      	b.n	80059f6 <UART_SetConfig+0x6e2>
 8005690:	40011000 	.word	0x40011000
 8005694:	40011400 	.word	0x40011400
 8005698:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4ad7      	ldr	r2, [pc, #860]	; (8005a00 <UART_SetConfig+0x6ec>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d005      	beq.n	80056b2 <UART_SetConfig+0x39e>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4ad6      	ldr	r2, [pc, #856]	; (8005a04 <UART_SetConfig+0x6f0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	f040 80d1 	bne.w	8005854 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80056b2:	f7fe fea9 	bl	8004408 <HAL_RCC_GetPCLK2Freq>
 80056b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	469a      	mov	sl, r3
 80056bc:	f04f 0b00 	mov.w	fp, #0
 80056c0:	46d0      	mov	r8, sl
 80056c2:	46d9      	mov	r9, fp
 80056c4:	eb18 0308 	adds.w	r3, r8, r8
 80056c8:	eb49 0409 	adc.w	r4, r9, r9
 80056cc:	4698      	mov	r8, r3
 80056ce:	46a1      	mov	r9, r4
 80056d0:	eb18 080a 	adds.w	r8, r8, sl
 80056d4:	eb49 090b 	adc.w	r9, r9, fp
 80056d8:	f04f 0100 	mov.w	r1, #0
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80056e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80056e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80056ec:	4688      	mov	r8, r1
 80056ee:	4691      	mov	r9, r2
 80056f0:	eb1a 0508 	adds.w	r5, sl, r8
 80056f4:	eb4b 0609 	adc.w	r6, fp, r9
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	4619      	mov	r1, r3
 80056fe:	f04f 0200 	mov.w	r2, #0
 8005702:	f04f 0300 	mov.w	r3, #0
 8005706:	f04f 0400 	mov.w	r4, #0
 800570a:	0094      	lsls	r4, r2, #2
 800570c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005710:	008b      	lsls	r3, r1, #2
 8005712:	461a      	mov	r2, r3
 8005714:	4623      	mov	r3, r4
 8005716:	4628      	mov	r0, r5
 8005718:	4631      	mov	r1, r6
 800571a:	f7fa fd73 	bl	8000204 <__aeabi_uldivmod>
 800571e:	4603      	mov	r3, r0
 8005720:	460c      	mov	r4, r1
 8005722:	461a      	mov	r2, r3
 8005724:	4bb8      	ldr	r3, [pc, #736]	; (8005a08 <UART_SetConfig+0x6f4>)
 8005726:	fba3 2302 	umull	r2, r3, r3, r2
 800572a:	095b      	lsrs	r3, r3, #5
 800572c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	469b      	mov	fp, r3
 8005734:	f04f 0c00 	mov.w	ip, #0
 8005738:	46d9      	mov	r9, fp
 800573a:	46e2      	mov	sl, ip
 800573c:	eb19 0309 	adds.w	r3, r9, r9
 8005740:	eb4a 040a 	adc.w	r4, sl, sl
 8005744:	4699      	mov	r9, r3
 8005746:	46a2      	mov	sl, r4
 8005748:	eb19 090b 	adds.w	r9, r9, fp
 800574c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005750:	f04f 0100 	mov.w	r1, #0
 8005754:	f04f 0200 	mov.w	r2, #0
 8005758:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800575c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005760:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005764:	4689      	mov	r9, r1
 8005766:	4692      	mov	sl, r2
 8005768:	eb1b 0509 	adds.w	r5, fp, r9
 800576c:	eb4c 060a 	adc.w	r6, ip, sl
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	4619      	mov	r1, r3
 8005776:	f04f 0200 	mov.w	r2, #0
 800577a:	f04f 0300 	mov.w	r3, #0
 800577e:	f04f 0400 	mov.w	r4, #0
 8005782:	0094      	lsls	r4, r2, #2
 8005784:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005788:	008b      	lsls	r3, r1, #2
 800578a:	461a      	mov	r2, r3
 800578c:	4623      	mov	r3, r4
 800578e:	4628      	mov	r0, r5
 8005790:	4631      	mov	r1, r6
 8005792:	f7fa fd37 	bl	8000204 <__aeabi_uldivmod>
 8005796:	4603      	mov	r3, r0
 8005798:	460c      	mov	r4, r1
 800579a:	461a      	mov	r2, r3
 800579c:	4b9a      	ldr	r3, [pc, #616]	; (8005a08 <UART_SetConfig+0x6f4>)
 800579e:	fba3 1302 	umull	r1, r3, r3, r2
 80057a2:	095b      	lsrs	r3, r3, #5
 80057a4:	2164      	movs	r1, #100	; 0x64
 80057a6:	fb01 f303 	mul.w	r3, r1, r3
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	3332      	adds	r3, #50	; 0x32
 80057b0:	4a95      	ldr	r2, [pc, #596]	; (8005a08 <UART_SetConfig+0x6f4>)
 80057b2:	fba2 2303 	umull	r2, r3, r2, r3
 80057b6:	095b      	lsrs	r3, r3, #5
 80057b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057bc:	4498      	add	r8, r3
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	469b      	mov	fp, r3
 80057c2:	f04f 0c00 	mov.w	ip, #0
 80057c6:	46d9      	mov	r9, fp
 80057c8:	46e2      	mov	sl, ip
 80057ca:	eb19 0309 	adds.w	r3, r9, r9
 80057ce:	eb4a 040a 	adc.w	r4, sl, sl
 80057d2:	4699      	mov	r9, r3
 80057d4:	46a2      	mov	sl, r4
 80057d6:	eb19 090b 	adds.w	r9, r9, fp
 80057da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80057de:	f04f 0100 	mov.w	r1, #0
 80057e2:	f04f 0200 	mov.w	r2, #0
 80057e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057f2:	4689      	mov	r9, r1
 80057f4:	4692      	mov	sl, r2
 80057f6:	eb1b 0509 	adds.w	r5, fp, r9
 80057fa:	eb4c 060a 	adc.w	r6, ip, sl
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	4619      	mov	r1, r3
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	f04f 0400 	mov.w	r4, #0
 8005810:	0094      	lsls	r4, r2, #2
 8005812:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005816:	008b      	lsls	r3, r1, #2
 8005818:	461a      	mov	r2, r3
 800581a:	4623      	mov	r3, r4
 800581c:	4628      	mov	r0, r5
 800581e:	4631      	mov	r1, r6
 8005820:	f7fa fcf0 	bl	8000204 <__aeabi_uldivmod>
 8005824:	4603      	mov	r3, r0
 8005826:	460c      	mov	r4, r1
 8005828:	461a      	mov	r2, r3
 800582a:	4b77      	ldr	r3, [pc, #476]	; (8005a08 <UART_SetConfig+0x6f4>)
 800582c:	fba3 1302 	umull	r1, r3, r3, r2
 8005830:	095b      	lsrs	r3, r3, #5
 8005832:	2164      	movs	r1, #100	; 0x64
 8005834:	fb01 f303 	mul.w	r3, r1, r3
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	3332      	adds	r3, #50	; 0x32
 800583e:	4a72      	ldr	r2, [pc, #456]	; (8005a08 <UART_SetConfig+0x6f4>)
 8005840:	fba2 2303 	umull	r2, r3, r2, r3
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	f003 020f 	and.w	r2, r3, #15
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4442      	add	r2, r8
 8005850:	609a      	str	r2, [r3, #8]
 8005852:	e0d0      	b.n	80059f6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005854:	f7fe fdc4 	bl	80043e0 <HAL_RCC_GetPCLK1Freq>
 8005858:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	469a      	mov	sl, r3
 800585e:	f04f 0b00 	mov.w	fp, #0
 8005862:	46d0      	mov	r8, sl
 8005864:	46d9      	mov	r9, fp
 8005866:	eb18 0308 	adds.w	r3, r8, r8
 800586a:	eb49 0409 	adc.w	r4, r9, r9
 800586e:	4698      	mov	r8, r3
 8005870:	46a1      	mov	r9, r4
 8005872:	eb18 080a 	adds.w	r8, r8, sl
 8005876:	eb49 090b 	adc.w	r9, r9, fp
 800587a:	f04f 0100 	mov.w	r1, #0
 800587e:	f04f 0200 	mov.w	r2, #0
 8005882:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005886:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800588a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800588e:	4688      	mov	r8, r1
 8005890:	4691      	mov	r9, r2
 8005892:	eb1a 0508 	adds.w	r5, sl, r8
 8005896:	eb4b 0609 	adc.w	r6, fp, r9
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	4619      	mov	r1, r3
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	f04f 0400 	mov.w	r4, #0
 80058ac:	0094      	lsls	r4, r2, #2
 80058ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058b2:	008b      	lsls	r3, r1, #2
 80058b4:	461a      	mov	r2, r3
 80058b6:	4623      	mov	r3, r4
 80058b8:	4628      	mov	r0, r5
 80058ba:	4631      	mov	r1, r6
 80058bc:	f7fa fca2 	bl	8000204 <__aeabi_uldivmod>
 80058c0:	4603      	mov	r3, r0
 80058c2:	460c      	mov	r4, r1
 80058c4:	461a      	mov	r2, r3
 80058c6:	4b50      	ldr	r3, [pc, #320]	; (8005a08 <UART_SetConfig+0x6f4>)
 80058c8:	fba3 2302 	umull	r2, r3, r3, r2
 80058cc:	095b      	lsrs	r3, r3, #5
 80058ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	469b      	mov	fp, r3
 80058d6:	f04f 0c00 	mov.w	ip, #0
 80058da:	46d9      	mov	r9, fp
 80058dc:	46e2      	mov	sl, ip
 80058de:	eb19 0309 	adds.w	r3, r9, r9
 80058e2:	eb4a 040a 	adc.w	r4, sl, sl
 80058e6:	4699      	mov	r9, r3
 80058e8:	46a2      	mov	sl, r4
 80058ea:	eb19 090b 	adds.w	r9, r9, fp
 80058ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80058f2:	f04f 0100 	mov.w	r1, #0
 80058f6:	f04f 0200 	mov.w	r2, #0
 80058fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005902:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005906:	4689      	mov	r9, r1
 8005908:	4692      	mov	sl, r2
 800590a:	eb1b 0509 	adds.w	r5, fp, r9
 800590e:	eb4c 060a 	adc.w	r6, ip, sl
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	4619      	mov	r1, r3
 8005918:	f04f 0200 	mov.w	r2, #0
 800591c:	f04f 0300 	mov.w	r3, #0
 8005920:	f04f 0400 	mov.w	r4, #0
 8005924:	0094      	lsls	r4, r2, #2
 8005926:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800592a:	008b      	lsls	r3, r1, #2
 800592c:	461a      	mov	r2, r3
 800592e:	4623      	mov	r3, r4
 8005930:	4628      	mov	r0, r5
 8005932:	4631      	mov	r1, r6
 8005934:	f7fa fc66 	bl	8000204 <__aeabi_uldivmod>
 8005938:	4603      	mov	r3, r0
 800593a:	460c      	mov	r4, r1
 800593c:	461a      	mov	r2, r3
 800593e:	4b32      	ldr	r3, [pc, #200]	; (8005a08 <UART_SetConfig+0x6f4>)
 8005940:	fba3 1302 	umull	r1, r3, r3, r2
 8005944:	095b      	lsrs	r3, r3, #5
 8005946:	2164      	movs	r1, #100	; 0x64
 8005948:	fb01 f303 	mul.w	r3, r1, r3
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	3332      	adds	r3, #50	; 0x32
 8005952:	4a2d      	ldr	r2, [pc, #180]	; (8005a08 <UART_SetConfig+0x6f4>)
 8005954:	fba2 2303 	umull	r2, r3, r2, r3
 8005958:	095b      	lsrs	r3, r3, #5
 800595a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800595e:	4498      	add	r8, r3
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	469b      	mov	fp, r3
 8005964:	f04f 0c00 	mov.w	ip, #0
 8005968:	46d9      	mov	r9, fp
 800596a:	46e2      	mov	sl, ip
 800596c:	eb19 0309 	adds.w	r3, r9, r9
 8005970:	eb4a 040a 	adc.w	r4, sl, sl
 8005974:	4699      	mov	r9, r3
 8005976:	46a2      	mov	sl, r4
 8005978:	eb19 090b 	adds.w	r9, r9, fp
 800597c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005980:	f04f 0100 	mov.w	r1, #0
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800598c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005990:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005994:	4689      	mov	r9, r1
 8005996:	4692      	mov	sl, r2
 8005998:	eb1b 0509 	adds.w	r5, fp, r9
 800599c:	eb4c 060a 	adc.w	r6, ip, sl
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	4619      	mov	r1, r3
 80059a6:	f04f 0200 	mov.w	r2, #0
 80059aa:	f04f 0300 	mov.w	r3, #0
 80059ae:	f04f 0400 	mov.w	r4, #0
 80059b2:	0094      	lsls	r4, r2, #2
 80059b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059b8:	008b      	lsls	r3, r1, #2
 80059ba:	461a      	mov	r2, r3
 80059bc:	4623      	mov	r3, r4
 80059be:	4628      	mov	r0, r5
 80059c0:	4631      	mov	r1, r6
 80059c2:	f7fa fc1f 	bl	8000204 <__aeabi_uldivmod>
 80059c6:	4603      	mov	r3, r0
 80059c8:	460c      	mov	r4, r1
 80059ca:	461a      	mov	r2, r3
 80059cc:	4b0e      	ldr	r3, [pc, #56]	; (8005a08 <UART_SetConfig+0x6f4>)
 80059ce:	fba3 1302 	umull	r1, r3, r3, r2
 80059d2:	095b      	lsrs	r3, r3, #5
 80059d4:	2164      	movs	r1, #100	; 0x64
 80059d6:	fb01 f303 	mul.w	r3, r1, r3
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	3332      	adds	r3, #50	; 0x32
 80059e0:	4a09      	ldr	r2, [pc, #36]	; (8005a08 <UART_SetConfig+0x6f4>)
 80059e2:	fba2 2303 	umull	r2, r3, r2, r3
 80059e6:	095b      	lsrs	r3, r3, #5
 80059e8:	f003 020f 	and.w	r2, r3, #15
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4442      	add	r2, r8
 80059f2:	609a      	str	r2, [r3, #8]
}
 80059f4:	e7ff      	b.n	80059f6 <UART_SetConfig+0x6e2>
 80059f6:	bf00      	nop
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a00:	40011000 	.word	0x40011000
 8005a04:	40011400 	.word	0x40011400
 8005a08:	51eb851f 	.word	0x51eb851f

08005a0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a0c:	b084      	sub	sp, #16
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	f107 001c 	add.w	r0, r7, #28
 8005a1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d122      	bne.n	8005a6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d105      	bne.n	8005a5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f001 fac0 	bl	8006fe4 <USB_CoreReset>
 8005a64:	4603      	mov	r3, r0
 8005a66:	73fb      	strb	r3, [r7, #15]
 8005a68:	e01a      	b.n	8005aa0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f001 fab4 	bl	8006fe4 <USB_CoreReset>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d106      	bne.n	8005a94 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	639a      	str	r2, [r3, #56]	; 0x38
 8005a92:	e005      	b.n	8005aa0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d10b      	bne.n	8005abe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f043 0206 	orr.w	r2, r3, #6
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f043 0220 	orr.w	r2, r3, #32
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005aca:	b004      	add	sp, #16
 8005acc:	4770      	bx	lr
	...

08005ad0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	4613      	mov	r3, r2
 8005adc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005ade:	79fb      	ldrb	r3, [r7, #7]
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d165      	bne.n	8005bb0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	4a41      	ldr	r2, [pc, #260]	; (8005bec <USB_SetTurnaroundTime+0x11c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d906      	bls.n	8005afa <USB_SetTurnaroundTime+0x2a>
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	4a40      	ldr	r2, [pc, #256]	; (8005bf0 <USB_SetTurnaroundTime+0x120>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d802      	bhi.n	8005afa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005af4:	230f      	movs	r3, #15
 8005af6:	617b      	str	r3, [r7, #20]
 8005af8:	e062      	b.n	8005bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	4a3c      	ldr	r2, [pc, #240]	; (8005bf0 <USB_SetTurnaroundTime+0x120>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d906      	bls.n	8005b10 <USB_SetTurnaroundTime+0x40>
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	4a3b      	ldr	r2, [pc, #236]	; (8005bf4 <USB_SetTurnaroundTime+0x124>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d802      	bhi.n	8005b10 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005b0a:	230e      	movs	r3, #14
 8005b0c:	617b      	str	r3, [r7, #20]
 8005b0e:	e057      	b.n	8005bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	4a38      	ldr	r2, [pc, #224]	; (8005bf4 <USB_SetTurnaroundTime+0x124>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d906      	bls.n	8005b26 <USB_SetTurnaroundTime+0x56>
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4a37      	ldr	r2, [pc, #220]	; (8005bf8 <USB_SetTurnaroundTime+0x128>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d802      	bhi.n	8005b26 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005b20:	230d      	movs	r3, #13
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	e04c      	b.n	8005bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	4a33      	ldr	r2, [pc, #204]	; (8005bf8 <USB_SetTurnaroundTime+0x128>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d906      	bls.n	8005b3c <USB_SetTurnaroundTime+0x6c>
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	4a32      	ldr	r2, [pc, #200]	; (8005bfc <USB_SetTurnaroundTime+0x12c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d802      	bhi.n	8005b3c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005b36:	230c      	movs	r3, #12
 8005b38:	617b      	str	r3, [r7, #20]
 8005b3a:	e041      	b.n	8005bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	4a2f      	ldr	r2, [pc, #188]	; (8005bfc <USB_SetTurnaroundTime+0x12c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d906      	bls.n	8005b52 <USB_SetTurnaroundTime+0x82>
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	4a2e      	ldr	r2, [pc, #184]	; (8005c00 <USB_SetTurnaroundTime+0x130>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d802      	bhi.n	8005b52 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005b4c:	230b      	movs	r3, #11
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	e036      	b.n	8005bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	4a2a      	ldr	r2, [pc, #168]	; (8005c00 <USB_SetTurnaroundTime+0x130>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d906      	bls.n	8005b68 <USB_SetTurnaroundTime+0x98>
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	4a29      	ldr	r2, [pc, #164]	; (8005c04 <USB_SetTurnaroundTime+0x134>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d802      	bhi.n	8005b68 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005b62:	230a      	movs	r3, #10
 8005b64:	617b      	str	r3, [r7, #20]
 8005b66:	e02b      	b.n	8005bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	4a26      	ldr	r2, [pc, #152]	; (8005c04 <USB_SetTurnaroundTime+0x134>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d906      	bls.n	8005b7e <USB_SetTurnaroundTime+0xae>
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	4a25      	ldr	r2, [pc, #148]	; (8005c08 <USB_SetTurnaroundTime+0x138>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d802      	bhi.n	8005b7e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005b78:	2309      	movs	r3, #9
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	e020      	b.n	8005bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	4a21      	ldr	r2, [pc, #132]	; (8005c08 <USB_SetTurnaroundTime+0x138>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d906      	bls.n	8005b94 <USB_SetTurnaroundTime+0xc4>
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	4a20      	ldr	r2, [pc, #128]	; (8005c0c <USB_SetTurnaroundTime+0x13c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d802      	bhi.n	8005b94 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005b8e:	2308      	movs	r3, #8
 8005b90:	617b      	str	r3, [r7, #20]
 8005b92:	e015      	b.n	8005bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	4a1d      	ldr	r2, [pc, #116]	; (8005c0c <USB_SetTurnaroundTime+0x13c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d906      	bls.n	8005baa <USB_SetTurnaroundTime+0xda>
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	4a1c      	ldr	r2, [pc, #112]	; (8005c10 <USB_SetTurnaroundTime+0x140>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d802      	bhi.n	8005baa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005ba4:	2307      	movs	r3, #7
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	e00a      	b.n	8005bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005baa:	2306      	movs	r3, #6
 8005bac:	617b      	str	r3, [r7, #20]
 8005bae:	e007      	b.n	8005bc0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005bb0:	79fb      	ldrb	r3, [r7, #7]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d102      	bne.n	8005bbc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005bb6:	2309      	movs	r3, #9
 8005bb8:	617b      	str	r3, [r7, #20]
 8005bba:	e001      	b.n	8005bc0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005bbc:	2309      	movs	r3, #9
 8005bbe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	68da      	ldr	r2, [r3, #12]
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	029b      	lsls	r3, r3, #10
 8005bd4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	371c      	adds	r7, #28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	00d8acbf 	.word	0x00d8acbf
 8005bf0:	00e4e1bf 	.word	0x00e4e1bf
 8005bf4:	00f423ff 	.word	0x00f423ff
 8005bf8:	0106737f 	.word	0x0106737f
 8005bfc:	011a499f 	.word	0x011a499f
 8005c00:	01312cff 	.word	0x01312cff
 8005c04:	014ca43f 	.word	0x014ca43f
 8005c08:	016e35ff 	.word	0x016e35ff
 8005c0c:	01a6ab1f 	.word	0x01a6ab1f
 8005c10:	01e847ff 	.word	0x01e847ff

08005c14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f043 0201 	orr.w	r2, r3, #1
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f023 0201 	bic.w	r2, r3, #1
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c70:	78fb      	ldrb	r3, [r7, #3]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d106      	bne.n	8005c84 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	60da      	str	r2, [r3, #12]
 8005c82:	e00b      	b.n	8005c9c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c84:	78fb      	ldrb	r3, [r7, #3]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d106      	bne.n	8005c98 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	60da      	str	r2, [r3, #12]
 8005c96:	e001      	b.n	8005c9c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e003      	b.n	8005ca4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005c9c:	2032      	movs	r0, #50	; 0x32
 8005c9e:	f7fc f955 	bl	8001f4c <HAL_Delay>

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cac:	b084      	sub	sp, #16
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b086      	sub	sp, #24
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	613b      	str	r3, [r7, #16]
 8005cca:	e009      	b.n	8005ce0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	3340      	adds	r3, #64	; 0x40
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	613b      	str	r3, [r7, #16]
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	2b0e      	cmp	r3, #14
 8005ce4:	d9f2      	bls.n	8005ccc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d11c      	bne.n	8005d26 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cfa:	f043 0302 	orr.w	r3, r3, #2
 8005cfe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d04:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	e005      	b.n	8005d32 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d38:	461a      	mov	r2, r3
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d44:	4619      	mov	r1, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	680b      	ldr	r3, [r1, #0]
 8005d50:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d10c      	bne.n	8005d72 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d104      	bne.n	8005d68 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d5e:	2100      	movs	r1, #0
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f949 	bl	8005ff8 <USB_SetDevSpeed>
 8005d66:	e008      	b.n	8005d7a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d68:	2101      	movs	r1, #1
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f944 	bl	8005ff8 <USB_SetDevSpeed>
 8005d70:	e003      	b.n	8005d7a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d72:	2103      	movs	r1, #3
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f93f 	bl	8005ff8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d7a:	2110      	movs	r1, #16
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f8f3 	bl	8005f68 <USB_FlushTxFifo>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f911 	bl	8005fb4 <USB_FlushRxFifo>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da2:	461a      	mov	r2, r3
 8005da4:	2300      	movs	r3, #0
 8005da6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dae:	461a      	mov	r2, r3
 8005db0:	2300      	movs	r3, #0
 8005db2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dba:	461a      	mov	r2, r3
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	613b      	str	r3, [r7, #16]
 8005dc4:	e043      	b.n	8005e4e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ddc:	d118      	bne.n	8005e10 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10a      	bne.n	8005dfa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df0:	461a      	mov	r2, r3
 8005df2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	e013      	b.n	8005e22 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e06:	461a      	mov	r2, r3
 8005e08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	e008      	b.n	8005e22 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	2300      	movs	r3, #0
 8005e20:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2e:	461a      	mov	r2, r3
 8005e30:	2300      	movs	r3, #0
 8005e32:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e40:	461a      	mov	r2, r3
 8005e42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	613b      	str	r3, [r7, #16]
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d3b7      	bcc.n	8005dc6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e56:	2300      	movs	r3, #0
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	e043      	b.n	8005ee4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e72:	d118      	bne.n	8005ea6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10a      	bne.n	8005e90 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e86:	461a      	mov	r2, r3
 8005e88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	e013      	b.n	8005eb8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	e008      	b.n	8005eb8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005edc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	613b      	str	r3, [r7, #16]
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d3b7      	bcc.n	8005e5c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005efa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005efe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005f0c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d105      	bne.n	8005f20 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	f043 0210 	orr.w	r2, r3, #16
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	699a      	ldr	r2, [r3, #24]
 8005f24:	4b0f      	ldr	r3, [pc, #60]	; (8005f64 <USB_DevInit+0x2b8>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d005      	beq.n	8005f3e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	f043 0208 	orr.w	r2, r3, #8
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d107      	bne.n	8005f54 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f4c:	f043 0304 	orr.w	r3, r3, #4
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3718      	adds	r7, #24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f60:	b004      	add	sp, #16
 8005f62:	4770      	bx	lr
 8005f64:	803c3800 	.word	0x803c3800

08005f68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	019b      	lsls	r3, r3, #6
 8005f7a:	f043 0220 	orr.w	r2, r3, #32
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3301      	adds	r3, #1
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4a09      	ldr	r2, [pc, #36]	; (8005fb0 <USB_FlushTxFifo+0x48>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d901      	bls.n	8005f94 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e006      	b.n	8005fa2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	f003 0320 	and.w	r3, r3, #32
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	d0f0      	beq.n	8005f82 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	00030d40 	.word	0x00030d40

08005fb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2210      	movs	r2, #16
 8005fc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4a09      	ldr	r2, [pc, #36]	; (8005ff4 <USB_FlushRxFifo+0x40>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d901      	bls.n	8005fd8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e006      	b.n	8005fe6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	f003 0310 	and.w	r3, r3, #16
 8005fe0:	2b10      	cmp	r3, #16
 8005fe2:	d0f0      	beq.n	8005fc6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	00030d40 	.word	0x00030d40

08005ff8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	460b      	mov	r3, r1
 8006002:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	68f9      	ldr	r1, [r7, #12]
 8006014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006018:	4313      	orrs	r3, r2
 800601a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800602a:	b480      	push	{r7}
 800602c:	b087      	sub	sp, #28
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 0306 	and.w	r3, r3, #6
 8006042:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d102      	bne.n	8006050 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800604a:	2300      	movs	r3, #0
 800604c:	75fb      	strb	r3, [r7, #23]
 800604e:	e00a      	b.n	8006066 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2b02      	cmp	r3, #2
 8006054:	d002      	beq.n	800605c <USB_GetDevSpeed+0x32>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b06      	cmp	r3, #6
 800605a:	d102      	bne.n	8006062 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800605c:	2302      	movs	r3, #2
 800605e:	75fb      	strb	r3, [r7, #23]
 8006060:	e001      	b.n	8006066 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006062:	230f      	movs	r3, #15
 8006064:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006066:	7dfb      	ldrb	r3, [r7, #23]
}
 8006068:	4618      	mov	r0, r3
 800606a:	371c      	adds	r7, #28
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	785b      	ldrb	r3, [r3, #1]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d13a      	bne.n	8006106 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006096:	69da      	ldr	r2, [r3, #28]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	f003 030f 	and.w	r3, r3, #15
 80060a0:	2101      	movs	r1, #1
 80060a2:	fa01 f303 	lsl.w	r3, r1, r3
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	68f9      	ldr	r1, [r7, #12]
 80060aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060ae:	4313      	orrs	r3, r2
 80060b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d155      	bne.n	8006174 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	78db      	ldrb	r3, [r3, #3]
 80060e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	059b      	lsls	r3, r3, #22
 80060ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060ec:	4313      	orrs	r3, r2
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	0151      	lsls	r1, r2, #5
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	440a      	add	r2, r1
 80060f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	e036      	b.n	8006174 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800610c:	69da      	ldr	r2, [r3, #28]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	f003 030f 	and.w	r3, r3, #15
 8006116:	2101      	movs	r1, #1
 8006118:	fa01 f303 	lsl.w	r3, r1, r3
 800611c:	041b      	lsls	r3, r3, #16
 800611e:	68f9      	ldr	r1, [r7, #12]
 8006120:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006124:	4313      	orrs	r3, r2
 8006126:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d11a      	bne.n	8006174 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	4413      	add	r3, r2
 8006146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	78db      	ldrb	r3, [r3, #3]
 8006158:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800615a:	430b      	orrs	r3, r1
 800615c:	4313      	orrs	r3, r2
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	0151      	lsls	r1, r2, #5
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	440a      	add	r2, r1
 8006166:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800616a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800616e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006172:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
	...

08006184 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	785b      	ldrb	r3, [r3, #1]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d161      	bne.n	8006264 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061b6:	d11f      	bne.n	80061f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	0151      	lsls	r1, r2, #5
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	440a      	add	r2, r1
 80061ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	0151      	lsls	r1, r2, #5
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	440a      	add	r2, r1
 80061ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	f003 030f 	and.w	r3, r3, #15
 8006208:	2101      	movs	r1, #1
 800620a:	fa01 f303 	lsl.w	r3, r1, r3
 800620e:	b29b      	uxth	r3, r3
 8006210:	43db      	mvns	r3, r3
 8006212:	68f9      	ldr	r1, [r7, #12]
 8006214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006218:	4013      	ands	r3, r2
 800621a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006222:	69da      	ldr	r2, [r3, #28]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	f003 030f 	and.w	r3, r3, #15
 800622c:	2101      	movs	r1, #1
 800622e:	fa01 f303 	lsl.w	r3, r1, r3
 8006232:	b29b      	uxth	r3, r3
 8006234:	43db      	mvns	r3, r3
 8006236:	68f9      	ldr	r1, [r7, #12]
 8006238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800623c:	4013      	ands	r3, r2
 800623e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	0159      	lsls	r1, r3, #5
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	440b      	add	r3, r1
 8006256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625a:	4619      	mov	r1, r3
 800625c:	4b35      	ldr	r3, [pc, #212]	; (8006334 <USB_DeactivateEndpoint+0x1b0>)
 800625e:	4013      	ands	r3, r2
 8006260:	600b      	str	r3, [r1, #0]
 8006262:	e060      	b.n	8006326 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006276:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800627a:	d11f      	bne.n	80062bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4413      	add	r3, r2
 8006284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	0151      	lsls	r1, r2, #5
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	440a      	add	r2, r1
 8006292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006296:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800629a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	0151      	lsls	r1, r2, #5
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	440a      	add	r2, r1
 80062b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	f003 030f 	and.w	r3, r3, #15
 80062cc:	2101      	movs	r1, #1
 80062ce:	fa01 f303 	lsl.w	r3, r1, r3
 80062d2:	041b      	lsls	r3, r3, #16
 80062d4:	43db      	mvns	r3, r3
 80062d6:	68f9      	ldr	r1, [r7, #12]
 80062d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062dc:	4013      	ands	r3, r2
 80062de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e6:	69da      	ldr	r2, [r3, #28]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	f003 030f 	and.w	r3, r3, #15
 80062f0:	2101      	movs	r1, #1
 80062f2:	fa01 f303 	lsl.w	r3, r1, r3
 80062f6:	041b      	lsls	r3, r3, #16
 80062f8:	43db      	mvns	r3, r3
 80062fa:	68f9      	ldr	r1, [r7, #12]
 80062fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006300:	4013      	ands	r3, r2
 8006302:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4413      	add	r3, r2
 800630c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	0159      	lsls	r1, r3, #5
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	440b      	add	r3, r1
 800631a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631e:	4619      	mov	r1, r3
 8006320:	4b05      	ldr	r3, [pc, #20]	; (8006338 <USB_DeactivateEndpoint+0x1b4>)
 8006322:	4013      	ands	r3, r2
 8006324:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	ec337800 	.word	0xec337800
 8006338:	eff37800 	.word	0xeff37800

0800633c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08a      	sub	sp, #40	; 0x28
 8006340:	af02      	add	r7, sp, #8
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	4613      	mov	r3, r2
 8006348:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	785b      	ldrb	r3, [r3, #1]
 8006358:	2b01      	cmp	r3, #1
 800635a:	f040 815c 	bne.w	8006616 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d132      	bne.n	80063cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	4413      	add	r3, r2
 800636e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	0151      	lsls	r1, r2, #5
 8006378:	69fa      	ldr	r2, [r7, #28]
 800637a:	440a      	add	r2, r1
 800637c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006380:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006384:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006388:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	0151      	lsls	r1, r2, #5
 800639c:	69fa      	ldr	r2, [r7, #28]
 800639e:	440a      	add	r2, r1
 80063a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	0151      	lsls	r1, r2, #5
 80063bc:	69fa      	ldr	r2, [r7, #28]
 80063be:	440a      	add	r2, r1
 80063c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c4:	0cdb      	lsrs	r3, r3, #19
 80063c6:	04db      	lsls	r3, r3, #19
 80063c8:	6113      	str	r3, [r2, #16]
 80063ca:	e074      	b.n	80064b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	0151      	lsls	r1, r2, #5
 80063de:	69fa      	ldr	r2, [r7, #28]
 80063e0:	440a      	add	r2, r1
 80063e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e6:	0cdb      	lsrs	r3, r3, #19
 80063e8:	04db      	lsls	r3, r3, #19
 80063ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	0151      	lsls	r1, r2, #5
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	440a      	add	r2, r1
 8006402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006406:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800640a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800640e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	4413      	add	r3, r2
 8006418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641c:	691a      	ldr	r2, [r3, #16]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	6959      	ldr	r1, [r3, #20]
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	440b      	add	r3, r1
 8006428:	1e59      	subs	r1, r3, #1
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006432:	04d9      	lsls	r1, r3, #19
 8006434:	4b9d      	ldr	r3, [pc, #628]	; (80066ac <USB_EPStartXfer+0x370>)
 8006436:	400b      	ands	r3, r1
 8006438:	69b9      	ldr	r1, [r7, #24]
 800643a:	0148      	lsls	r0, r1, #5
 800643c:	69f9      	ldr	r1, [r7, #28]
 800643e:	4401      	add	r1, r0
 8006440:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006444:	4313      	orrs	r3, r2
 8006446:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	4413      	add	r3, r2
 8006450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006454:	691a      	ldr	r2, [r3, #16]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800645e:	69b9      	ldr	r1, [r7, #24]
 8006460:	0148      	lsls	r0, r1, #5
 8006462:	69f9      	ldr	r1, [r7, #28]
 8006464:	4401      	add	r1, r0
 8006466:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800646a:	4313      	orrs	r3, r2
 800646c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	78db      	ldrb	r3, [r3, #3]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d11f      	bne.n	80064b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	0151      	lsls	r1, r2, #5
 8006488:	69fa      	ldr	r2, [r7, #28]
 800648a:	440a      	add	r2, r1
 800648c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006490:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006494:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	4413      	add	r3, r2
 800649e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	0151      	lsls	r1, r2, #5
 80064a8:	69fa      	ldr	r2, [r7, #28]
 80064aa:	440a      	add	r2, r1
 80064ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80064b6:	79fb      	ldrb	r3, [r7, #7]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d14b      	bne.n	8006554 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d009      	beq.n	80064d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d0:	461a      	mov	r2, r3
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	78db      	ldrb	r3, [r3, #3]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d128      	bne.n	8006532 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d110      	bne.n	8006512 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	0151      	lsls	r1, r2, #5
 8006502:	69fa      	ldr	r2, [r7, #28]
 8006504:	440a      	add	r2, r1
 8006506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800650a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800650e:	6013      	str	r3, [r2, #0]
 8006510:	e00f      	b.n	8006532 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	0151      	lsls	r1, r2, #5
 8006524:	69fa      	ldr	r2, [r7, #28]
 8006526:	440a      	add	r2, r1
 8006528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800652c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006530:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	4413      	add	r3, r2
 800653a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	0151      	lsls	r1, r2, #5
 8006544:	69fa      	ldr	r2, [r7, #28]
 8006546:	440a      	add	r2, r1
 8006548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800654c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	e12f      	b.n	80067b4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	0151      	lsls	r1, r2, #5
 8006566:	69fa      	ldr	r2, [r7, #28]
 8006568:	440a      	add	r2, r1
 800656a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006572:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	78db      	ldrb	r3, [r3, #3]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d015      	beq.n	80065a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	695b      	ldr	r3, [r3, #20]
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 8117 	beq.w	80067b4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	f003 030f 	and.w	r3, r3, #15
 8006596:	2101      	movs	r1, #1
 8006598:	fa01 f303 	lsl.w	r3, r1, r3
 800659c:	69f9      	ldr	r1, [r7, #28]
 800659e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065a2:	4313      	orrs	r3, r2
 80065a4:	634b      	str	r3, [r1, #52]	; 0x34
 80065a6:	e105      	b.n	80067b4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d110      	bne.n	80065da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	0151      	lsls	r1, r2, #5
 80065ca:	69fa      	ldr	r2, [r7, #28]
 80065cc:	440a      	add	r2, r1
 80065ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065d6:	6013      	str	r3, [r2, #0]
 80065d8:	e00f      	b.n	80065fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	0151      	lsls	r1, r2, #5
 80065ec:	69fa      	ldr	r2, [r7, #28]
 80065ee:	440a      	add	r2, r1
 80065f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	68d9      	ldr	r1, [r3, #12]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	781a      	ldrb	r2, [r3, #0]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	b298      	uxth	r0, r3
 8006608:	79fb      	ldrb	r3, [r7, #7]
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	4603      	mov	r3, r0
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 fa2b 	bl	8006a6a <USB_WritePacket>
 8006614:	e0ce      	b.n	80067b4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	0151      	lsls	r1, r2, #5
 8006628:	69fa      	ldr	r2, [r7, #28]
 800662a:	440a      	add	r2, r1
 800662c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006630:	0cdb      	lsrs	r3, r3, #19
 8006632:	04db      	lsls	r3, r3, #19
 8006634:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	0151      	lsls	r1, r2, #5
 8006648:	69fa      	ldr	r2, [r7, #28]
 800664a:	440a      	add	r2, r1
 800664c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006650:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006654:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006658:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d126      	bne.n	80066b0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	4413      	add	r3, r2
 800666a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666e:	691a      	ldr	r2, [r3, #16]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006678:	69b9      	ldr	r1, [r7, #24]
 800667a:	0148      	lsls	r0, r1, #5
 800667c:	69f9      	ldr	r1, [r7, #28]
 800667e:	4401      	add	r1, r0
 8006680:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006684:	4313      	orrs	r3, r2
 8006686:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	0151      	lsls	r1, r2, #5
 800669a:	69fa      	ldr	r2, [r7, #28]
 800669c:	440a      	add	r2, r1
 800669e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066a6:	6113      	str	r3, [r2, #16]
 80066a8:	e036      	b.n	8006718 <USB_EPStartXfer+0x3dc>
 80066aa:	bf00      	nop
 80066ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	695a      	ldr	r2, [r3, #20]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	4413      	add	r3, r2
 80066ba:	1e5a      	subs	r2, r3, #1
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d2:	691a      	ldr	r2, [r3, #16]
 80066d4:	8afb      	ldrh	r3, [r7, #22]
 80066d6:	04d9      	lsls	r1, r3, #19
 80066d8:	4b39      	ldr	r3, [pc, #228]	; (80067c0 <USB_EPStartXfer+0x484>)
 80066da:	400b      	ands	r3, r1
 80066dc:	69b9      	ldr	r1, [r7, #24]
 80066de:	0148      	lsls	r0, r1, #5
 80066e0:	69f9      	ldr	r1, [r7, #28]
 80066e2:	4401      	add	r1, r0
 80066e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066e8:	4313      	orrs	r3, r2
 80066ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f8:	691a      	ldr	r2, [r3, #16]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	8af9      	ldrh	r1, [r7, #22]
 8006700:	fb01 f303 	mul.w	r3, r1, r3
 8006704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006708:	69b9      	ldr	r1, [r7, #24]
 800670a:	0148      	lsls	r0, r1, #5
 800670c:	69f9      	ldr	r1, [r7, #28]
 800670e:	4401      	add	r1, r0
 8006710:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006714:	4313      	orrs	r3, r2
 8006716:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006718:	79fb      	ldrb	r3, [r7, #7]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d10d      	bne.n	800673a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d009      	beq.n	800673a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	68d9      	ldr	r1, [r3, #12]
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006736:	460a      	mov	r2, r1
 8006738:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	78db      	ldrb	r3, [r3, #3]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d128      	bne.n	8006794 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674e:	2b00      	cmp	r3, #0
 8006750:	d110      	bne.n	8006774 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	0151      	lsls	r1, r2, #5
 8006764:	69fa      	ldr	r2, [r7, #28]
 8006766:	440a      	add	r2, r1
 8006768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800676c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006770:	6013      	str	r3, [r2, #0]
 8006772:	e00f      	b.n	8006794 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	0151      	lsls	r1, r2, #5
 8006786:	69fa      	ldr	r2, [r7, #28]
 8006788:	440a      	add	r2, r1
 800678a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800678e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006792:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	0151      	lsls	r1, r2, #5
 80067a6:	69fa      	ldr	r2, [r7, #28]
 80067a8:	440a      	add	r2, r1
 80067aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3720      	adds	r7, #32
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	1ff80000 	.word	0x1ff80000

080067c4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b087      	sub	sp, #28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	4613      	mov	r3, r2
 80067d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	785b      	ldrb	r3, [r3, #1]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	f040 80cd 	bne.w	8006980 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d132      	bne.n	8006854 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	0151      	lsls	r1, r2, #5
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	440a      	add	r2, r1
 8006804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006808:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800680c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006810:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	0151      	lsls	r1, r2, #5
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	440a      	add	r2, r1
 8006828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800682c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006830:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	0151      	lsls	r1, r2, #5
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	440a      	add	r2, r1
 8006848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800684c:	0cdb      	lsrs	r3, r3, #19
 800684e:	04db      	lsls	r3, r3, #19
 8006850:	6113      	str	r3, [r2, #16]
 8006852:	e04e      	b.n	80068f2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	0151      	lsls	r1, r2, #5
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	440a      	add	r2, r1
 800686a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686e:	0cdb      	lsrs	r3, r3, #19
 8006870:	04db      	lsls	r3, r3, #19
 8006872:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	0151      	lsls	r1, r2, #5
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	440a      	add	r2, r1
 800688a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800688e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006892:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006896:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	695a      	ldr	r2, [r3, #20]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d903      	bls.n	80068ac <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	0151      	lsls	r1, r2, #5
 80068be:	697a      	ldr	r2, [r7, #20]
 80068c0:	440a      	add	r2, r1
 80068c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d8:	691a      	ldr	r2, [r3, #16]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068e2:	6939      	ldr	r1, [r7, #16]
 80068e4:	0148      	lsls	r0, r1, #5
 80068e6:	6979      	ldr	r1, [r7, #20]
 80068e8:	4401      	add	r1, r0
 80068ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068ee:	4313      	orrs	r3, r2
 80068f0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80068f2:	79fb      	ldrb	r3, [r7, #7]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d11e      	bne.n	8006936 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d009      	beq.n	8006914 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690c:	461a      	mov	r2, r3
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	4413      	add	r3, r2
 800691c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	0151      	lsls	r1, r2, #5
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	440a      	add	r2, r1
 800692a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800692e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	e092      	b.n	8006a5c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	0151      	lsls	r1, r2, #5
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	440a      	add	r2, r1
 800694c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006950:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006954:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d07e      	beq.n	8006a5c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	f003 030f 	and.w	r3, r3, #15
 800696e:	2101      	movs	r1, #1
 8006970:	fa01 f303 	lsl.w	r3, r1, r3
 8006974:	6979      	ldr	r1, [r7, #20]
 8006976:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800697a:	4313      	orrs	r3, r2
 800697c:	634b      	str	r3, [r1, #52]	; 0x34
 800697e:	e06d      	b.n	8006a5c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	4413      	add	r3, r2
 8006988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	0151      	lsls	r1, r2, #5
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	440a      	add	r2, r1
 8006996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800699a:	0cdb      	lsrs	r3, r3, #19
 800699c:	04db      	lsls	r3, r3, #19
 800699e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	0151      	lsls	r1, r2, #5
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	440a      	add	r2, r1
 80069b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069c2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	0151      	lsls	r1, r2, #5
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	440a      	add	r2, r1
 80069ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a00:	691a      	ldr	r2, [r3, #16]
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a0a:	6939      	ldr	r1, [r7, #16]
 8006a0c:	0148      	lsls	r0, r1, #5
 8006a0e:	6979      	ldr	r1, [r7, #20]
 8006a10:	4401      	add	r1, r0
 8006a12:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a16:	4313      	orrs	r3, r2
 8006a18:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006a1a:	79fb      	ldrb	r3, [r7, #7]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d10d      	bne.n	8006a3c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d009      	beq.n	8006a3c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	68d9      	ldr	r1, [r3, #12]
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a38:	460a      	mov	r2, r1
 8006a3a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	0151      	lsls	r1, r2, #5
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	440a      	add	r2, r1
 8006a52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b089      	sub	sp, #36	; 0x24
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	60f8      	str	r0, [r7, #12]
 8006a72:	60b9      	str	r1, [r7, #8]
 8006a74:	4611      	mov	r1, r2
 8006a76:	461a      	mov	r2, r3
 8006a78:	460b      	mov	r3, r1
 8006a7a:	71fb      	strb	r3, [r7, #7]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006a88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d11a      	bne.n	8006ac6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a90:	88bb      	ldrh	r3, [r7, #4]
 8006a92:	3303      	adds	r3, #3
 8006a94:	089b      	lsrs	r3, r3, #2
 8006a96:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a98:	2300      	movs	r3, #0
 8006a9a:	61bb      	str	r3, [r7, #24]
 8006a9c:	e00f      	b.n	8006abe <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a9e:	79fb      	ldrb	r3, [r7, #7]
 8006aa0:	031a      	lsls	r2, r3, #12
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aaa:	461a      	mov	r2, r3
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	3304      	adds	r3, #4
 8006ab6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	3301      	adds	r3, #1
 8006abc:	61bb      	str	r3, [r7, #24]
 8006abe:	69ba      	ldr	r2, [r7, #24]
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d3eb      	bcc.n	8006a9e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3724      	adds	r7, #36	; 0x24
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b089      	sub	sp, #36	; 0x24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006aea:	88fb      	ldrh	r3, [r7, #6]
 8006aec:	3303      	adds	r3, #3
 8006aee:	089b      	lsrs	r3, r3, #2
 8006af0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006af2:	2300      	movs	r3, #0
 8006af4:	61bb      	str	r3, [r7, #24]
 8006af6:	e00b      	b.n	8006b10 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	3304      	adds	r3, #4
 8006b08:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	61bb      	str	r3, [r7, #24]
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d3ef      	bcc.n	8006af8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006b18:	69fb      	ldr	r3, [r7, #28]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3724      	adds	r7, #36	; 0x24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b085      	sub	sp, #20
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	785b      	ldrb	r3, [r3, #1]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d12c      	bne.n	8006b9c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	015a      	lsls	r2, r3, #5
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	db12      	blt.n	8006b7a <USB_EPSetStall+0x54>
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00f      	beq.n	8006b7a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	0151      	lsls	r1, r2, #5
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	440a      	add	r2, r1
 8006b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b78:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	0151      	lsls	r1, r2, #5
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	440a      	add	r2, r1
 8006b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b98:	6013      	str	r3, [r2, #0]
 8006b9a:	e02b      	b.n	8006bf4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	db12      	blt.n	8006bd4 <USB_EPSetStall+0xae>
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00f      	beq.n	8006bd4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	0151      	lsls	r1, r2, #5
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	440a      	add	r2, r1
 8006bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bd2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	0151      	lsls	r1, r2, #5
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	440a      	add	r2, r1
 8006bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006bf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b085      	sub	sp, #20
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	785b      	ldrb	r3, [r3, #1]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d128      	bne.n	8006c70 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	0151      	lsls	r1, r2, #5
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	440a      	add	r2, r1
 8006c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c3c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	78db      	ldrb	r3, [r3, #3]
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	d003      	beq.n	8006c4e <USB_EPClearStall+0x4c>
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	78db      	ldrb	r3, [r3, #3]
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d138      	bne.n	8006cc0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	0151      	lsls	r1, r2, #5
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	440a      	add	r2, r1
 8006c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c6c:	6013      	str	r3, [r2, #0]
 8006c6e:	e027      	b.n	8006cc0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	0151      	lsls	r1, r2, #5
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	440a      	add	r2, r1
 8006c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c8e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	78db      	ldrb	r3, [r3, #3]
 8006c94:	2b03      	cmp	r3, #3
 8006c96:	d003      	beq.n	8006ca0 <USB_EPClearStall+0x9e>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	78db      	ldrb	r3, [r3, #3]
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d10f      	bne.n	8006cc0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	0151      	lsls	r1, r2, #5
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	440a      	add	r2, r1
 8006cb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cbe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b085      	sub	sp, #20
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006cf0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	78fb      	ldrb	r3, [r7, #3]
 8006cfc:	011b      	lsls	r3, r3, #4
 8006cfe:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006d02:	68f9      	ldr	r1, [r7, #12]
 8006d04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b085      	sub	sp, #20
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d34:	f023 0303 	bic.w	r3, r3, #3
 8006d38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d48:	f023 0302 	bic.w	r3, r3, #2
 8006d4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d76:	f023 0303 	bic.w	r3, r3, #3
 8006d7a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d8a:	f043 0302 	orr.w	r3, r3, #2
 8006d8e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b085      	sub	sp, #20
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	4013      	ands	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006db6:	68fb      	ldr	r3, [r7, #12]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	4013      	ands	r3, r2
 8006de6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	0c1b      	lsrs	r3, r3, #16
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3714      	adds	r7, #20
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	4013      	ands	r3, r2
 8006e1a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	b29b      	uxth	r3, r3
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	460b      	mov	r3, r1
 8006e36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006e3c:	78fb      	ldrb	r3, [r7, #3]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	4013      	ands	r3, r2
 8006e58:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3714      	adds	r7, #20
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	460b      	mov	r3, r1
 8006e72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e8a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006e8c:	78fb      	ldrb	r3, [r7, #3]
 8006e8e:	f003 030f 	and.w	r3, r3, #15
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	fa22 f303 	lsr.w	r3, r2, r3
 8006e98:	01db      	lsls	r3, r3, #7
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006ea2:	78fb      	ldrb	r3, [r7, #3]
 8006ea4:	015a      	lsls	r2, r3, #5
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006eb6:	68bb      	ldr	r3, [r7, #8]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	371c      	adds	r7, #28
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	f003 0301 	and.w	r3, r3, #1
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006efa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006efe:	f023 0307 	bic.w	r3, r3, #7
 8006f02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
	...

08006f28 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	460b      	mov	r3, r1
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	333c      	adds	r3, #60	; 0x3c
 8006f3e:	3304      	adds	r3, #4
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	4a26      	ldr	r2, [pc, #152]	; (8006fe0 <USB_EP0_OutStart+0xb8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d90a      	bls.n	8006f62 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f5c:	d101      	bne.n	8006f62 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	e037      	b.n	8006fd2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f68:	461a      	mov	r2, r3
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f90:	f043 0318 	orr.w	r3, r3, #24
 8006f94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fa4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006fa8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006faa:	7afb      	ldrb	r3, [r7, #11]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d10f      	bne.n	8006fd0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006fce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	371c      	adds	r7, #28
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	4f54300a 	.word	0x4f54300a

08006fe4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4a13      	ldr	r2, [pc, #76]	; (8007048 <USB_CoreReset+0x64>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d901      	bls.n	8007002 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e01b      	b.n	800703a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	daf2      	bge.n	8006ff0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800700a:	2300      	movs	r3, #0
 800700c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	f043 0201 	orr.w	r2, r3, #1
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	3301      	adds	r3, #1
 800701e:	60fb      	str	r3, [r7, #12]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4a09      	ldr	r2, [pc, #36]	; (8007048 <USB_CoreReset+0x64>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d901      	bls.n	800702c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e006      	b.n	800703a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b01      	cmp	r3, #1
 8007036:	d0f0      	beq.n	800701a <USB_CoreReset+0x36>

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	00030d40 	.word	0x00030d40

0800704c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	460b      	mov	r3, r1
 8007056:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007058:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800705c:	f002 fa2e 	bl	80094bc <malloc>
 8007060:	4603      	mov	r3, r0
 8007062:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d105      	bne.n	8007076 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007072:	2302      	movs	r3, #2
 8007074:	e066      	b.n	8007144 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	7c1b      	ldrb	r3, [r3, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d119      	bne.n	80070ba <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007086:	f44f 7300 	mov.w	r3, #512	; 0x200
 800708a:	2202      	movs	r2, #2
 800708c:	2181      	movs	r1, #129	; 0x81
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f002 f84d 	bl	800912e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800709a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800709e:	2202      	movs	r2, #2
 80070a0:	2101      	movs	r1, #1
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f002 f843 	bl	800912e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2210      	movs	r2, #16
 80070b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80070b8:	e016      	b.n	80070e8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80070ba:	2340      	movs	r3, #64	; 0x40
 80070bc:	2202      	movs	r2, #2
 80070be:	2181      	movs	r1, #129	; 0x81
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f002 f834 	bl	800912e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80070cc:	2340      	movs	r3, #64	; 0x40
 80070ce:	2202      	movs	r2, #2
 80070d0:	2101      	movs	r1, #1
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f002 f82b 	bl	800912e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2210      	movs	r2, #16
 80070e4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80070e8:	2308      	movs	r3, #8
 80070ea:	2203      	movs	r2, #3
 80070ec:	2182      	movs	r1, #130	; 0x82
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f002 f81d 	bl	800912e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	7c1b      	ldrb	r3, [r3, #16]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d109      	bne.n	8007132 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007124:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007128:	2101      	movs	r1, #1
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f002 f8ee 	bl	800930c <USBD_LL_PrepareReceive>
 8007130:	e007      	b.n	8007142 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007138:	2340      	movs	r3, #64	; 0x40
 800713a:	2101      	movs	r1, #1
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f002 f8e5 	bl	800930c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800715c:	2181      	movs	r1, #129	; 0x81
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f002 f80b 	bl	800917a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800716a:	2101      	movs	r1, #1
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f002 f804 	bl	800917a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800717a:	2182      	movs	r1, #130	; 0x82
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f001 fffc 	bl	800917a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00e      	beq.n	80071ba <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071ac:	4618      	mov	r0, r3
 80071ae:	f002 f98d 	bl	80094cc <free>
    pdev->pClassData = NULL;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80071ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071d4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d03a      	beq.n	8007264 <USBD_CDC_Setup+0xa0>
 80071ee:	2b20      	cmp	r3, #32
 80071f0:	f040 8097 	bne.w	8007322 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	88db      	ldrh	r3, [r3, #6]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d029      	beq.n	8007250 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	b25b      	sxtb	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	da11      	bge.n	800722a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007212:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007214:	683a      	ldr	r2, [r7, #0]
 8007216:	88d2      	ldrh	r2, [r2, #6]
 8007218:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800721a:	6939      	ldr	r1, [r7, #16]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	88db      	ldrh	r3, [r3, #6]
 8007220:	461a      	mov	r2, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f001 fac7 	bl	80087b6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007228:	e082      	b.n	8007330 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	785a      	ldrb	r2, [r3, #1]
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	88db      	ldrh	r3, [r3, #6]
 8007238:	b2da      	uxtb	r2, r3
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007240:	6939      	ldr	r1, [r7, #16]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	88db      	ldrh	r3, [r3, #6]
 8007246:	461a      	mov	r2, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f001 fae0 	bl	800880e <USBD_CtlPrepareRx>
    break;
 800724e:	e06f      	b.n	8007330 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	7850      	ldrb	r0, [r2, #1]
 800725c:	2200      	movs	r2, #0
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	4798      	blx	r3
    break;
 8007262:	e065      	b.n	8007330 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	785b      	ldrb	r3, [r3, #1]
 8007268:	2b0b      	cmp	r3, #11
 800726a:	d84f      	bhi.n	800730c <USBD_CDC_Setup+0x148>
 800726c:	a201      	add	r2, pc, #4	; (adr r2, 8007274 <USBD_CDC_Setup+0xb0>)
 800726e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007272:	bf00      	nop
 8007274:	080072a5 	.word	0x080072a5
 8007278:	0800731b 	.word	0x0800731b
 800727c:	0800730d 	.word	0x0800730d
 8007280:	0800730d 	.word	0x0800730d
 8007284:	0800730d 	.word	0x0800730d
 8007288:	0800730d 	.word	0x0800730d
 800728c:	0800730d 	.word	0x0800730d
 8007290:	0800730d 	.word	0x0800730d
 8007294:	0800730d 	.word	0x0800730d
 8007298:	0800730d 	.word	0x0800730d
 800729c:	080072cd 	.word	0x080072cd
 80072a0:	080072f5 	.word	0x080072f5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d107      	bne.n	80072be <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80072ae:	f107 030c 	add.w	r3, r7, #12
 80072b2:	2202      	movs	r2, #2
 80072b4:	4619      	mov	r1, r3
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f001 fa7d 	bl	80087b6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80072bc:	e030      	b.n	8007320 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f001 fa07 	bl	80086d4 <USBD_CtlError>
        ret = USBD_FAIL;
 80072c6:	2303      	movs	r3, #3
 80072c8:	75fb      	strb	r3, [r7, #23]
      break;
 80072ca:	e029      	b.n	8007320 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d107      	bne.n	80072e6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80072d6:	f107 030f 	add.w	r3, r7, #15
 80072da:	2201      	movs	r2, #1
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f001 fa69 	bl	80087b6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80072e4:	e01c      	b.n	8007320 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80072e6:	6839      	ldr	r1, [r7, #0]
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f001 f9f3 	bl	80086d4 <USBD_CtlError>
        ret = USBD_FAIL;
 80072ee:	2303      	movs	r3, #3
 80072f0:	75fb      	strb	r3, [r7, #23]
      break;
 80072f2:	e015      	b.n	8007320 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072fa:	2b03      	cmp	r3, #3
 80072fc:	d00f      	beq.n	800731e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f001 f9e7 	bl	80086d4 <USBD_CtlError>
        ret = USBD_FAIL;
 8007306:	2303      	movs	r3, #3
 8007308:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800730a:	e008      	b.n	800731e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f001 f9e0 	bl	80086d4 <USBD_CtlError>
      ret = USBD_FAIL;
 8007314:	2303      	movs	r3, #3
 8007316:	75fb      	strb	r3, [r7, #23]
      break;
 8007318:	e002      	b.n	8007320 <USBD_CDC_Setup+0x15c>
      break;
 800731a:	bf00      	nop
 800731c:	e008      	b.n	8007330 <USBD_CDC_Setup+0x16c>
      break;
 800731e:	bf00      	nop
    }
    break;
 8007320:	e006      	b.n	8007330 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f001 f9d5 	bl	80086d4 <USBD_CtlError>
    ret = USBD_FAIL;
 800732a:	2303      	movs	r3, #3
 800732c:	75fb      	strb	r3, [r7, #23]
    break;
 800732e:	bf00      	nop
  }

  return (uint8_t)ret;
 8007330:	7dfb      	ldrb	r3, [r7, #23]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3718      	adds	r7, #24
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop

0800733c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	460b      	mov	r3, r1
 8007346:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800734e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800735a:	2303      	movs	r3, #3
 800735c:	e049      	b.n	80073f2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007364:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007366:	78fa      	ldrb	r2, [r7, #3]
 8007368:	6879      	ldr	r1, [r7, #4]
 800736a:	4613      	mov	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	440b      	add	r3, r1
 8007374:	3318      	adds	r3, #24
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d029      	beq.n	80073d0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800737c:	78fa      	ldrb	r2, [r7, #3]
 800737e:	6879      	ldr	r1, [r7, #4]
 8007380:	4613      	mov	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4413      	add	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	440b      	add	r3, r1
 800738a:	3318      	adds	r3, #24
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	78f9      	ldrb	r1, [r7, #3]
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	460b      	mov	r3, r1
 8007394:	00db      	lsls	r3, r3, #3
 8007396:	1a5b      	subs	r3, r3, r1
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4403      	add	r3, r0
 800739c:	3344      	adds	r3, #68	; 0x44
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80073a4:	fb03 f301 	mul.w	r3, r3, r1
 80073a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d110      	bne.n	80073d0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80073ae:	78fa      	ldrb	r2, [r7, #3]
 80073b0:	6879      	ldr	r1, [r7, #4]
 80073b2:	4613      	mov	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	440b      	add	r3, r1
 80073bc:	3318      	adds	r3, #24
 80073be:	2200      	movs	r2, #0
 80073c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80073c2:	78f9      	ldrb	r1, [r7, #3]
 80073c4:	2300      	movs	r3, #0
 80073c6:	2200      	movs	r2, #0
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f001 ff7e 	bl	80092ca <USBD_LL_Transmit>
 80073ce:	e00f      	b.n	80073f0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80073ec:	78fa      	ldrb	r2, [r7, #3]
 80073ee:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b084      	sub	sp, #16
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	460b      	mov	r3, r1
 8007404:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800740c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007418:	2303      	movs	r3, #3
 800741a:	e015      	b.n	8007448 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800741c:	78fb      	ldrb	r3, [r7, #3]
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f001 ff94 	bl	800934e <USBD_LL_GetRxDataSize>
 8007426:	4602      	mov	r2, r0
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007442:	4611      	mov	r1, r2
 8007444:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800745e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d015      	beq.n	8007496 <USBD_CDC_EP0_RxReady+0x46>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007470:	2bff      	cmp	r3, #255	; 0xff
 8007472:	d010      	beq.n	8007496 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007482:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800748a:	b292      	uxth	r2, r2
 800748c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	22ff      	movs	r2, #255	; 0xff
 8007492:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2243      	movs	r2, #67	; 0x43
 80074ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80074ae:	4b03      	ldr	r3, [pc, #12]	; (80074bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr
 80074bc:	20000094 	.word	0x20000094

080074c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2243      	movs	r2, #67	; 0x43
 80074cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80074ce:	4b03      	ldr	r3, [pc, #12]	; (80074dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	20000050 	.word	0x20000050

080074e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2243      	movs	r2, #67	; 0x43
 80074ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80074ee:	4b03      	ldr	r3, [pc, #12]	; (80074fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	200000d8 	.word	0x200000d8

08007500 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	220a      	movs	r2, #10
 800750c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800750e:	4b03      	ldr	r3, [pc, #12]	; (800751c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007510:	4618      	mov	r0, r3
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	2000000c 	.word	0x2000000c

08007520 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d101      	bne.n	8007534 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007530:	2303      	movs	r3, #3
 8007532:	e004      	b.n	800753e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800754a:	b480      	push	{r7}
 800754c:	b087      	sub	sp, #28
 800754e:	af00      	add	r7, sp, #0
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	60b9      	str	r1, [r7, #8]
 8007554:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800755c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	371c      	adds	r7, #28
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800758c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075b2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80075b4:	2301      	movs	r3, #1
 80075b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e01a      	b.n	80075fc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d114      	bne.n	80075fa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80075ee:	2181      	movs	r1, #129	; 0x81
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f001 fe6a 	bl	80092ca <USBD_LL_Transmit>

    ret = USBD_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007612:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800761e:	2303      	movs	r3, #3
 8007620:	e016      	b.n	8007650 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	7c1b      	ldrb	r3, [r3, #16]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d109      	bne.n	800763e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007630:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007634:	2101      	movs	r1, #1
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f001 fe68 	bl	800930c <USBD_LL_PrepareReceive>
 800763c:	e007      	b.n	800764e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007644:	2340      	movs	r3, #64	; 0x40
 8007646:	2101      	movs	r1, #1
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f001 fe5f 	bl	800930c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	4613      	mov	r3, r2
 8007664:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800766c:	2303      	movs	r3, #3
 800766e:	e025      	b.n	80076bc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007688:	2b00      	cmp	r3, #0
 800768a:	d003      	beq.n	8007694 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	79fa      	ldrb	r2, [r7, #7]
 80076ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f001 fcd5 	bl	8009060 <USBD_LL_Init>
 80076b6:	4603      	mov	r3, r0
 80076b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80076ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80076d8:	2303      	movs	r3, #3
 80076da:	e010      	b.n	80076fe <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ec:	f107 020e 	add.w	r2, r7, #14
 80076f0:	4610      	mov	r0, r2
 80076f2:	4798      	blx	r3
 80076f4:	4602      	mov	r2, r0
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f001 fcf2 	bl	80090f8 <USBD_LL_Start>
 8007714:	4603      	mov	r3, r0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800771e:	b480      	push	{r7}
 8007720:	b083      	sub	sp, #12
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007740:	2303      	movs	r3, #3
 8007742:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800774a:	2b00      	cmp	r3, #0
 800774c:	d009      	beq.n	8007762 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	78fa      	ldrb	r2, [r7, #3]
 8007758:	4611      	mov	r1, r2
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	4798      	blx	r3
 800775e:	4603      	mov	r3, r0
 8007760:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007762:	7bfb      	ldrb	r3, [r7, #15]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	460b      	mov	r3, r1
 8007776:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800777e:	2b00      	cmp	r3, #0
 8007780:	d007      	beq.n	8007792 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	78fa      	ldrb	r2, [r7, #3]
 800778c:	4611      	mov	r1, r2
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	4798      	blx	r3
  }

  return USBD_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 ff56 	bl	8008660 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80077c2:	461a      	mov	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80077d0:	f003 031f 	and.w	r3, r3, #31
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d00e      	beq.n	80077f6 <USBD_LL_SetupStage+0x5a>
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d302      	bcc.n	80077e2 <USBD_LL_SetupStage+0x46>
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d014      	beq.n	800780a <USBD_LL_SetupStage+0x6e>
 80077e0:	e01d      	b.n	800781e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fa18 	bl	8007c20 <USBD_StdDevReq>
 80077f0:	4603      	mov	r3, r0
 80077f2:	73fb      	strb	r3, [r7, #15]
      break;
 80077f4:	e020      	b.n	8007838 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80077fc:	4619      	mov	r1, r3
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fa7c 	bl	8007cfc <USBD_StdItfReq>
 8007804:	4603      	mov	r3, r0
 8007806:	73fb      	strb	r3, [r7, #15]
      break;
 8007808:	e016      	b.n	8007838 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007810:	4619      	mov	r1, r3
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fab8 	bl	8007d88 <USBD_StdEPReq>
 8007818:	4603      	mov	r3, r0
 800781a:	73fb      	strb	r3, [r7, #15]
      break;
 800781c:	e00c      	b.n	8007838 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007824:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007828:	b2db      	uxtb	r3, r3
 800782a:	4619      	mov	r1, r3
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f001 fcc3 	bl	80091b8 <USBD_LL_StallEP>
 8007832:	4603      	mov	r3, r0
 8007834:	73fb      	strb	r3, [r7, #15]
      break;
 8007836:	bf00      	nop
  }

  return ret;
 8007838:	7bfb      	ldrb	r3, [r7, #15]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b086      	sub	sp, #24
 8007846:	af00      	add	r7, sp, #0
 8007848:	60f8      	str	r0, [r7, #12]
 800784a:	460b      	mov	r3, r1
 800784c:	607a      	str	r2, [r7, #4]
 800784e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007850:	7afb      	ldrb	r3, [r7, #11]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d137      	bne.n	80078c6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800785c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007864:	2b03      	cmp	r3, #3
 8007866:	d14a      	bne.n	80078fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	689a      	ldr	r2, [r3, #8]
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	429a      	cmp	r2, r3
 8007872:	d913      	bls.n	800789c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	689a      	ldr	r2, [r3, #8]
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	1ad2      	subs	r2, r2, r3
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	68da      	ldr	r2, [r3, #12]
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	4293      	cmp	r3, r2
 800788c:	bf28      	it	cs
 800788e:	4613      	movcs	r3, r2
 8007890:	461a      	mov	r2, r3
 8007892:	6879      	ldr	r1, [r7, #4]
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f000 ffd7 	bl	8008848 <USBD_CtlContinueRx>
 800789a:	e030      	b.n	80078fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00a      	beq.n	80078be <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	d105      	bne.n	80078be <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 ffd3 	bl	800886a <USBD_CtlSendStatus>
 80078c4:	e01b      	b.n	80078fe <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d013      	beq.n	80078fa <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80078d8:	2b03      	cmp	r3, #3
 80078da:	d10e      	bne.n	80078fa <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	7afa      	ldrb	r2, [r7, #11]
 80078e6:	4611      	mov	r1, r2
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	4798      	blx	r3
 80078ec:	4603      	mov	r3, r0
 80078ee:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80078f0:	7dfb      	ldrb	r3, [r7, #23]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80078f6:	7dfb      	ldrb	r3, [r7, #23]
 80078f8:	e002      	b.n	8007900 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e000      	b.n	8007900 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3718      	adds	r7, #24
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	460b      	mov	r3, r1
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007916:	7afb      	ldrb	r3, [r7, #11]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d16a      	bne.n	80079f2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	3314      	adds	r3, #20
 8007920:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007928:	2b02      	cmp	r3, #2
 800792a:	d155      	bne.n	80079d8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	689a      	ldr	r2, [r3, #8]
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	429a      	cmp	r2, r3
 8007936:	d914      	bls.n	8007962 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	689a      	ldr	r2, [r3, #8]
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	1ad2      	subs	r2, r2, r3
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	461a      	mov	r2, r3
 800794c:	6879      	ldr	r1, [r7, #4]
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 ff4c 	bl	80087ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007954:	2300      	movs	r3, #0
 8007956:	2200      	movs	r2, #0
 8007958:	2100      	movs	r1, #0
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f001 fcd6 	bl	800930c <USBD_LL_PrepareReceive>
 8007960:	e03a      	b.n	80079d8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	68da      	ldr	r2, [r3, #12]
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	429a      	cmp	r2, r3
 800796c:	d11c      	bne.n	80079a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007976:	429a      	cmp	r2, r3
 8007978:	d316      	bcc.n	80079a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007984:	429a      	cmp	r2, r3
 8007986:	d20f      	bcs.n	80079a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007988:	2200      	movs	r2, #0
 800798a:	2100      	movs	r1, #0
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 ff2d 	bl	80087ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800799a:	2300      	movs	r3, #0
 800799c:	2200      	movs	r2, #0
 800799e:	2100      	movs	r1, #0
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f001 fcb3 	bl	800930c <USBD_LL_PrepareReceive>
 80079a6:	e017      	b.n	80079d8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00a      	beq.n	80079ca <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d105      	bne.n	80079ca <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80079ca:	2180      	movs	r1, #128	; 0x80
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f001 fbf3 	bl	80091b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f000 ff5c 	bl	8008890 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d123      	bne.n	8007a2a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f7ff fe9b 	bl	800771e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80079f0:	e01b      	b.n	8007a2a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f8:	695b      	ldr	r3, [r3, #20]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d013      	beq.n	8007a26 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007a04:	2b03      	cmp	r3, #3
 8007a06:	d10e      	bne.n	8007a26 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a0e:	695b      	ldr	r3, [r3, #20]
 8007a10:	7afa      	ldrb	r2, [r7, #11]
 8007a12:	4611      	mov	r1, r2
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	4798      	blx	r3
 8007a18:	4603      	mov	r3, r0
 8007a1a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007a1c:	7dfb      	ldrb	r3, [r7, #23]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007a22:	7dfb      	ldrb	r3, [r7, #23]
 8007a24:	e002      	b.n	8007a2c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e000      	b.n	8007a2c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3718      	adds	r7, #24
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d009      	beq.n	8007a78 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	6852      	ldr	r2, [r2, #4]
 8007a70:	b2d2      	uxtb	r2, r2
 8007a72:	4611      	mov	r1, r2
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a78:	2340      	movs	r3, #64	; 0x40
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f001 fb55 	bl	800912e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2240      	movs	r2, #64	; 0x40
 8007a90:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a94:	2340      	movs	r3, #64	; 0x40
 8007a96:	2200      	movs	r2, #0
 8007a98:	2180      	movs	r1, #128	; 0x80
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f001 fb47 	bl	800912e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2240      	movs	r2, #64	; 0x40
 8007aaa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b083      	sub	sp, #12
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	78fa      	ldrb	r2, [r7, #3]
 8007ac6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b083      	sub	sp, #12
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2204      	movs	r2, #4
 8007aee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d105      	bne.n	8007b1e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d10b      	bne.n	8007b56 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b44:	69db      	ldr	r3, [r3, #28]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d005      	beq.n	8007b56 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	460b      	mov	r3, r1
 8007b84:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b082      	sub	sp, #8
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d009      	beq.n	8007bd8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	6852      	ldr	r2, [r2, #4]
 8007bd0:	b2d2      	uxtb	r2, r2
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	4798      	blx	r3
  }

  return USBD_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b087      	sub	sp, #28
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c00:	8a3b      	ldrh	r3, [r7, #16]
 8007c02:	021b      	lsls	r3, r3, #8
 8007c04:	b21a      	sxth	r2, r3
 8007c06:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	b21b      	sxth	r3, r3
 8007c0e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c10:	89fb      	ldrh	r3, [r7, #14]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	371c      	adds	r7, #28
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
	...

08007c20 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c36:	2b20      	cmp	r3, #32
 8007c38:	d004      	beq.n	8007c44 <USBD_StdDevReq+0x24>
 8007c3a:	2b40      	cmp	r3, #64	; 0x40
 8007c3c:	d002      	beq.n	8007c44 <USBD_StdDevReq+0x24>
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00a      	beq.n	8007c58 <USBD_StdDevReq+0x38>
 8007c42:	e050      	b.n	8007ce6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	4798      	blx	r3
 8007c52:	4603      	mov	r3, r0
 8007c54:	73fb      	strb	r3, [r7, #15]
    break;
 8007c56:	e04b      	b.n	8007cf0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	785b      	ldrb	r3, [r3, #1]
 8007c5c:	2b09      	cmp	r3, #9
 8007c5e:	d83c      	bhi.n	8007cda <USBD_StdDevReq+0xba>
 8007c60:	a201      	add	r2, pc, #4	; (adr r2, 8007c68 <USBD_StdDevReq+0x48>)
 8007c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c66:	bf00      	nop
 8007c68:	08007cbd 	.word	0x08007cbd
 8007c6c:	08007cd1 	.word	0x08007cd1
 8007c70:	08007cdb 	.word	0x08007cdb
 8007c74:	08007cc7 	.word	0x08007cc7
 8007c78:	08007cdb 	.word	0x08007cdb
 8007c7c:	08007c9b 	.word	0x08007c9b
 8007c80:	08007c91 	.word	0x08007c91
 8007c84:	08007cdb 	.word	0x08007cdb
 8007c88:	08007cb3 	.word	0x08007cb3
 8007c8c:	08007ca5 	.word	0x08007ca5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f9ce 	bl	8008034 <USBD_GetDescriptor>
      break;
 8007c98:	e024      	b.n	8007ce4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fb5d 	bl	800835c <USBD_SetAddress>
      break;
 8007ca2:	e01f      	b.n	8007ce4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fb9a 	bl	80083e0 <USBD_SetConfig>
 8007cac:	4603      	mov	r3, r0
 8007cae:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb0:	e018      	b.n	8007ce4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007cb2:	6839      	ldr	r1, [r7, #0]
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fc37 	bl	8008528 <USBD_GetConfig>
      break;
 8007cba:	e013      	b.n	8007ce4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fc66 	bl	8008590 <USBD_GetStatus>
      break;
 8007cc4:	e00e      	b.n	8007ce4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fc94 	bl	80085f6 <USBD_SetFeature>
      break;
 8007cce:	e009      	b.n	8007ce4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fca3 	bl	800861e <USBD_ClrFeature>
      break;
 8007cd8:	e004      	b.n	8007ce4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007cda:	6839      	ldr	r1, [r7, #0]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fcf9 	bl	80086d4 <USBD_CtlError>
      break;
 8007ce2:	bf00      	nop
    }
    break;
 8007ce4:	e004      	b.n	8007cf0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fcf3 	bl	80086d4 <USBD_CtlError>
    break;
 8007cee:	bf00      	nop
  }

  return ret;
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop

08007cfc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d12:	2b20      	cmp	r3, #32
 8007d14:	d003      	beq.n	8007d1e <USBD_StdItfReq+0x22>
 8007d16:	2b40      	cmp	r3, #64	; 0x40
 8007d18:	d001      	beq.n	8007d1e <USBD_StdItfReq+0x22>
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d12a      	bne.n	8007d74 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d24:	3b01      	subs	r3, #1
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d81d      	bhi.n	8007d66 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	889b      	ldrh	r3, [r3, #4]
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d813      	bhi.n	8007d5c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	4798      	blx	r3
 8007d42:	4603      	mov	r3, r0
 8007d44:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	88db      	ldrh	r3, [r3, #6]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d110      	bne.n	8007d70 <USBD_StdItfReq+0x74>
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d10d      	bne.n	8007d70 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fd88 	bl	800886a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007d5a:	e009      	b.n	8007d70 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fcb8 	bl	80086d4 <USBD_CtlError>
      break;
 8007d64:	e004      	b.n	8007d70 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fcb3 	bl	80086d4 <USBD_CtlError>
      break;
 8007d6e:	e000      	b.n	8007d72 <USBD_StdItfReq+0x76>
      break;
 8007d70:	bf00      	nop
    }
    break;
 8007d72:	e004      	b.n	8007d7e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fcac 	bl	80086d4 <USBD_CtlError>
    break;
 8007d7c:	bf00      	nop
  }

  return ret;
 8007d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	889b      	ldrh	r3, [r3, #4]
 8007d9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007da4:	2b20      	cmp	r3, #32
 8007da6:	d004      	beq.n	8007db2 <USBD_StdEPReq+0x2a>
 8007da8:	2b40      	cmp	r3, #64	; 0x40
 8007daa:	d002      	beq.n	8007db2 <USBD_StdEPReq+0x2a>
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00a      	beq.n	8007dc6 <USBD_StdEPReq+0x3e>
 8007db0:	e135      	b.n	800801e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	4798      	blx	r3
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	73fb      	strb	r3, [r7, #15]
    break;
 8007dc4:	e130      	b.n	8008028 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	785b      	ldrb	r3, [r3, #1]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d03e      	beq.n	8007e4c <USBD_StdEPReq+0xc4>
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d002      	beq.n	8007dd8 <USBD_StdEPReq+0x50>
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d077      	beq.n	8007ec6 <USBD_StdEPReq+0x13e>
 8007dd6:	e11c      	b.n	8008012 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d002      	beq.n	8007de8 <USBD_StdEPReq+0x60>
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d015      	beq.n	8007e12 <USBD_StdEPReq+0x8a>
 8007de6:	e02b      	b.n	8007e40 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00c      	beq.n	8007e08 <USBD_StdEPReq+0x80>
 8007dee:	7bbb      	ldrb	r3, [r7, #14]
 8007df0:	2b80      	cmp	r3, #128	; 0x80
 8007df2:	d009      	beq.n	8007e08 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007df4:	7bbb      	ldrb	r3, [r7, #14]
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f001 f9dd 	bl	80091b8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dfe:	2180      	movs	r1, #128	; 0x80
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f001 f9d9 	bl	80091b8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007e06:	e020      	b.n	8007e4a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fc62 	bl	80086d4 <USBD_CtlError>
        break;
 8007e10:	e01b      	b.n	8007e4a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	885b      	ldrh	r3, [r3, #2]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10e      	bne.n	8007e38 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e1a:	7bbb      	ldrb	r3, [r7, #14]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00b      	beq.n	8007e38 <USBD_StdEPReq+0xb0>
 8007e20:	7bbb      	ldrb	r3, [r7, #14]
 8007e22:	2b80      	cmp	r3, #128	; 0x80
 8007e24:	d008      	beq.n	8007e38 <USBD_StdEPReq+0xb0>
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	88db      	ldrh	r3, [r3, #6]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d104      	bne.n	8007e38 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e2e:	7bbb      	ldrb	r3, [r7, #14]
 8007e30:	4619      	mov	r1, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f001 f9c0 	bl	80091b8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 fd16 	bl	800886a <USBD_CtlSendStatus>

        break;
 8007e3e:	e004      	b.n	8007e4a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fc46 	bl	80086d4 <USBD_CtlError>
        break;
 8007e48:	bf00      	nop
      }
      break;
 8007e4a:	e0e7      	b.n	800801c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d002      	beq.n	8007e5c <USBD_StdEPReq+0xd4>
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d015      	beq.n	8007e86 <USBD_StdEPReq+0xfe>
 8007e5a:	e02d      	b.n	8007eb8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e5c:	7bbb      	ldrb	r3, [r7, #14]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00c      	beq.n	8007e7c <USBD_StdEPReq+0xf4>
 8007e62:	7bbb      	ldrb	r3, [r7, #14]
 8007e64:	2b80      	cmp	r3, #128	; 0x80
 8007e66:	d009      	beq.n	8007e7c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f001 f9a3 	bl	80091b8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e72:	2180      	movs	r1, #128	; 0x80
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f001 f99f 	bl	80091b8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007e7a:	e023      	b.n	8007ec4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fc28 	bl	80086d4 <USBD_CtlError>
        break;
 8007e84:	e01e      	b.n	8007ec4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	885b      	ldrh	r3, [r3, #2]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d119      	bne.n	8007ec2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007e8e:	7bbb      	ldrb	r3, [r7, #14]
 8007e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d004      	beq.n	8007ea2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e98:	7bbb      	ldrb	r3, [r7, #14]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f001 f9aa 	bl	80091f6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fce1 	bl	800886a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	4798      	blx	r3
        }
        break;
 8007eb6:	e004      	b.n	8007ec2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fc0a 	bl	80086d4 <USBD_CtlError>
        break;
 8007ec0:	e000      	b.n	8007ec4 <USBD_StdEPReq+0x13c>
        break;
 8007ec2:	bf00      	nop
      }
      break;
 8007ec4:	e0aa      	b.n	800801c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d002      	beq.n	8007ed6 <USBD_StdEPReq+0x14e>
 8007ed0:	2b03      	cmp	r3, #3
 8007ed2:	d032      	beq.n	8007f3a <USBD_StdEPReq+0x1b2>
 8007ed4:	e097      	b.n	8008006 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ed6:	7bbb      	ldrb	r3, [r7, #14]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d007      	beq.n	8007eec <USBD_StdEPReq+0x164>
 8007edc:	7bbb      	ldrb	r3, [r7, #14]
 8007ede:	2b80      	cmp	r3, #128	; 0x80
 8007ee0:	d004      	beq.n	8007eec <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fbf5 	bl	80086d4 <USBD_CtlError>
          break;
 8007eea:	e091      	b.n	8008010 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007eec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	da0b      	bge.n	8007f0c <USBD_StdEPReq+0x184>
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007efa:	4613      	mov	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	3310      	adds	r3, #16
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	4413      	add	r3, r2
 8007f08:	3304      	adds	r3, #4
 8007f0a:	e00b      	b.n	8007f24 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007f0c:	7bbb      	ldrb	r3, [r7, #14]
 8007f0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f12:	4613      	mov	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	4413      	add	r3, r2
 8007f22:	3304      	adds	r3, #4
 8007f24:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	2202      	movs	r2, #2
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fc3f 	bl	80087b6 <USBD_CtlSendData>
        break;
 8007f38:	e06a      	b.n	8008010 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007f3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	da11      	bge.n	8007f66 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f42:	7bbb      	ldrb	r3, [r7, #14]
 8007f44:	f003 020f 	and.w	r2, r3, #15
 8007f48:	6879      	ldr	r1, [r7, #4]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	440b      	add	r3, r1
 8007f54:	3324      	adds	r3, #36	; 0x24
 8007f56:	881b      	ldrh	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d117      	bne.n	8007f8c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fbb8 	bl	80086d4 <USBD_CtlError>
            break;
 8007f64:	e054      	b.n	8008010 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f66:	7bbb      	ldrb	r3, [r7, #14]
 8007f68:	f003 020f 	and.w	r2, r3, #15
 8007f6c:	6879      	ldr	r1, [r7, #4]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4413      	add	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	440b      	add	r3, r1
 8007f78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d104      	bne.n	8007f8c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fba5 	bl	80086d4 <USBD_CtlError>
            break;
 8007f8a:	e041      	b.n	8008010 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	da0b      	bge.n	8007fac <USBD_StdEPReq+0x224>
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
 8007f96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	3310      	adds	r3, #16
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	3304      	adds	r3, #4
 8007faa:	e00b      	b.n	8007fc4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007fac:	7bbb      	ldrb	r3, [r7, #14]
 8007fae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	3304      	adds	r3, #4
 8007fc4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007fc6:	7bbb      	ldrb	r3, [r7, #14]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d002      	beq.n	8007fd2 <USBD_StdEPReq+0x24a>
 8007fcc:	7bbb      	ldrb	r3, [r7, #14]
 8007fce:	2b80      	cmp	r3, #128	; 0x80
 8007fd0:	d103      	bne.n	8007fda <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	e00e      	b.n	8007ff8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007fda:	7bbb      	ldrb	r3, [r7, #14]
 8007fdc:	4619      	mov	r1, r3
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f001 f928 	bl	8009234 <USBD_LL_IsStallEP>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	2201      	movs	r2, #1
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	e002      	b.n	8007ff8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fbd9 	bl	80087b6 <USBD_CtlSendData>
          break;
 8008004:	e004      	b.n	8008010 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fb63 	bl	80086d4 <USBD_CtlError>
        break;
 800800e:	bf00      	nop
      }
      break;
 8008010:	e004      	b.n	800801c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fb5d 	bl	80086d4 <USBD_CtlError>
      break;
 800801a:	bf00      	nop
    }
    break;
 800801c:	e004      	b.n	8008028 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800801e:	6839      	ldr	r1, [r7, #0]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fb57 	bl	80086d4 <USBD_CtlError>
    break;
 8008026:	bf00      	nop
  }

  return ret;
 8008028:	7bfb      	ldrb	r3, [r7, #15]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
	...

08008034 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800803e:	2300      	movs	r3, #0
 8008040:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008042:	2300      	movs	r3, #0
 8008044:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008046:	2300      	movs	r3, #0
 8008048:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	885b      	ldrh	r3, [r3, #2]
 800804e:	0a1b      	lsrs	r3, r3, #8
 8008050:	b29b      	uxth	r3, r3
 8008052:	3b01      	subs	r3, #1
 8008054:	2b0e      	cmp	r3, #14
 8008056:	f200 8152 	bhi.w	80082fe <USBD_GetDescriptor+0x2ca>
 800805a:	a201      	add	r2, pc, #4	; (adr r2, 8008060 <USBD_GetDescriptor+0x2c>)
 800805c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008060:	080080d1 	.word	0x080080d1
 8008064:	080080e9 	.word	0x080080e9
 8008068:	08008129 	.word	0x08008129
 800806c:	080082ff 	.word	0x080082ff
 8008070:	080082ff 	.word	0x080082ff
 8008074:	0800829f 	.word	0x0800829f
 8008078:	080082cb 	.word	0x080082cb
 800807c:	080082ff 	.word	0x080082ff
 8008080:	080082ff 	.word	0x080082ff
 8008084:	080082ff 	.word	0x080082ff
 8008088:	080082ff 	.word	0x080082ff
 800808c:	080082ff 	.word	0x080082ff
 8008090:	080082ff 	.word	0x080082ff
 8008094:	080082ff 	.word	0x080082ff
 8008098:	0800809d 	.word	0x0800809d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080a2:	69db      	ldr	r3, [r3, #28]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00b      	beq.n	80080c0 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	7c12      	ldrb	r2, [r2, #16]
 80080b4:	f107 0108 	add.w	r1, r7, #8
 80080b8:	4610      	mov	r0, r2
 80080ba:	4798      	blx	r3
 80080bc:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80080be:	e126      	b.n	800830e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fb06 	bl	80086d4 <USBD_CtlError>
      err++;
 80080c8:	7afb      	ldrb	r3, [r7, #11]
 80080ca:	3301      	adds	r3, #1
 80080cc:	72fb      	strb	r3, [r7, #11]
    break;
 80080ce:	e11e      	b.n	800830e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	7c12      	ldrb	r2, [r2, #16]
 80080dc:	f107 0108 	add.w	r1, r7, #8
 80080e0:	4610      	mov	r0, r2
 80080e2:	4798      	blx	r3
 80080e4:	60f8      	str	r0, [r7, #12]
    break;
 80080e6:	e112      	b.n	800830e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	7c1b      	ldrb	r3, [r3, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d10d      	bne.n	800810c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f8:	f107 0208 	add.w	r2, r7, #8
 80080fc:	4610      	mov	r0, r2
 80080fe:	4798      	blx	r3
 8008100:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3301      	adds	r3, #1
 8008106:	2202      	movs	r2, #2
 8008108:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800810a:	e100      	b.n	800830e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008114:	f107 0208 	add.w	r2, r7, #8
 8008118:	4610      	mov	r0, r2
 800811a:	4798      	blx	r3
 800811c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3301      	adds	r3, #1
 8008122:	2202      	movs	r2, #2
 8008124:	701a      	strb	r2, [r3, #0]
    break;
 8008126:	e0f2      	b.n	800830e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	885b      	ldrh	r3, [r3, #2]
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b05      	cmp	r3, #5
 8008130:	f200 80ac 	bhi.w	800828c <USBD_GetDescriptor+0x258>
 8008134:	a201      	add	r2, pc, #4	; (adr r2, 800813c <USBD_GetDescriptor+0x108>)
 8008136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813a:	bf00      	nop
 800813c:	08008155 	.word	0x08008155
 8008140:	08008189 	.word	0x08008189
 8008144:	080081bd 	.word	0x080081bd
 8008148:	080081f1 	.word	0x080081f1
 800814c:	08008225 	.word	0x08008225
 8008150:	08008259 	.word	0x08008259
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00b      	beq.n	8008178 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	7c12      	ldrb	r2, [r2, #16]
 800816c:	f107 0108 	add.w	r1, r7, #8
 8008170:	4610      	mov	r0, r2
 8008172:	4798      	blx	r3
 8008174:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008176:	e091      	b.n	800829c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 faaa 	bl	80086d4 <USBD_CtlError>
        err++;
 8008180:	7afb      	ldrb	r3, [r7, #11]
 8008182:	3301      	adds	r3, #1
 8008184:	72fb      	strb	r3, [r7, #11]
      break;
 8008186:	e089      	b.n	800829c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00b      	beq.n	80081ac <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	7c12      	ldrb	r2, [r2, #16]
 80081a0:	f107 0108 	add.w	r1, r7, #8
 80081a4:	4610      	mov	r0, r2
 80081a6:	4798      	blx	r3
 80081a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081aa:	e077      	b.n	800829c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fa90 	bl	80086d4 <USBD_CtlError>
        err++;
 80081b4:	7afb      	ldrb	r3, [r7, #11]
 80081b6:	3301      	adds	r3, #1
 80081b8:	72fb      	strb	r3, [r7, #11]
      break;
 80081ba:	e06f      	b.n	800829c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081c2:	68db      	ldr	r3, [r3, #12]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00b      	beq.n	80081e0 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	7c12      	ldrb	r2, [r2, #16]
 80081d4:	f107 0108 	add.w	r1, r7, #8
 80081d8:	4610      	mov	r0, r2
 80081da:	4798      	blx	r3
 80081dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081de:	e05d      	b.n	800829c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fa76 	bl	80086d4 <USBD_CtlError>
        err++;
 80081e8:	7afb      	ldrb	r3, [r7, #11]
 80081ea:	3301      	adds	r3, #1
 80081ec:	72fb      	strb	r3, [r7, #11]
      break;
 80081ee:	e055      	b.n	800829c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00b      	beq.n	8008214 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	7c12      	ldrb	r2, [r2, #16]
 8008208:	f107 0108 	add.w	r1, r7, #8
 800820c:	4610      	mov	r0, r2
 800820e:	4798      	blx	r3
 8008210:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008212:	e043      	b.n	800829c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fa5c 	bl	80086d4 <USBD_CtlError>
        err++;
 800821c:	7afb      	ldrb	r3, [r7, #11]
 800821e:	3301      	adds	r3, #1
 8008220:	72fb      	strb	r3, [r7, #11]
      break;
 8008222:	e03b      	b.n	800829c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00b      	beq.n	8008248 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008236:	695b      	ldr	r3, [r3, #20]
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	7c12      	ldrb	r2, [r2, #16]
 800823c:	f107 0108 	add.w	r1, r7, #8
 8008240:	4610      	mov	r0, r2
 8008242:	4798      	blx	r3
 8008244:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008246:	e029      	b.n	800829c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fa42 	bl	80086d4 <USBD_CtlError>
        err++;
 8008250:	7afb      	ldrb	r3, [r7, #11]
 8008252:	3301      	adds	r3, #1
 8008254:	72fb      	strb	r3, [r7, #11]
      break;
 8008256:	e021      	b.n	800829c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00b      	beq.n	800827c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	7c12      	ldrb	r2, [r2, #16]
 8008270:	f107 0108 	add.w	r1, r7, #8
 8008274:	4610      	mov	r0, r2
 8008276:	4798      	blx	r3
 8008278:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800827a:	e00f      	b.n	800829c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fa28 	bl	80086d4 <USBD_CtlError>
        err++;
 8008284:	7afb      	ldrb	r3, [r7, #11]
 8008286:	3301      	adds	r3, #1
 8008288:	72fb      	strb	r3, [r7, #11]
      break;
 800828a:	e007      	b.n	800829c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fa20 	bl	80086d4 <USBD_CtlError>
      err++;
 8008294:	7afb      	ldrb	r3, [r7, #11]
 8008296:	3301      	adds	r3, #1
 8008298:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800829a:	bf00      	nop
    }
    break;
 800829c:	e037      	b.n	800830e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	7c1b      	ldrb	r3, [r3, #16]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d109      	bne.n	80082ba <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ae:	f107 0208 	add.w	r2, r7, #8
 80082b2:	4610      	mov	r0, r2
 80082b4:	4798      	blx	r3
 80082b6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80082b8:	e029      	b.n	800830e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80082ba:	6839      	ldr	r1, [r7, #0]
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fa09 	bl	80086d4 <USBD_CtlError>
      err++;
 80082c2:	7afb      	ldrb	r3, [r7, #11]
 80082c4:	3301      	adds	r3, #1
 80082c6:	72fb      	strb	r3, [r7, #11]
    break;
 80082c8:	e021      	b.n	800830e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	7c1b      	ldrb	r3, [r3, #16]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10d      	bne.n	80082ee <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082da:	f107 0208 	add.w	r2, r7, #8
 80082de:	4610      	mov	r0, r2
 80082e0:	4798      	blx	r3
 80082e2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	3301      	adds	r3, #1
 80082e8:	2207      	movs	r2, #7
 80082ea:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80082ec:	e00f      	b.n	800830e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 f9ef 	bl	80086d4 <USBD_CtlError>
      err++;
 80082f6:	7afb      	ldrb	r3, [r7, #11]
 80082f8:	3301      	adds	r3, #1
 80082fa:	72fb      	strb	r3, [r7, #11]
    break;
 80082fc:	e007      	b.n	800830e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f9e7 	bl	80086d4 <USBD_CtlError>
    err++;
 8008306:	7afb      	ldrb	r3, [r7, #11]
 8008308:	3301      	adds	r3, #1
 800830a:	72fb      	strb	r3, [r7, #11]
    break;
 800830c:	bf00      	nop
  }

  if (err != 0U)
 800830e:	7afb      	ldrb	r3, [r7, #11]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d11e      	bne.n	8008352 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	88db      	ldrh	r3, [r3, #6]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d016      	beq.n	800834a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800831c:	893b      	ldrh	r3, [r7, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00e      	beq.n	8008340 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	88da      	ldrh	r2, [r3, #6]
 8008326:	893b      	ldrh	r3, [r7, #8]
 8008328:	4293      	cmp	r3, r2
 800832a:	bf28      	it	cs
 800832c:	4613      	movcs	r3, r2
 800832e:	b29b      	uxth	r3, r3
 8008330:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008332:	893b      	ldrh	r3, [r7, #8]
 8008334:	461a      	mov	r2, r3
 8008336:	68f9      	ldr	r1, [r7, #12]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fa3c 	bl	80087b6 <USBD_CtlSendData>
 800833e:	e009      	b.n	8008354 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f9c6 	bl	80086d4 <USBD_CtlError>
 8008348:	e004      	b.n	8008354 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fa8d 	bl	800886a <USBD_CtlSendStatus>
 8008350:	e000      	b.n	8008354 <USBD_GetDescriptor+0x320>
    return;
 8008352:	bf00      	nop
    }
  }
}
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop

0800835c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	889b      	ldrh	r3, [r3, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d130      	bne.n	80083d0 <USBD_SetAddress+0x74>
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	88db      	ldrh	r3, [r3, #6]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d12c      	bne.n	80083d0 <USBD_SetAddress+0x74>
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	885b      	ldrh	r3, [r3, #2]
 800837a:	2b7f      	cmp	r3, #127	; 0x7f
 800837c:	d828      	bhi.n	80083d0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	885b      	ldrh	r3, [r3, #2]
 8008382:	b2db      	uxtb	r3, r3
 8008384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008388:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008390:	2b03      	cmp	r3, #3
 8008392:	d104      	bne.n	800839e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 f99c 	bl	80086d4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800839c:	e01c      	b.n	80083d8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	7bfa      	ldrb	r2, [r7, #15]
 80083a2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
 80083a8:	4619      	mov	r1, r3
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 ff6e 	bl	800928c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 fa5a 	bl	800886a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80083b6:	7bfb      	ldrb	r3, [r7, #15]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d004      	beq.n	80083c6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2202      	movs	r2, #2
 80083c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c4:	e008      	b.n	80083d8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ce:	e003      	b.n	80083d8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80083d0:	6839      	ldr	r1, [r7, #0]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f97e 	bl	80086d4 <USBD_CtlError>
  }
}
 80083d8:	bf00      	nop
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	885b      	ldrh	r3, [r3, #2]
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	4b4b      	ldr	r3, [pc, #300]	; (8008524 <USBD_SetConfig+0x144>)
 80083f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083f8:	4b4a      	ldr	r3, [pc, #296]	; (8008524 <USBD_SetConfig+0x144>)
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d905      	bls.n	800840c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f966 	bl	80086d4 <USBD_CtlError>
    return USBD_FAIL;
 8008408:	2303      	movs	r3, #3
 800840a:	e087      	b.n	800851c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008412:	2b02      	cmp	r3, #2
 8008414:	d002      	beq.n	800841c <USBD_SetConfig+0x3c>
 8008416:	2b03      	cmp	r3, #3
 8008418:	d025      	beq.n	8008466 <USBD_SetConfig+0x86>
 800841a:	e071      	b.n	8008500 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800841c:	4b41      	ldr	r3, [pc, #260]	; (8008524 <USBD_SetConfig+0x144>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d01c      	beq.n	800845e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008424:	4b3f      	ldr	r3, [pc, #252]	; (8008524 <USBD_SetConfig+0x144>)
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	461a      	mov	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800842e:	4b3d      	ldr	r3, [pc, #244]	; (8008524 <USBD_SetConfig+0x144>)
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7ff f97d 	bl	8007734 <USBD_SetClassConfig>
 800843a:	4603      	mov	r3, r0
 800843c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800843e:	7bfb      	ldrb	r3, [r7, #15]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d004      	beq.n	800844e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f944 	bl	80086d4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800844c:	e065      	b.n	800851a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fa0b 	bl	800886a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2203      	movs	r2, #3
 8008458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800845c:	e05d      	b.n	800851a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 fa03 	bl	800886a <USBD_CtlSendStatus>
    break;
 8008464:	e059      	b.n	800851a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008466:	4b2f      	ldr	r3, [pc, #188]	; (8008524 <USBD_SetConfig+0x144>)
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d112      	bne.n	8008494 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2202      	movs	r2, #2
 8008472:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008476:	4b2b      	ldr	r3, [pc, #172]	; (8008524 <USBD_SetConfig+0x144>)
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	461a      	mov	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008480:	4b28      	ldr	r3, [pc, #160]	; (8008524 <USBD_SetConfig+0x144>)
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f7ff f970 	bl	800776c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f9ec 	bl	800886a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008492:	e042      	b.n	800851a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008494:	4b23      	ldr	r3, [pc, #140]	; (8008524 <USBD_SetConfig+0x144>)
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	461a      	mov	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d02a      	beq.n	80084f8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f7ff f95e 	bl	800776c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80084b0:	4b1c      	ldr	r3, [pc, #112]	; (8008524 <USBD_SetConfig+0x144>)
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	461a      	mov	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80084ba:	4b1a      	ldr	r3, [pc, #104]	; (8008524 <USBD_SetConfig+0x144>)
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f7ff f937 	bl	8007734 <USBD_SetClassConfig>
 80084c6:	4603      	mov	r3, r0
 80084c8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80084ca:	7bfb      	ldrb	r3, [r7, #15]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00f      	beq.n	80084f0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f8fe 	bl	80086d4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7ff f943 	bl	800776c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2202      	movs	r2, #2
 80084ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80084ee:	e014      	b.n	800851a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f9ba 	bl	800886a <USBD_CtlSendStatus>
    break;
 80084f6:	e010      	b.n	800851a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 f9b6 	bl	800886a <USBD_CtlSendStatus>
    break;
 80084fe:	e00c      	b.n	800851a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f8e6 	bl	80086d4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008508:	4b06      	ldr	r3, [pc, #24]	; (8008524 <USBD_SetConfig+0x144>)
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	4619      	mov	r1, r3
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f7ff f92c 	bl	800776c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008514:	2303      	movs	r3, #3
 8008516:	73fb      	strb	r3, [r7, #15]
    break;
 8008518:	bf00      	nop
  }

  return ret;
 800851a:	7bfb      	ldrb	r3, [r7, #15]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	2000028c 	.word	0x2000028c

08008528 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	88db      	ldrh	r3, [r3, #6]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d004      	beq.n	8008544 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800853a:	6839      	ldr	r1, [r7, #0]
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f8c9 	bl	80086d4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008542:	e021      	b.n	8008588 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800854a:	2b01      	cmp	r3, #1
 800854c:	db17      	blt.n	800857e <USBD_GetConfig+0x56>
 800854e:	2b02      	cmp	r3, #2
 8008550:	dd02      	ble.n	8008558 <USBD_GetConfig+0x30>
 8008552:	2b03      	cmp	r3, #3
 8008554:	d00b      	beq.n	800856e <USBD_GetConfig+0x46>
 8008556:	e012      	b.n	800857e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	3308      	adds	r3, #8
 8008562:	2201      	movs	r2, #1
 8008564:	4619      	mov	r1, r3
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f925 	bl	80087b6 <USBD_CtlSendData>
      break;
 800856c:	e00c      	b.n	8008588 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	3304      	adds	r3, #4
 8008572:	2201      	movs	r2, #1
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f91d 	bl	80087b6 <USBD_CtlSendData>
      break;
 800857c:	e004      	b.n	8008588 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800857e:	6839      	ldr	r1, [r7, #0]
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f8a7 	bl	80086d4 <USBD_CtlError>
      break;
 8008586:	bf00      	nop
}
 8008588:	bf00      	nop
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085a0:	3b01      	subs	r3, #1
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d81e      	bhi.n	80085e4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	88db      	ldrh	r3, [r3, #6]
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d004      	beq.n	80085b8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f88f 	bl	80086d4 <USBD_CtlError>
      break;
 80085b6:	e01a      	b.n	80085ee <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d005      	beq.n	80085d4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	f043 0202 	orr.w	r2, r3, #2
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	330c      	adds	r3, #12
 80085d8:	2202      	movs	r2, #2
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 f8ea 	bl	80087b6 <USBD_CtlSendData>
    break;
 80085e2:	e004      	b.n	80085ee <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 f874 	bl	80086d4 <USBD_CtlError>
    break;
 80085ec:	bf00      	nop
  }
}
 80085ee:	bf00      	nop
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b082      	sub	sp, #8
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
 80085fe:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	885b      	ldrh	r3, [r3, #2]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d106      	bne.n	8008616 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f92a 	bl	800886a <USBD_CtlSendStatus>
  }
}
 8008616:	bf00      	nop
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b082      	sub	sp, #8
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
 8008626:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800862e:	3b01      	subs	r3, #1
 8008630:	2b02      	cmp	r3, #2
 8008632:	d80b      	bhi.n	800864c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	885b      	ldrh	r3, [r3, #2]
 8008638:	2b01      	cmp	r3, #1
 800863a:	d10c      	bne.n	8008656 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f910 	bl	800886a <USBD_CtlSendStatus>
      }
      break;
 800864a:	e004      	b.n	8008656 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f840 	bl	80086d4 <USBD_CtlError>
      break;
 8008654:	e000      	b.n	8008658 <USBD_ClrFeature+0x3a>
      break;
 8008656:	bf00      	nop
  }
}
 8008658:	bf00      	nop
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	781a      	ldrb	r2, [r3, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3301      	adds	r3, #1
 800867a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	781a      	ldrb	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	3301      	adds	r3, #1
 8008688:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	f7ff faa9 	bl	8007be2 <SWAPBYTE>
 8008690:	4603      	mov	r3, r0
 8008692:	461a      	mov	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	3301      	adds	r3, #1
 800869c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3301      	adds	r3, #1
 80086a2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f7ff fa9c 	bl	8007be2 <SWAPBYTE>
 80086aa:	4603      	mov	r3, r0
 80086ac:	461a      	mov	r2, r3
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	3301      	adds	r3, #1
 80086b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	3301      	adds	r3, #1
 80086bc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f7ff fa8f 	bl	8007be2 <SWAPBYTE>
 80086c4:	4603      	mov	r3, r0
 80086c6:	461a      	mov	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	80da      	strh	r2, [r3, #6]
}
 80086cc:	bf00      	nop
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80086de:	2180      	movs	r1, #128	; 0x80
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fd69 	bl	80091b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80086e6:	2100      	movs	r1, #0
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fd65 	bl	80091b8 <USBD_LL_StallEP>
}
 80086ee:	bf00      	nop
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b086      	sub	sp, #24
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	60f8      	str	r0, [r7, #12]
 80086fe:	60b9      	str	r1, [r7, #8]
 8008700:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008702:	2300      	movs	r3, #0
 8008704:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d036      	beq.n	800877a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008710:	6938      	ldr	r0, [r7, #16]
 8008712:	f000 f836 	bl	8008782 <USBD_GetLen>
 8008716:	4603      	mov	r3, r0
 8008718:	3301      	adds	r3, #1
 800871a:	b29b      	uxth	r3, r3
 800871c:	005b      	lsls	r3, r3, #1
 800871e:	b29a      	uxth	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008724:	7dfb      	ldrb	r3, [r7, #23]
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	4413      	add	r3, r2
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	7812      	ldrb	r2, [r2, #0]
 800872e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008730:	7dfb      	ldrb	r3, [r7, #23]
 8008732:	3301      	adds	r3, #1
 8008734:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008736:	7dfb      	ldrb	r3, [r7, #23]
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	4413      	add	r3, r2
 800873c:	2203      	movs	r2, #3
 800873e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008740:	7dfb      	ldrb	r3, [r7, #23]
 8008742:	3301      	adds	r3, #1
 8008744:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008746:	e013      	b.n	8008770 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008748:	7dfb      	ldrb	r3, [r7, #23]
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	4413      	add	r3, r2
 800874e:	693a      	ldr	r2, [r7, #16]
 8008750:	7812      	ldrb	r2, [r2, #0]
 8008752:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	3301      	adds	r3, #1
 8008758:	613b      	str	r3, [r7, #16]
    idx++;
 800875a:	7dfb      	ldrb	r3, [r7, #23]
 800875c:	3301      	adds	r3, #1
 800875e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008760:	7dfb      	ldrb	r3, [r7, #23]
 8008762:	68ba      	ldr	r2, [r7, #8]
 8008764:	4413      	add	r3, r2
 8008766:	2200      	movs	r2, #0
 8008768:	701a      	strb	r2, [r3, #0]
    idx++;
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	3301      	adds	r3, #1
 800876e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1e7      	bne.n	8008748 <USBD_GetString+0x52>
 8008778:	e000      	b.n	800877c <USBD_GetString+0x86>
    return;
 800877a:	bf00      	nop
  }
}
 800877c:	3718      	adds	r7, #24
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008782:	b480      	push	{r7}
 8008784:	b085      	sub	sp, #20
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800878a:	2300      	movs	r3, #0
 800878c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008792:	e005      	b.n	80087a0 <USBD_GetLen+0x1e>
  {
    len++;
 8008794:	7bfb      	ldrb	r3, [r7, #15]
 8008796:	3301      	adds	r3, #1
 8008798:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	3301      	adds	r3, #1
 800879e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1f5      	bne.n	8008794 <USBD_GetLen+0x12>
  }

  return len;
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b084      	sub	sp, #16
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	60f8      	str	r0, [r7, #12]
 80087be:	60b9      	str	r1, [r7, #8]
 80087c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2202      	movs	r2, #2
 80087c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68ba      	ldr	r2, [r7, #8]
 80087da:	2100      	movs	r1, #0
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f000 fd74 	bl	80092ca <USBD_LL_Transmit>

  return USBD_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	2100      	movs	r1, #0
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f000 fd63 	bl	80092ca <USBD_LL_Transmit>

  return USBD_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b084      	sub	sp, #16
 8008812:	af00      	add	r7, sp, #0
 8008814:	60f8      	str	r0, [r7, #12]
 8008816:	60b9      	str	r1, [r7, #8]
 8008818:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2203      	movs	r2, #3
 800881e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68ba      	ldr	r2, [r7, #8]
 8008836:	2100      	movs	r1, #0
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f000 fd67 	bl	800930c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	2100      	movs	r1, #0
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f000 fd56 	bl	800930c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b082      	sub	sp, #8
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2204      	movs	r2, #4
 8008876:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800887a:	2300      	movs	r3, #0
 800887c:	2200      	movs	r2, #0
 800887e:	2100      	movs	r1, #0
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 fd22 	bl	80092ca <USBD_LL_Transmit>

  return USBD_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2205      	movs	r2, #5
 800889c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088a0:	2300      	movs	r3, #0
 80088a2:	2200      	movs	r2, #0
 80088a4:	2100      	movs	r1, #0
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fd30 	bl	800930c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
	...

080088b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80088bc:	2200      	movs	r2, #0
 80088be:	4912      	ldr	r1, [pc, #72]	; (8008908 <MX_USB_DEVICE_Init+0x50>)
 80088c0:	4812      	ldr	r0, [pc, #72]	; (800890c <MX_USB_DEVICE_Init+0x54>)
 80088c2:	f7fe fec9 	bl	8007658 <USBD_Init>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d001      	beq.n	80088d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80088cc:	f7f8 fc5c 	bl	8001188 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80088d0:	490f      	ldr	r1, [pc, #60]	; (8008910 <MX_USB_DEVICE_Init+0x58>)
 80088d2:	480e      	ldr	r0, [pc, #56]	; (800890c <MX_USB_DEVICE_Init+0x54>)
 80088d4:	f7fe fef6 	bl	80076c4 <USBD_RegisterClass>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d001      	beq.n	80088e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80088de:	f7f8 fc53 	bl	8001188 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80088e2:	490c      	ldr	r1, [pc, #48]	; (8008914 <MX_USB_DEVICE_Init+0x5c>)
 80088e4:	4809      	ldr	r0, [pc, #36]	; (800890c <MX_USB_DEVICE_Init+0x54>)
 80088e6:	f7fe fe1b 	bl	8007520 <USBD_CDC_RegisterInterface>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80088f0:	f7f8 fc4a 	bl	8001188 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80088f4:	4805      	ldr	r0, [pc, #20]	; (800890c <MX_USB_DEVICE_Init+0x54>)
 80088f6:	f7fe ff06 	bl	8007706 <USBD_Start>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d001      	beq.n	8008904 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008900:	f7f8 fc42 	bl	8001188 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008904:	bf00      	nop
 8008906:	bd80      	pop	{r7, pc}
 8008908:	20000130 	.word	0x20000130
 800890c:	20000344 	.word	0x20000344
 8008910:	20000018 	.word	0x20000018
 8008914:	2000011c 	.word	0x2000011c

08008918 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800891c:	2200      	movs	r2, #0
 800891e:	4905      	ldr	r1, [pc, #20]	; (8008934 <CDC_Init_FS+0x1c>)
 8008920:	4805      	ldr	r0, [pc, #20]	; (8008938 <CDC_Init_FS+0x20>)
 8008922:	f7fe fe12 	bl	800754a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008926:	4905      	ldr	r1, [pc, #20]	; (800893c <CDC_Init_FS+0x24>)
 8008928:	4803      	ldr	r0, [pc, #12]	; (8008938 <CDC_Init_FS+0x20>)
 800892a:	f7fe fe27 	bl	800757c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800892e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008930:	4618      	mov	r0, r3
 8008932:	bd80      	pop	{r7, pc}
 8008934:	20000e18 	.word	0x20000e18
 8008938:	20000344 	.word	0x20000344
 800893c:	20000618 	.word	0x20000618

08008940 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008940:	b480      	push	{r7}
 8008942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008944:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008946:	4618      	mov	r0, r3
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	4603      	mov	r3, r0
 8008958:	6039      	str	r1, [r7, #0]
 800895a:	71fb      	strb	r3, [r7, #7]
 800895c:	4613      	mov	r3, r2
 800895e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	2b23      	cmp	r3, #35	; 0x23
 8008964:	d84a      	bhi.n	80089fc <CDC_Control_FS+0xac>
 8008966:	a201      	add	r2, pc, #4	; (adr r2, 800896c <CDC_Control_FS+0x1c>)
 8008968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896c:	080089fd 	.word	0x080089fd
 8008970:	080089fd 	.word	0x080089fd
 8008974:	080089fd 	.word	0x080089fd
 8008978:	080089fd 	.word	0x080089fd
 800897c:	080089fd 	.word	0x080089fd
 8008980:	080089fd 	.word	0x080089fd
 8008984:	080089fd 	.word	0x080089fd
 8008988:	080089fd 	.word	0x080089fd
 800898c:	080089fd 	.word	0x080089fd
 8008990:	080089fd 	.word	0x080089fd
 8008994:	080089fd 	.word	0x080089fd
 8008998:	080089fd 	.word	0x080089fd
 800899c:	080089fd 	.word	0x080089fd
 80089a0:	080089fd 	.word	0x080089fd
 80089a4:	080089fd 	.word	0x080089fd
 80089a8:	080089fd 	.word	0x080089fd
 80089ac:	080089fd 	.word	0x080089fd
 80089b0:	080089fd 	.word	0x080089fd
 80089b4:	080089fd 	.word	0x080089fd
 80089b8:	080089fd 	.word	0x080089fd
 80089bc:	080089fd 	.word	0x080089fd
 80089c0:	080089fd 	.word	0x080089fd
 80089c4:	080089fd 	.word	0x080089fd
 80089c8:	080089fd 	.word	0x080089fd
 80089cc:	080089fd 	.word	0x080089fd
 80089d0:	080089fd 	.word	0x080089fd
 80089d4:	080089fd 	.word	0x080089fd
 80089d8:	080089fd 	.word	0x080089fd
 80089dc:	080089fd 	.word	0x080089fd
 80089e0:	080089fd 	.word	0x080089fd
 80089e4:	080089fd 	.word	0x080089fd
 80089e8:	080089fd 	.word	0x080089fd
 80089ec:	080089fd 	.word	0x080089fd
 80089f0:	080089fd 	.word	0x080089fd
 80089f4:	080089fd 	.word	0x080089fd
 80089f8:	080089fd 	.word	0x080089fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80089fc:	bf00      	nop
  }

  return (USBD_OK);
 80089fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* TODO Handle the case where packet contains multiple SLCAN strings */
  uint8_t BufIndex;
  for (BufIndex = 0; BufIndex < *Len; BufIndex++){
 8008a16:	2300      	movs	r3, #0
 8008a18:	73fb      	strb	r3, [r7, #15]
 8008a1a:	e053      	b.n	8008ac4 <CDC_Receive_FS+0xb8>
	  if (Buf[BufIndex] == '\n' /* || Buf[BufIndex] == '\0' */) {
 8008a1c:	7bfb      	ldrb	r3, [r7, #15]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	4413      	add	r3, r2
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	2b0a      	cmp	r3, #10
 8008a26:	d049      	beq.n	8008abc <CDC_Receive_FS+0xb0>
		  continue; // Skip Newlines
	  }
	  SLCAN_CommandStringTx[SLCAN_StrIndex++] = Buf[BufIndex]; // Copy each byte of USB data into SLCAN string to be parsed
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	441a      	add	r2, r3
 8008a2e:	4b2e      	ldr	r3, [pc, #184]	; (8008ae8 <CDC_Receive_FS+0xdc>)
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	1c59      	adds	r1, r3, #1
 8008a34:	b2c8      	uxtb	r0, r1
 8008a36:	492c      	ldr	r1, [pc, #176]	; (8008ae8 <CDC_Receive_FS+0xdc>)
 8008a38:	7008      	strb	r0, [r1, #0]
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	7812      	ldrb	r2, [r2, #0]
 8008a3e:	4b2b      	ldr	r3, [pc, #172]	; (8008aec <CDC_Receive_FS+0xe0>)
 8008a40:	545a      	strb	r2, [r3, r1]
	  if (Buf[BufIndex] == '\r') {			// Parse string when carriage return is seen
 8008a42:	7bfb      	ldrb	r3, [r7, #15]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	4413      	add	r3, r2
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	2b0d      	cmp	r3, #13
 8008a4c:	d12e      	bne.n	8008aac <CDC_Receive_FS+0xa0>
		  status = SLCAN_Parse_Str(SLCAN_CommandStringTx, SLCAN_StrIndex, &header, data);
 8008a4e:	4b26      	ldr	r3, [pc, #152]	; (8008ae8 <CDC_Receive_FS+0xdc>)
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	4619      	mov	r1, r3
 8008a54:	4b26      	ldr	r3, [pc, #152]	; (8008af0 <CDC_Receive_FS+0xe4>)
 8008a56:	4a27      	ldr	r2, [pc, #156]	; (8008af4 <CDC_Receive_FS+0xe8>)
 8008a58:	4824      	ldr	r0, [pc, #144]	; (8008aec <CDC_Receive_FS+0xe0>)
 8008a5a:	f7f8 fca5 	bl	80013a8 <SLCAN_Parse_Str>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	461a      	mov	r2, r3
 8008a62:	4b25      	ldr	r3, [pc, #148]	; (8008af8 <CDC_Receive_FS+0xec>)
 8008a64:	701a      	strb	r2, [r3, #0]
		  if(status == SLCAN_OK){ // Fails if string is not parsed correctly
 8008a66:	4b24      	ldr	r3, [pc, #144]	; (8008af8 <CDC_Receive_FS+0xec>)
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d11a      	bne.n	8008aa4 <CDC_Receive_FS+0x98>
			  if (SLCAN_CommandStringTx[0] == 't' ||
 8008a6e:	4b1f      	ldr	r3, [pc, #124]	; (8008aec <CDC_Receive_FS+0xe0>)
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	2b74      	cmp	r3, #116	; 0x74
 8008a74:	d00b      	beq.n	8008a8e <CDC_Receive_FS+0x82>
				  SLCAN_CommandStringTx[0] == 'T' ||
 8008a76:	4b1d      	ldr	r3, [pc, #116]	; (8008aec <CDC_Receive_FS+0xe0>)
 8008a78:	781b      	ldrb	r3, [r3, #0]
			  if (SLCAN_CommandStringTx[0] == 't' ||
 8008a7a:	2b54      	cmp	r3, #84	; 0x54
 8008a7c:	d007      	beq.n	8008a8e <CDC_Receive_FS+0x82>
				  SLCAN_CommandStringTx[0] == 'r' ||
 8008a7e:	4b1b      	ldr	r3, [pc, #108]	; (8008aec <CDC_Receive_FS+0xe0>)
 8008a80:	781b      	ldrb	r3, [r3, #0]
				  SLCAN_CommandStringTx[0] == 'T' ||
 8008a82:	2b72      	cmp	r3, #114	; 0x72
 8008a84:	d003      	beq.n	8008a8e <CDC_Receive_FS+0x82>
				  SLCAN_CommandStringTx[0] == 'R') 		// Check if Transmit (t,T,r,R) Command
 8008a86:	4b19      	ldr	r3, [pc, #100]	; (8008aec <CDC_Receive_FS+0xe0>)
 8008a88:	781b      	ldrb	r3, [r3, #0]
				  SLCAN_CommandStringTx[0] == 'r' ||
 8008a8a:	2b52      	cmp	r3, #82	; 0x52
 8008a8c:	d10a      	bne.n	8008aa4 <CDC_Receive_FS+0x98>
			  {
				  if (HAL_CAN_AddTxMessage(&hcan1, &header, data, &CAN_TX_MAILBOX_USED) == HAL_OK)
 8008a8e:	4b1b      	ldr	r3, [pc, #108]	; (8008afc <CDC_Receive_FS+0xf0>)
 8008a90:	4a17      	ldr	r2, [pc, #92]	; (8008af0 <CDC_Receive_FS+0xe4>)
 8008a92:	4918      	ldr	r1, [pc, #96]	; (8008af4 <CDC_Receive_FS+0xe8>)
 8008a94:	481a      	ldr	r0, [pc, #104]	; (8008b00 <CDC_Receive_FS+0xf4>)
 8008a96:	f7f9 fce8 	bl	800246a <HAL_CAN_AddTxMessage>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d101      	bne.n	8008aa4 <CDC_Receive_FS+0x98>
					  LED_RedOn();
 8008aa0:	f7f7 fe34 	bl	800070c <LED_RedOn>
			  }
		  }
		  else {
			  ; // TODO Add a handler for invalid SLCAN commands
		  }
		  SLCAN_StrIndex = 0;
 8008aa4:	4b10      	ldr	r3, [pc, #64]	; (8008ae8 <CDC_Receive_FS+0xdc>)
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	701a      	strb	r2, [r3, #0]
		  break;
 8008aaa:	e010      	b.n	8008ace <CDC_Receive_FS+0xc2>
	  }
	  else if (SLCAN_StrIndex >= SLCAN_MTU) { 		// SLCAN_CommandStringTx overflow. Discard command and reset to zero
 8008aac:	4b0e      	ldr	r3, [pc, #56]	; (8008ae8 <CDC_Receive_FS+0xdc>)
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	2b1d      	cmp	r3, #29
 8008ab2:	d904      	bls.n	8008abe <CDC_Receive_FS+0xb2>
		  SLCAN_StrIndex = 0;
 8008ab4:	4b0c      	ldr	r3, [pc, #48]	; (8008ae8 <CDC_Receive_FS+0xdc>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	701a      	strb	r2, [r3, #0]
		  break;
 8008aba:	e008      	b.n	8008ace <CDC_Receive_FS+0xc2>
		  continue; // Skip Newlines
 8008abc:	bf00      	nop
  for (BufIndex = 0; BufIndex < *Len; BufIndex++){
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	73fb      	strb	r3, [r7, #15]
 8008ac4:	7bfa      	ldrb	r2, [r7, #15]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d3a6      	bcc.n	8008a1c <CDC_Receive_FS+0x10>
	  }
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]); 		// It's possible that I have this and the above section in the wrong order
 8008ace:	6879      	ldr	r1, [r7, #4]
 8008ad0:	480c      	ldr	r0, [pc, #48]	; (8008b04 <CDC_Receive_FS+0xf8>)
 8008ad2:	f7fe fd53 	bl	800757c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);				// Do these functions reset the receive buffer, or do they do they trigger receiving??
 8008ad6:	480b      	ldr	r0, [pc, #44]	; (8008b04 <CDC_Receive_FS+0xf8>)
 8008ad8:	f7fe fd94 	bl	8007604 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008adc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	2000028d 	.word	0x2000028d
 8008aec:	20000320 	.word	0x20000320
 8008af0:	20001618 	.word	0x20001618
 8008af4:	20001620 	.word	0x20001620
 8008af8:	20001638 	.word	0x20001638
 8008afc:	20000614 	.word	0x20000614
 8008b00:	200002d8 	.word	0x200002d8
 8008b04:	20000344 	.word	0x20000344

08008b08 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	460b      	mov	r3, r1
 8008b12:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008b18:	4b0d      	ldr	r3, [pc, #52]	; (8008b50 <CDC_Transmit_FS+0x48>)
 8008b1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b1e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d001      	beq.n	8008b2e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e00b      	b.n	8008b46 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008b2e:	887b      	ldrh	r3, [r7, #2]
 8008b30:	461a      	mov	r2, r3
 8008b32:	6879      	ldr	r1, [r7, #4]
 8008b34:	4806      	ldr	r0, [pc, #24]	; (8008b50 <CDC_Transmit_FS+0x48>)
 8008b36:	f7fe fd08 	bl	800754a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008b3a:	4805      	ldr	r0, [pc, #20]	; (8008b50 <CDC_Transmit_FS+0x48>)
 8008b3c:	f7fe fd32 	bl	80075a4 <USBD_CDC_TransmitPacket>
 8008b40:	4603      	mov	r3, r0
 8008b42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	20000344 	.word	0x20000344

08008b54 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b087      	sub	sp, #28
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008b62:	2300      	movs	r3, #0
 8008b64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008b66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	371c      	adds	r7, #28
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
	...

08008b78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	4603      	mov	r3, r0
 8008b80:	6039      	str	r1, [r7, #0]
 8008b82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	2212      	movs	r2, #18
 8008b88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008b8a:	4b03      	ldr	r3, [pc, #12]	; (8008b98 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	20000150 	.word	0x20000150

08008b9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	6039      	str	r1, [r7, #0]
 8008ba6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	2204      	movs	r2, #4
 8008bac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008bae:	4b03      	ldr	r3, [pc, #12]	; (8008bbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	20000170 	.word	0x20000170

08008bc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	6039      	str	r1, [r7, #0]
 8008bca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bcc:	79fb      	ldrb	r3, [r7, #7]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d105      	bne.n	8008bde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	4907      	ldr	r1, [pc, #28]	; (8008bf4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008bd6:	4808      	ldr	r0, [pc, #32]	; (8008bf8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008bd8:	f7ff fd8d 	bl	80086f6 <USBD_GetString>
 8008bdc:	e004      	b.n	8008be8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bde:	683a      	ldr	r2, [r7, #0]
 8008be0:	4904      	ldr	r1, [pc, #16]	; (8008bf4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008be2:	4805      	ldr	r0, [pc, #20]	; (8008bf8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008be4:	f7ff fd87 	bl	80086f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008be8:	4b02      	ldr	r3, [pc, #8]	; (8008bf4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	2000163c 	.word	0x2000163c
 8008bf8:	080096f8 	.word	0x080096f8

08008bfc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	4603      	mov	r3, r0
 8008c04:	6039      	str	r1, [r7, #0]
 8008c06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c08:	683a      	ldr	r2, [r7, #0]
 8008c0a:	4904      	ldr	r1, [pc, #16]	; (8008c1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c0c:	4804      	ldr	r0, [pc, #16]	; (8008c20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c0e:	f7ff fd72 	bl	80086f6 <USBD_GetString>
  return USBD_StrDesc;
 8008c12:	4b02      	ldr	r3, [pc, #8]	; (8008c1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	2000163c 	.word	0x2000163c
 8008c20:	08009710 	.word	0x08009710

08008c24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	6039      	str	r1, [r7, #0]
 8008c2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	221a      	movs	r2, #26
 8008c34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c36:	f000 f855 	bl	8008ce4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c3a:	4b02      	ldr	r3, [pc, #8]	; (8008c44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	20000174 	.word	0x20000174

08008c48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	4603      	mov	r3, r0
 8008c50:	6039      	str	r1, [r7, #0]
 8008c52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c54:	79fb      	ldrb	r3, [r7, #7]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d105      	bne.n	8008c66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	4907      	ldr	r1, [pc, #28]	; (8008c7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c5e:	4808      	ldr	r0, [pc, #32]	; (8008c80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c60:	f7ff fd49 	bl	80086f6 <USBD_GetString>
 8008c64:	e004      	b.n	8008c70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	4904      	ldr	r1, [pc, #16]	; (8008c7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c6a:	4805      	ldr	r0, [pc, #20]	; (8008c80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c6c:	f7ff fd43 	bl	80086f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c70:	4b02      	ldr	r3, [pc, #8]	; (8008c7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	2000163c 	.word	0x2000163c
 8008c80:	08009724 	.word	0x08009724

08008c84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	6039      	str	r1, [r7, #0]
 8008c8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c90:	79fb      	ldrb	r3, [r7, #7]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d105      	bne.n	8008ca2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c96:	683a      	ldr	r2, [r7, #0]
 8008c98:	4907      	ldr	r1, [pc, #28]	; (8008cb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c9a:	4808      	ldr	r0, [pc, #32]	; (8008cbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c9c:	f7ff fd2b 	bl	80086f6 <USBD_GetString>
 8008ca0:	e004      	b.n	8008cac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	4904      	ldr	r1, [pc, #16]	; (8008cb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ca6:	4805      	ldr	r0, [pc, #20]	; (8008cbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ca8:	f7ff fd25 	bl	80086f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cac:	4b02      	ldr	r3, [pc, #8]	; (8008cb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	2000163c 	.word	0x2000163c
 8008cbc:	08009730 	.word	0x08009730

08008cc0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	6039      	str	r1, [r7, #0]
 8008cca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	220c      	movs	r2, #12
 8008cd0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008cd2:	4b03      	ldr	r3, [pc, #12]	; (8008ce0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	20000164 	.word	0x20000164

08008ce4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008cea:	4b0f      	ldr	r3, [pc, #60]	; (8008d28 <Get_SerialNum+0x44>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008cf0:	4b0e      	ldr	r3, [pc, #56]	; (8008d2c <Get_SerialNum+0x48>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008cf6:	4b0e      	ldr	r3, [pc, #56]	; (8008d30 <Get_SerialNum+0x4c>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4413      	add	r3, r2
 8008d02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d009      	beq.n	8008d1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d0a:	2208      	movs	r2, #8
 8008d0c:	4909      	ldr	r1, [pc, #36]	; (8008d34 <Get_SerialNum+0x50>)
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 f814 	bl	8008d3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d14:	2204      	movs	r2, #4
 8008d16:	4908      	ldr	r1, [pc, #32]	; (8008d38 <Get_SerialNum+0x54>)
 8008d18:	68b8      	ldr	r0, [r7, #8]
 8008d1a:	f000 f80f 	bl	8008d3c <IntToUnicode>
  }
}
 8008d1e:	bf00      	nop
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	1fff7a10 	.word	0x1fff7a10
 8008d2c:	1fff7a14 	.word	0x1fff7a14
 8008d30:	1fff7a18 	.word	0x1fff7a18
 8008d34:	20000176 	.word	0x20000176
 8008d38:	20000186 	.word	0x20000186

08008d3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	4613      	mov	r3, r2
 8008d48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d4e:	2300      	movs	r3, #0
 8008d50:	75fb      	strb	r3, [r7, #23]
 8008d52:	e027      	b.n	8008da4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	0f1b      	lsrs	r3, r3, #28
 8008d58:	2b09      	cmp	r3, #9
 8008d5a:	d80b      	bhi.n	8008d74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	0f1b      	lsrs	r3, r3, #28
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	7dfb      	ldrb	r3, [r7, #23]
 8008d64:	005b      	lsls	r3, r3, #1
 8008d66:	4619      	mov	r1, r3
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	440b      	add	r3, r1
 8008d6c:	3230      	adds	r2, #48	; 0x30
 8008d6e:	b2d2      	uxtb	r2, r2
 8008d70:	701a      	strb	r2, [r3, #0]
 8008d72:	e00a      	b.n	8008d8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	0f1b      	lsrs	r3, r3, #28
 8008d78:	b2da      	uxtb	r2, r3
 8008d7a:	7dfb      	ldrb	r3, [r7, #23]
 8008d7c:	005b      	lsls	r3, r3, #1
 8008d7e:	4619      	mov	r1, r3
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	440b      	add	r3, r1
 8008d84:	3237      	adds	r2, #55	; 0x37
 8008d86:	b2d2      	uxtb	r2, r2
 8008d88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	011b      	lsls	r3, r3, #4
 8008d8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d90:	7dfb      	ldrb	r3, [r7, #23]
 8008d92:	005b      	lsls	r3, r3, #1
 8008d94:	3301      	adds	r3, #1
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	4413      	add	r3, r2
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d9e:	7dfb      	ldrb	r3, [r7, #23]
 8008da0:	3301      	adds	r3, #1
 8008da2:	75fb      	strb	r3, [r7, #23]
 8008da4:	7dfa      	ldrb	r2, [r7, #23]
 8008da6:	79fb      	ldrb	r3, [r7, #7]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d3d3      	bcc.n	8008d54 <IntToUnicode+0x18>
  }
}
 8008dac:	bf00      	nop
 8008dae:	371c      	adds	r7, #28
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b08a      	sub	sp, #40	; 0x28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dc0:	f107 0314 	add.w	r3, r7, #20
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	601a      	str	r2, [r3, #0]
 8008dc8:	605a      	str	r2, [r3, #4]
 8008dca:	609a      	str	r2, [r3, #8]
 8008dcc:	60da      	str	r2, [r3, #12]
 8008dce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008dd8:	d147      	bne.n	8008e6a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dda:	2300      	movs	r3, #0
 8008ddc:	613b      	str	r3, [r7, #16]
 8008dde:	4b25      	ldr	r3, [pc, #148]	; (8008e74 <HAL_PCD_MspInit+0xbc>)
 8008de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de2:	4a24      	ldr	r2, [pc, #144]	; (8008e74 <HAL_PCD_MspInit+0xbc>)
 8008de4:	f043 0301 	orr.w	r3, r3, #1
 8008de8:	6313      	str	r3, [r2, #48]	; 0x30
 8008dea:	4b22      	ldr	r3, [pc, #136]	; (8008e74 <HAL_PCD_MspInit+0xbc>)
 8008dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	613b      	str	r3, [r7, #16]
 8008df4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8008df6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8008dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e00:	2300      	movs	r3, #0
 8008e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e04:	2303      	movs	r3, #3
 8008e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e08:	230a      	movs	r3, #10
 8008e0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e0c:	f107 0314 	add.w	r3, r7, #20
 8008e10:	4619      	mov	r1, r3
 8008e12:	4819      	ldr	r0, [pc, #100]	; (8008e78 <HAL_PCD_MspInit+0xc0>)
 8008e14:	f7f9 fe78 	bl	8002b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8008e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e22:	2300      	movs	r3, #0
 8008e24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008e26:	f107 0314 	add.w	r3, r7, #20
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	4812      	ldr	r0, [pc, #72]	; (8008e78 <HAL_PCD_MspInit+0xc0>)
 8008e2e:	f7f9 fe6b 	bl	8002b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e32:	4b10      	ldr	r3, [pc, #64]	; (8008e74 <HAL_PCD_MspInit+0xbc>)
 8008e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e36:	4a0f      	ldr	r2, [pc, #60]	; (8008e74 <HAL_PCD_MspInit+0xbc>)
 8008e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e3c:	6353      	str	r3, [r2, #52]	; 0x34
 8008e3e:	2300      	movs	r3, #0
 8008e40:	60fb      	str	r3, [r7, #12]
 8008e42:	4b0c      	ldr	r3, [pc, #48]	; (8008e74 <HAL_PCD_MspInit+0xbc>)
 8008e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e46:	4a0b      	ldr	r2, [pc, #44]	; (8008e74 <HAL_PCD_MspInit+0xbc>)
 8008e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8008e4e:	4b09      	ldr	r3, [pc, #36]	; (8008e74 <HAL_PCD_MspInit+0xbc>)
 8008e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e56:	60fb      	str	r3, [r7, #12]
 8008e58:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	2043      	movs	r0, #67	; 0x43
 8008e60:	f7f9 fe1b 	bl	8002a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e64:	2043      	movs	r0, #67	; 0x43
 8008e66:	f7f9 fe34 	bl	8002ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e6a:	bf00      	nop
 8008e6c:	3728      	adds	r7, #40	; 0x28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	40023800 	.word	0x40023800
 8008e78:	40020000 	.word	0x40020000

08008e7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008e90:	4619      	mov	r1, r3
 8008e92:	4610      	mov	r0, r2
 8008e94:	f7fe fc82 	bl	800779c <USBD_LL_SetupStage>
}
 8008e98:	bf00      	nop
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008eb2:	78fa      	ldrb	r2, [r7, #3]
 8008eb4:	6879      	ldr	r1, [r7, #4]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	00db      	lsls	r3, r3, #3
 8008eba:	1a9b      	subs	r3, r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	440b      	add	r3, r1
 8008ec0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	78fb      	ldrb	r3, [r7, #3]
 8008ec8:	4619      	mov	r1, r3
 8008eca:	f7fe fcba 	bl	8007842 <USBD_LL_DataOutStage>
}
 8008ece:	bf00      	nop
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b082      	sub	sp, #8
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	460b      	mov	r3, r1
 8008ee0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008ee8:	78fa      	ldrb	r2, [r7, #3]
 8008eea:	6879      	ldr	r1, [r7, #4]
 8008eec:	4613      	mov	r3, r2
 8008eee:	00db      	lsls	r3, r3, #3
 8008ef0:	1a9b      	subs	r3, r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	440b      	add	r3, r1
 8008ef6:	3348      	adds	r3, #72	; 0x48
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	78fb      	ldrb	r3, [r7, #3]
 8008efc:	4619      	mov	r1, r3
 8008efe:	f7fe fd03 	bl	8007908 <USBD_LL_DataInStage>
}
 8008f02:	bf00      	nop
 8008f04:	3708      	adds	r7, #8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b082      	sub	sp, #8
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7fe fe07 	bl	8007b2c <USBD_LL_SOF>
}
 8008f1e:	bf00      	nop
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b084      	sub	sp, #16
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d102      	bne.n	8008f40 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	73fb      	strb	r3, [r7, #15]
 8008f3e:	e008      	b.n	8008f52 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d102      	bne.n	8008f4e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	73fb      	strb	r3, [r7, #15]
 8008f4c:	e001      	b.n	8008f52 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008f4e:	f7f8 f91b 	bl	8001188 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f58:	7bfa      	ldrb	r2, [r7, #15]
 8008f5a:	4611      	mov	r1, r2
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fe fdaa 	bl	8007ab6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fe fd63 	bl	8007a34 <USBD_LL_Reset>
}
 8008f6e:	bf00      	nop
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
	...

08008f78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fe fda5 	bl	8007ad6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	6812      	ldr	r2, [r2, #0]
 8008f9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f9e:	f043 0301 	orr.w	r3, r3, #1
 8008fa2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a1b      	ldr	r3, [r3, #32]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d005      	beq.n	8008fb8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fac:	4b04      	ldr	r3, [pc, #16]	; (8008fc0 <HAL_PCD_SuspendCallback+0x48>)
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	4a03      	ldr	r2, [pc, #12]	; (8008fc0 <HAL_PCD_SuspendCallback+0x48>)
 8008fb2:	f043 0306 	orr.w	r3, r3, #6
 8008fb6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008fb8:	bf00      	nop
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	e000ed00 	.word	0xe000ed00

08008fc4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fe fd94 	bl	8007b00 <USBD_LL_Resume>
}
 8008fd8:	bf00      	nop
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ff2:	78fa      	ldrb	r2, [r7, #3]
 8008ff4:	4611      	mov	r1, r2
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fe fdbf 	bl	8007b7a <USBD_LL_IsoOUTIncomplete>
}
 8008ffc:	bf00      	nop
 8008ffe:	3708      	adds	r7, #8
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	460b      	mov	r3, r1
 800900e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009016:	78fa      	ldrb	r2, [r7, #3]
 8009018:	4611      	mov	r1, r2
 800901a:	4618      	mov	r0, r3
 800901c:	f7fe fda0 	bl	8007b60 <USBD_LL_IsoINIncomplete>
}
 8009020:	bf00      	nop
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009036:	4618      	mov	r0, r3
 8009038:	f7fe fdac 	bl	8007b94 <USBD_LL_DevConnected>
}
 800903c:	bf00      	nop
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009052:	4618      	mov	r0, r3
 8009054:	f7fe fda9 	bl	8007baa <USBD_LL_DevDisconnected>
}
 8009058:	bf00      	nop
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d13c      	bne.n	80090ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009070:	4a20      	ldr	r2, [pc, #128]	; (80090f4 <USBD_LL_Init+0x94>)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a1e      	ldr	r2, [pc, #120]	; (80090f4 <USBD_LL_Init+0x94>)
 800907c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009080:	4b1c      	ldr	r3, [pc, #112]	; (80090f4 <USBD_LL_Init+0x94>)
 8009082:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009086:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009088:	4b1a      	ldr	r3, [pc, #104]	; (80090f4 <USBD_LL_Init+0x94>)
 800908a:	2206      	movs	r2, #6
 800908c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800908e:	4b19      	ldr	r3, [pc, #100]	; (80090f4 <USBD_LL_Init+0x94>)
 8009090:	2202      	movs	r2, #2
 8009092:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009094:	4b17      	ldr	r3, [pc, #92]	; (80090f4 <USBD_LL_Init+0x94>)
 8009096:	2200      	movs	r2, #0
 8009098:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800909a:	4b16      	ldr	r3, [pc, #88]	; (80090f4 <USBD_LL_Init+0x94>)
 800909c:	2202      	movs	r2, #2
 800909e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80090a0:	4b14      	ldr	r3, [pc, #80]	; (80090f4 <USBD_LL_Init+0x94>)
 80090a2:	2201      	movs	r2, #1
 80090a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80090a6:	4b13      	ldr	r3, [pc, #76]	; (80090f4 <USBD_LL_Init+0x94>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80090ac:	4b11      	ldr	r3, [pc, #68]	; (80090f4 <USBD_LL_Init+0x94>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80090b2:	4b10      	ldr	r3, [pc, #64]	; (80090f4 <USBD_LL_Init+0x94>)
 80090b4:	2201      	movs	r2, #1
 80090b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80090b8:	4b0e      	ldr	r3, [pc, #56]	; (80090f4 <USBD_LL_Init+0x94>)
 80090ba:	2200      	movs	r2, #0
 80090bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80090be:	480d      	ldr	r0, [pc, #52]	; (80090f4 <USBD_LL_Init+0x94>)
 80090c0:	f7f9 fecd 	bl	8002e5e <HAL_PCD_Init>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80090ca:	f7f8 f85d 	bl	8001188 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80090ce:	2180      	movs	r1, #128	; 0x80
 80090d0:	4808      	ldr	r0, [pc, #32]	; (80090f4 <USBD_LL_Init+0x94>)
 80090d2:	f7fb f85e 	bl	8004192 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80090d6:	2240      	movs	r2, #64	; 0x40
 80090d8:	2100      	movs	r1, #0
 80090da:	4806      	ldr	r0, [pc, #24]	; (80090f4 <USBD_LL_Init+0x94>)
 80090dc:	f7fb f812 	bl	8004104 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80090e0:	2280      	movs	r2, #128	; 0x80
 80090e2:	2101      	movs	r1, #1
 80090e4:	4803      	ldr	r0, [pc, #12]	; (80090f4 <USBD_LL_Init+0x94>)
 80090e6:	f7fb f80d 	bl	8004104 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	2000183c 	.word	0x2000183c

080090f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800910e:	4618      	mov	r0, r3
 8009110:	f7f9 ffc9 	bl	80030a6 <HAL_PCD_Start>
 8009114:	4603      	mov	r3, r0
 8009116:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009118:	7bfb      	ldrb	r3, [r7, #15]
 800911a:	4618      	mov	r0, r3
 800911c:	f000 f978 	bl	8009410 <USBD_Get_USB_Status>
 8009120:	4603      	mov	r3, r0
 8009122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009124:	7bbb      	ldrb	r3, [r7, #14]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3710      	adds	r7, #16
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b084      	sub	sp, #16
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	4608      	mov	r0, r1
 8009138:	4611      	mov	r1, r2
 800913a:	461a      	mov	r2, r3
 800913c:	4603      	mov	r3, r0
 800913e:	70fb      	strb	r3, [r7, #3]
 8009140:	460b      	mov	r3, r1
 8009142:	70bb      	strb	r3, [r7, #2]
 8009144:	4613      	mov	r3, r2
 8009146:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009148:	2300      	movs	r3, #0
 800914a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800914c:	2300      	movs	r3, #0
 800914e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009156:	78bb      	ldrb	r3, [r7, #2]
 8009158:	883a      	ldrh	r2, [r7, #0]
 800915a:	78f9      	ldrb	r1, [r7, #3]
 800915c:	f7fa fbda 	bl	8003914 <HAL_PCD_EP_Open>
 8009160:	4603      	mov	r3, r0
 8009162:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009164:	7bfb      	ldrb	r3, [r7, #15]
 8009166:	4618      	mov	r0, r3
 8009168:	f000 f952 	bl	8009410 <USBD_Get_USB_Status>
 800916c:	4603      	mov	r3, r0
 800916e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009170:	7bbb      	ldrb	r3, [r7, #14]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b084      	sub	sp, #16
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
 8009182:	460b      	mov	r3, r1
 8009184:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009186:	2300      	movs	r3, #0
 8009188:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800918a:	2300      	movs	r3, #0
 800918c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009194:	78fa      	ldrb	r2, [r7, #3]
 8009196:	4611      	mov	r1, r2
 8009198:	4618      	mov	r0, r3
 800919a:	f7fa fc23 	bl	80039e4 <HAL_PCD_EP_Close>
 800919e:	4603      	mov	r3, r0
 80091a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 f933 	bl	8009410 <USBD_Get_USB_Status>
 80091aa:	4603      	mov	r3, r0
 80091ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	460b      	mov	r3, r1
 80091c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091c4:	2300      	movs	r3, #0
 80091c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091d2:	78fa      	ldrb	r2, [r7, #3]
 80091d4:	4611      	mov	r1, r2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fa fcfb 	bl	8003bd2 <HAL_PCD_EP_SetStall>
 80091dc:	4603      	mov	r3, r0
 80091de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 f914 	bl	8009410 <USBD_Get_USB_Status>
 80091e8:	4603      	mov	r3, r0
 80091ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b084      	sub	sp, #16
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
 80091fe:	460b      	mov	r3, r1
 8009200:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009202:	2300      	movs	r3, #0
 8009204:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009210:	78fa      	ldrb	r2, [r7, #3]
 8009212:	4611      	mov	r1, r2
 8009214:	4618      	mov	r0, r3
 8009216:	f7fa fd40 	bl	8003c9a <HAL_PCD_EP_ClrStall>
 800921a:	4603      	mov	r3, r0
 800921c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800921e:	7bfb      	ldrb	r3, [r7, #15]
 8009220:	4618      	mov	r0, r3
 8009222:	f000 f8f5 	bl	8009410 <USBD_Get_USB_Status>
 8009226:	4603      	mov	r3, r0
 8009228:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800922a:	7bbb      	ldrb	r3, [r7, #14]
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	460b      	mov	r3, r1
 800923e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009246:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009248:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800924c:	2b00      	cmp	r3, #0
 800924e:	da0b      	bge.n	8009268 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009250:	78fb      	ldrb	r3, [r7, #3]
 8009252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009256:	68f9      	ldr	r1, [r7, #12]
 8009258:	4613      	mov	r3, r2
 800925a:	00db      	lsls	r3, r3, #3
 800925c:	1a9b      	subs	r3, r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	440b      	add	r3, r1
 8009262:	333e      	adds	r3, #62	; 0x3e
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	e00b      	b.n	8009280 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009268:	78fb      	ldrb	r3, [r7, #3]
 800926a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800926e:	68f9      	ldr	r1, [r7, #12]
 8009270:	4613      	mov	r3, r2
 8009272:	00db      	lsls	r3, r3, #3
 8009274:	1a9b      	subs	r3, r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	440b      	add	r3, r1
 800927a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800927e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009280:	4618      	mov	r0, r3
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	460b      	mov	r3, r1
 8009296:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092a6:	78fa      	ldrb	r2, [r7, #3]
 80092a8:	4611      	mov	r1, r2
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fa fb0d 	bl	80038ca <HAL_PCD_SetAddress>
 80092b0:	4603      	mov	r3, r0
 80092b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 f8aa 	bl	8009410 <USBD_Get_USB_Status>
 80092bc:	4603      	mov	r3, r0
 80092be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3710      	adds	r7, #16
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b086      	sub	sp, #24
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	60f8      	str	r0, [r7, #12]
 80092d2:	607a      	str	r2, [r7, #4]
 80092d4:	603b      	str	r3, [r7, #0]
 80092d6:	460b      	mov	r3, r1
 80092d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80092e8:	7af9      	ldrb	r1, [r7, #11]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	f7fa fc26 	bl	8003b3e <HAL_PCD_EP_Transmit>
 80092f2:	4603      	mov	r3, r0
 80092f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092f6:	7dfb      	ldrb	r3, [r7, #23]
 80092f8:	4618      	mov	r0, r3
 80092fa:	f000 f889 	bl	8009410 <USBD_Get_USB_Status>
 80092fe:	4603      	mov	r3, r0
 8009300:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009302:	7dbb      	ldrb	r3, [r7, #22]
}
 8009304:	4618      	mov	r0, r3
 8009306:	3718      	adds	r7, #24
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	607a      	str	r2, [r7, #4]
 8009316:	603b      	str	r3, [r7, #0]
 8009318:	460b      	mov	r3, r1
 800931a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800932a:	7af9      	ldrb	r1, [r7, #11]
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	f7fa fba2 	bl	8003a78 <HAL_PCD_EP_Receive>
 8009334:	4603      	mov	r3, r0
 8009336:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009338:	7dfb      	ldrb	r3, [r7, #23]
 800933a:	4618      	mov	r0, r3
 800933c:	f000 f868 	bl	8009410 <USBD_Get_USB_Status>
 8009340:	4603      	mov	r3, r0
 8009342:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009344:	7dbb      	ldrb	r3, [r7, #22]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3718      	adds	r7, #24
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b082      	sub	sp, #8
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
 8009356:	460b      	mov	r3, r1
 8009358:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009360:	78fa      	ldrb	r2, [r7, #3]
 8009362:	4611      	mov	r1, r2
 8009364:	4618      	mov	r0, r3
 8009366:	f7fa fbd2 	bl	8003b0e <HAL_PCD_EP_GetRxCount>
 800936a:	4603      	mov	r3, r0
}
 800936c:	4618      	mov	r0, r3
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	460b      	mov	r3, r1
 800937e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009380:	78fb      	ldrb	r3, [r7, #3]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d002      	beq.n	800938c <HAL_PCDEx_LPM_Callback+0x18>
 8009386:	2b01      	cmp	r3, #1
 8009388:	d01f      	beq.n	80093ca <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800938a:	e03b      	b.n	8009404 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6a1b      	ldr	r3, [r3, #32]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d007      	beq.n	80093a4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8009394:	f7f7 fd38 	bl	8000e08 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009398:	4b1c      	ldr	r3, [pc, #112]	; (800940c <HAL_PCDEx_LPM_Callback+0x98>)
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	4a1b      	ldr	r2, [pc, #108]	; (800940c <HAL_PCDEx_LPM_Callback+0x98>)
 800939e:	f023 0306 	bic.w	r3, r3, #6
 80093a2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	6812      	ldr	r2, [r2, #0]
 80093b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093b6:	f023 0301 	bic.w	r3, r3, #1
 80093ba:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fe fb9c 	bl	8007b00 <USBD_LL_Resume>
    break;
 80093c8:	e01c      	b.n	8009404 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	6812      	ldr	r2, [r2, #0]
 80093d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80093dc:	f043 0301 	orr.w	r3, r3, #1
 80093e0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7fe fb74 	bl	8007ad6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a1b      	ldr	r3, [r3, #32]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d005      	beq.n	8009402 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093f6:	4b05      	ldr	r3, [pc, #20]	; (800940c <HAL_PCDEx_LPM_Callback+0x98>)
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	4a04      	ldr	r2, [pc, #16]	; (800940c <HAL_PCDEx_LPM_Callback+0x98>)
 80093fc:	f043 0306 	orr.w	r3, r3, #6
 8009400:	6113      	str	r3, [r2, #16]
    break;
 8009402:	bf00      	nop
}
 8009404:	bf00      	nop
 8009406:	3708      	adds	r7, #8
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	e000ed00 	.word	0xe000ed00

08009410 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	4603      	mov	r3, r0
 8009418:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800941e:	79fb      	ldrb	r3, [r7, #7]
 8009420:	2b03      	cmp	r3, #3
 8009422:	d817      	bhi.n	8009454 <USBD_Get_USB_Status+0x44>
 8009424:	a201      	add	r2, pc, #4	; (adr r2, 800942c <USBD_Get_USB_Status+0x1c>)
 8009426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942a:	bf00      	nop
 800942c:	0800943d 	.word	0x0800943d
 8009430:	08009443 	.word	0x08009443
 8009434:	08009449 	.word	0x08009449
 8009438:	0800944f 	.word	0x0800944f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800943c:	2300      	movs	r3, #0
 800943e:	73fb      	strb	r3, [r7, #15]
    break;
 8009440:	e00b      	b.n	800945a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009442:	2303      	movs	r3, #3
 8009444:	73fb      	strb	r3, [r7, #15]
    break;
 8009446:	e008      	b.n	800945a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009448:	2301      	movs	r3, #1
 800944a:	73fb      	strb	r3, [r7, #15]
    break;
 800944c:	e005      	b.n	800945a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800944e:	2303      	movs	r3, #3
 8009450:	73fb      	strb	r3, [r7, #15]
    break;
 8009452:	e002      	b.n	800945a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009454:	2303      	movs	r3, #3
 8009456:	73fb      	strb	r3, [r7, #15]
    break;
 8009458:	bf00      	nop
  }
  return usb_status;
 800945a:	7bfb      	ldrb	r3, [r7, #15]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3714      	adds	r7, #20
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <__errno>:
 8009468:	4b01      	ldr	r3, [pc, #4]	; (8009470 <__errno+0x8>)
 800946a:	6818      	ldr	r0, [r3, #0]
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	20000190 	.word	0x20000190

08009474 <__libc_init_array>:
 8009474:	b570      	push	{r4, r5, r6, lr}
 8009476:	4e0d      	ldr	r6, [pc, #52]	; (80094ac <__libc_init_array+0x38>)
 8009478:	4c0d      	ldr	r4, [pc, #52]	; (80094b0 <__libc_init_array+0x3c>)
 800947a:	1ba4      	subs	r4, r4, r6
 800947c:	10a4      	asrs	r4, r4, #2
 800947e:	2500      	movs	r5, #0
 8009480:	42a5      	cmp	r5, r4
 8009482:	d109      	bne.n	8009498 <__libc_init_array+0x24>
 8009484:	4e0b      	ldr	r6, [pc, #44]	; (80094b4 <__libc_init_array+0x40>)
 8009486:	4c0c      	ldr	r4, [pc, #48]	; (80094b8 <__libc_init_array+0x44>)
 8009488:	f000 f8ea 	bl	8009660 <_init>
 800948c:	1ba4      	subs	r4, r4, r6
 800948e:	10a4      	asrs	r4, r4, #2
 8009490:	2500      	movs	r5, #0
 8009492:	42a5      	cmp	r5, r4
 8009494:	d105      	bne.n	80094a2 <__libc_init_array+0x2e>
 8009496:	bd70      	pop	{r4, r5, r6, pc}
 8009498:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800949c:	4798      	blx	r3
 800949e:	3501      	adds	r5, #1
 80094a0:	e7ee      	b.n	8009480 <__libc_init_array+0xc>
 80094a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094a6:	4798      	blx	r3
 80094a8:	3501      	adds	r5, #1
 80094aa:	e7f2      	b.n	8009492 <__libc_init_array+0x1e>
 80094ac:	08009760 	.word	0x08009760
 80094b0:	08009760 	.word	0x08009760
 80094b4:	08009760 	.word	0x08009760
 80094b8:	08009764 	.word	0x08009764

080094bc <malloc>:
 80094bc:	4b02      	ldr	r3, [pc, #8]	; (80094c8 <malloc+0xc>)
 80094be:	4601      	mov	r1, r0
 80094c0:	6818      	ldr	r0, [r3, #0]
 80094c2:	f000 b861 	b.w	8009588 <_malloc_r>
 80094c6:	bf00      	nop
 80094c8:	20000190 	.word	0x20000190

080094cc <free>:
 80094cc:	4b02      	ldr	r3, [pc, #8]	; (80094d8 <free+0xc>)
 80094ce:	4601      	mov	r1, r0
 80094d0:	6818      	ldr	r0, [r3, #0]
 80094d2:	f000 b80b 	b.w	80094ec <_free_r>
 80094d6:	bf00      	nop
 80094d8:	20000190 	.word	0x20000190

080094dc <memset>:
 80094dc:	4402      	add	r2, r0
 80094de:	4603      	mov	r3, r0
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d100      	bne.n	80094e6 <memset+0xa>
 80094e4:	4770      	bx	lr
 80094e6:	f803 1b01 	strb.w	r1, [r3], #1
 80094ea:	e7f9      	b.n	80094e0 <memset+0x4>

080094ec <_free_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4605      	mov	r5, r0
 80094f0:	2900      	cmp	r1, #0
 80094f2:	d045      	beq.n	8009580 <_free_r+0x94>
 80094f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094f8:	1f0c      	subs	r4, r1, #4
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	bfb8      	it	lt
 80094fe:	18e4      	addlt	r4, r4, r3
 8009500:	f000 f8ac 	bl	800965c <__malloc_lock>
 8009504:	4a1f      	ldr	r2, [pc, #124]	; (8009584 <_free_r+0x98>)
 8009506:	6813      	ldr	r3, [r2, #0]
 8009508:	4610      	mov	r0, r2
 800950a:	b933      	cbnz	r3, 800951a <_free_r+0x2e>
 800950c:	6063      	str	r3, [r4, #4]
 800950e:	6014      	str	r4, [r2, #0]
 8009510:	4628      	mov	r0, r5
 8009512:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009516:	f000 b8a2 	b.w	800965e <__malloc_unlock>
 800951a:	42a3      	cmp	r3, r4
 800951c:	d90c      	bls.n	8009538 <_free_r+0x4c>
 800951e:	6821      	ldr	r1, [r4, #0]
 8009520:	1862      	adds	r2, r4, r1
 8009522:	4293      	cmp	r3, r2
 8009524:	bf04      	itt	eq
 8009526:	681a      	ldreq	r2, [r3, #0]
 8009528:	685b      	ldreq	r3, [r3, #4]
 800952a:	6063      	str	r3, [r4, #4]
 800952c:	bf04      	itt	eq
 800952e:	1852      	addeq	r2, r2, r1
 8009530:	6022      	streq	r2, [r4, #0]
 8009532:	6004      	str	r4, [r0, #0]
 8009534:	e7ec      	b.n	8009510 <_free_r+0x24>
 8009536:	4613      	mov	r3, r2
 8009538:	685a      	ldr	r2, [r3, #4]
 800953a:	b10a      	cbz	r2, 8009540 <_free_r+0x54>
 800953c:	42a2      	cmp	r2, r4
 800953e:	d9fa      	bls.n	8009536 <_free_r+0x4a>
 8009540:	6819      	ldr	r1, [r3, #0]
 8009542:	1858      	adds	r0, r3, r1
 8009544:	42a0      	cmp	r0, r4
 8009546:	d10b      	bne.n	8009560 <_free_r+0x74>
 8009548:	6820      	ldr	r0, [r4, #0]
 800954a:	4401      	add	r1, r0
 800954c:	1858      	adds	r0, r3, r1
 800954e:	4282      	cmp	r2, r0
 8009550:	6019      	str	r1, [r3, #0]
 8009552:	d1dd      	bne.n	8009510 <_free_r+0x24>
 8009554:	6810      	ldr	r0, [r2, #0]
 8009556:	6852      	ldr	r2, [r2, #4]
 8009558:	605a      	str	r2, [r3, #4]
 800955a:	4401      	add	r1, r0
 800955c:	6019      	str	r1, [r3, #0]
 800955e:	e7d7      	b.n	8009510 <_free_r+0x24>
 8009560:	d902      	bls.n	8009568 <_free_r+0x7c>
 8009562:	230c      	movs	r3, #12
 8009564:	602b      	str	r3, [r5, #0]
 8009566:	e7d3      	b.n	8009510 <_free_r+0x24>
 8009568:	6820      	ldr	r0, [r4, #0]
 800956a:	1821      	adds	r1, r4, r0
 800956c:	428a      	cmp	r2, r1
 800956e:	bf04      	itt	eq
 8009570:	6811      	ldreq	r1, [r2, #0]
 8009572:	6852      	ldreq	r2, [r2, #4]
 8009574:	6062      	str	r2, [r4, #4]
 8009576:	bf04      	itt	eq
 8009578:	1809      	addeq	r1, r1, r0
 800957a:	6021      	streq	r1, [r4, #0]
 800957c:	605c      	str	r4, [r3, #4]
 800957e:	e7c7      	b.n	8009510 <_free_r+0x24>
 8009580:	bd38      	pop	{r3, r4, r5, pc}
 8009582:	bf00      	nop
 8009584:	20000290 	.word	0x20000290

08009588 <_malloc_r>:
 8009588:	b570      	push	{r4, r5, r6, lr}
 800958a:	1ccd      	adds	r5, r1, #3
 800958c:	f025 0503 	bic.w	r5, r5, #3
 8009590:	3508      	adds	r5, #8
 8009592:	2d0c      	cmp	r5, #12
 8009594:	bf38      	it	cc
 8009596:	250c      	movcc	r5, #12
 8009598:	2d00      	cmp	r5, #0
 800959a:	4606      	mov	r6, r0
 800959c:	db01      	blt.n	80095a2 <_malloc_r+0x1a>
 800959e:	42a9      	cmp	r1, r5
 80095a0:	d903      	bls.n	80095aa <_malloc_r+0x22>
 80095a2:	230c      	movs	r3, #12
 80095a4:	6033      	str	r3, [r6, #0]
 80095a6:	2000      	movs	r0, #0
 80095a8:	bd70      	pop	{r4, r5, r6, pc}
 80095aa:	f000 f857 	bl	800965c <__malloc_lock>
 80095ae:	4a21      	ldr	r2, [pc, #132]	; (8009634 <_malloc_r+0xac>)
 80095b0:	6814      	ldr	r4, [r2, #0]
 80095b2:	4621      	mov	r1, r4
 80095b4:	b991      	cbnz	r1, 80095dc <_malloc_r+0x54>
 80095b6:	4c20      	ldr	r4, [pc, #128]	; (8009638 <_malloc_r+0xb0>)
 80095b8:	6823      	ldr	r3, [r4, #0]
 80095ba:	b91b      	cbnz	r3, 80095c4 <_malloc_r+0x3c>
 80095bc:	4630      	mov	r0, r6
 80095be:	f000 f83d 	bl	800963c <_sbrk_r>
 80095c2:	6020      	str	r0, [r4, #0]
 80095c4:	4629      	mov	r1, r5
 80095c6:	4630      	mov	r0, r6
 80095c8:	f000 f838 	bl	800963c <_sbrk_r>
 80095cc:	1c43      	adds	r3, r0, #1
 80095ce:	d124      	bne.n	800961a <_malloc_r+0x92>
 80095d0:	230c      	movs	r3, #12
 80095d2:	6033      	str	r3, [r6, #0]
 80095d4:	4630      	mov	r0, r6
 80095d6:	f000 f842 	bl	800965e <__malloc_unlock>
 80095da:	e7e4      	b.n	80095a6 <_malloc_r+0x1e>
 80095dc:	680b      	ldr	r3, [r1, #0]
 80095de:	1b5b      	subs	r3, r3, r5
 80095e0:	d418      	bmi.n	8009614 <_malloc_r+0x8c>
 80095e2:	2b0b      	cmp	r3, #11
 80095e4:	d90f      	bls.n	8009606 <_malloc_r+0x7e>
 80095e6:	600b      	str	r3, [r1, #0]
 80095e8:	50cd      	str	r5, [r1, r3]
 80095ea:	18cc      	adds	r4, r1, r3
 80095ec:	4630      	mov	r0, r6
 80095ee:	f000 f836 	bl	800965e <__malloc_unlock>
 80095f2:	f104 000b 	add.w	r0, r4, #11
 80095f6:	1d23      	adds	r3, r4, #4
 80095f8:	f020 0007 	bic.w	r0, r0, #7
 80095fc:	1ac3      	subs	r3, r0, r3
 80095fe:	d0d3      	beq.n	80095a8 <_malloc_r+0x20>
 8009600:	425a      	negs	r2, r3
 8009602:	50e2      	str	r2, [r4, r3]
 8009604:	e7d0      	b.n	80095a8 <_malloc_r+0x20>
 8009606:	428c      	cmp	r4, r1
 8009608:	684b      	ldr	r3, [r1, #4]
 800960a:	bf16      	itet	ne
 800960c:	6063      	strne	r3, [r4, #4]
 800960e:	6013      	streq	r3, [r2, #0]
 8009610:	460c      	movne	r4, r1
 8009612:	e7eb      	b.n	80095ec <_malloc_r+0x64>
 8009614:	460c      	mov	r4, r1
 8009616:	6849      	ldr	r1, [r1, #4]
 8009618:	e7cc      	b.n	80095b4 <_malloc_r+0x2c>
 800961a:	1cc4      	adds	r4, r0, #3
 800961c:	f024 0403 	bic.w	r4, r4, #3
 8009620:	42a0      	cmp	r0, r4
 8009622:	d005      	beq.n	8009630 <_malloc_r+0xa8>
 8009624:	1a21      	subs	r1, r4, r0
 8009626:	4630      	mov	r0, r6
 8009628:	f000 f808 	bl	800963c <_sbrk_r>
 800962c:	3001      	adds	r0, #1
 800962e:	d0cf      	beq.n	80095d0 <_malloc_r+0x48>
 8009630:	6025      	str	r5, [r4, #0]
 8009632:	e7db      	b.n	80095ec <_malloc_r+0x64>
 8009634:	20000290 	.word	0x20000290
 8009638:	20000294 	.word	0x20000294

0800963c <_sbrk_r>:
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	4c06      	ldr	r4, [pc, #24]	; (8009658 <_sbrk_r+0x1c>)
 8009640:	2300      	movs	r3, #0
 8009642:	4605      	mov	r5, r0
 8009644:	4608      	mov	r0, r1
 8009646:	6023      	str	r3, [r4, #0]
 8009648:	f7f8 fb98 	bl	8001d7c <_sbrk>
 800964c:	1c43      	adds	r3, r0, #1
 800964e:	d102      	bne.n	8009656 <_sbrk_r+0x1a>
 8009650:	6823      	ldr	r3, [r4, #0]
 8009652:	b103      	cbz	r3, 8009656 <_sbrk_r+0x1a>
 8009654:	602b      	str	r3, [r5, #0]
 8009656:	bd38      	pop	{r3, r4, r5, pc}
 8009658:	20001c44 	.word	0x20001c44

0800965c <__malloc_lock>:
 800965c:	4770      	bx	lr

0800965e <__malloc_unlock>:
 800965e:	4770      	bx	lr

08009660 <_init>:
 8009660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009662:	bf00      	nop
 8009664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009666:	bc08      	pop	{r3}
 8009668:	469e      	mov	lr, r3
 800966a:	4770      	bx	lr

0800966c <_fini>:
 800966c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966e:	bf00      	nop
 8009670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009672:	bc08      	pop	{r3}
 8009674:	469e      	mov	lr, r3
 8009676:	4770      	bx	lr
